TITLE PAGE

INTERACTIVE TOY
(FURBY.ASM - Version 25)

INVENTOR:

Attorney Docket No. 64799
FITCH, EVEN, TABIN & FLANNERY
Suite 900
135 South LaSalle Street
Chicago, Illinois
60603-4277
Telephone (312) 372-7842

Dave Hampton

mu
;•
;•

SPC81A Source Code

{Version 251

.•
;•

Written by:

Dave Hampton

;•

Date:

July 30,

;•

Copyright

;•

All rights reserved.

(C)

/

W'

e Schulz

1998

1996,1997,1998 by Sounds Amazing!

]tmtmmmmmmmmmmmmmmtmtmmmmtmm
mt*
*

S

■
;

remember
also SBC

SBC
i£ there is a borrow carry is CLEARED
if the two numbers are equal you still get a negative

result

lemmmmmmmmmmmmmmmtmmmmmmmm
mu
;*

MODIFICATION LIST

:

Furby29/30/31 32
Final testing for shipment of code on 8/2/98.
Tables updated
tor speed updated, wake up/name fix
sequential tab. j never getting first entry.fixed.
New diagS.asm, Light3.asm (if light osc stalls it wont hang
lystem) .
Fur by 3 3
In motor brake routine,

turn motors off before turning reverse

braking pulse on to save transistors.
Furby34
Cleanup start code and wake routines
Light sensor goes max dark and stays there to reff

time,

then

call sleep macro and shut down.
:

Furby3 5
Adds four new easter eggs.BURP ATTACK. SAY NAME.
and ROOSTER LOVES YOU. Also add new names.

:::::::::

TWINkLE SONG,

;

Release 3
File *testR3a"

i;

;

1. Light sensor has a hysteresis point of continually triggering

sensor.
; 2. Light sensor decrements two instead of one on nungry counter.
; 3. Diagnos
de for light sensor wont trigger very easily.
; 4. When a tuioy
eceives the I.R. sleep conmand he sends the same
command
j
out before goi;
!
•

to sleep.

5.

When hungry is
>w enough to trigger sick counter,
deducts two instead of one for each hit.

each sensor

6.
•
;

When diagnostics complete c’ear memory, reset hungry & sick to FF
randomly choose new name ar.
voice, then write EEPROM before
going to sleep. Also extend EEPROM diagnostic to test all locations

;

for pass/fail of device.

;

1.

Add new light routine

;

8.

Change hide and seek egg to light,light,light,tummy.

.

9.

Change sick/hungry counter so that it can only get so sick and

;

not continue down to zero.

;10.

In diagnostics,

(MAX_SICK)

motcr position test

continuously
.
until the front switch is pressed,
;

until

first goes forward
.
then goes reverse continuously

the front switch is pressed again,

and then does normal

position
I
calibration stopping at the calibration switch.
;11.
j

On power up we still use tilt and invert to generate startup random
numbers, but if feed switch is pressed for cold boot, we use it to
generate random numbers, because it is controlled by the user where

;

the tilt and invert are more floky.

;12.

No matter what a'-e.

;

to generate more Furbish at older ages.

;13.
,
;

Twinkle song egg
When song is complete, if both front and back switches are pressed
we goto deep sleep. That means only the invert can wake us up, not

1

the tilt switch.

25% of

time he randomly pulls speech from age

1111*

..
j *******.*....

..
...
.
....
..
*"”**””******'

;**...

.

A-2

;

Actual numeric value for TX pitch control

;

bit 7 set * subtract value from current course value
clr » add value to cur -ent course value

1

bit 6 set ■ select music pitch table
clr «= select normal speech pitch table
bit 0-5 value to change course value (no change * 0)

;
(
I

; A math routine in 'say_0’ converts the value for ♦ or ; if <80 then subtracts from 80 to get the minus version of 00
; ie, if number is 70 then TI gets sent 10 (which is -10)
; If number is 80 or > 80 then get sent literal as positive.
;
;

NOTE:

MAX POSITIVE IS 8F
MAX NEGATIVE is 2F

;This is a difference of

;

8Fh is hi voice

;

2Fh lo voice

;

The math routine in

(*16 from normal voice of 00)
(-47 from normal voice of 00)

80h - 2Fh or 51h

(8f is very squeeeeeke)

( very low)

•Say_0•

allows a '-decimal number in the speech

table.
; A value of 80 = no change or 00 sent to TI
;

81 = +1
8f « *16

l

;?value of 7F =
;70 =

-1

from norm^. voice

-16

;
;

The voice selection should take into consideration that the hi voice
selection plus an aditional offset is never greater than 8f

;

Or a low voice minus offset never less

Voi i-'1
Vc ce2
Voice3

EQU
EQU
EQU

83h
7 Ah
71h

than 2f.

; (■»3) hi voice
;(-6) mid voice
; (-15) low voice

Sill

we converted to a random selection table,

but since all voice

j
;
j

use the equate- plus some offset, we
» th« change in the SAY 0
routine. We always assign voice 3 whicn is the lowest, and based on
the random power up pitch selection, the ram location ’Rvoice'

holds
.
.
j
the number to add to the voice*offset received from the macro
cable.
Voice EQU

Voice3

,-pitch

(choose Voicel,

Voice2.

Voice3)(voice2*norml
'

;

Select Voice3 since it is the lowest and then add the difference to

* Voice2 or Voice3.
;

Here we assign that difference to an equate to be

used in the voice table that

S voicel
S~voice2

EQU
EQU

18
09

is randomly selected on power up.

;Voice3 ♦ 18d = Voicel
;Voice3 ♦ 09d * Voice2

S_voic#3

;
j

EQU

;Voics3 ♦ OOd « Voice3

0

Motor speed pulse width :
Motor_on ■ power to motor, Motor_off

Mpulse_on
Mpulse_o££

EQU
EQU

16
16

Cal_pos_£wd EQU
Cal_pos_rev EQU

134
134

is none.

;
;

jcalibration switch forward direction
;calibration switch forward direction

..•

,...............

..

jOAXAAAAAXAAXAAAXAAAAAAAAAAAAAAAAAAAAAXAAXAXAAAAXAAAAXXi
PORTS

;'

;>
;»

SPC40A
PORT_A
PORT_C
;> PORT_D

has :
4 I/O
4 I/O
8 I/O

16 I/O pins
pins
03
pins
0-3
pins
0-7

1
*

; >

'

'• >

RAM

! '

,1
s'

.>

*

’
’

SPC40A has : 128 bytes of RAM
from S80 - $FF
*

»

ROM

■ * SPC40A has
:
;* BANKO user ROM from $0600 - $7FFF
;> BA’IKl user ROM from $8000 - SFFF9

\

»

»

»

VECTORS

;» NMI
vector
1• RESET vector
;» IRQ
vector

*

S7FFA / $7FFB
$7FFC / $7FFD
$7FFE / $7FFF

;AAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU
; aAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA c
,>

PORTS

1

SPC120A has s 17 I/O pins
;'
PORT_A 4 I/O pins
0-3
.» PORT.B 4 I/O pins
0,1,2.4,5
,'
PORT_C 41/0 pins
0-3 input only
S>
PORT_D 8 I/O pins
0-7

;'

i *
. »

RAM

;• SPC120A has
; »

from $80

-

:

!

128 bytes of RAM

$FF

’
, >
t

;» SPC120A has

ROM
:

A-4

j> BANKO user RO
}» BAIIK1 user RC
;» BANK2 user RC
;>
BANK3 user RC

$0600 - $7FFA$8000 - SFFFF
$10000 - $17FFF
S1A000 - S1FFFF

*
*
’

VECTORS

*

•

I

:

NMI
vector
$7FFA / $7FFB
*
I> RESET vector
$7FFC / $7FFD
i» IRQ
vector
$7FFE / $7FFF
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU

A
;

unuseable areas in rom

(SPC40A:
;
;

8000H AX

DFFFH should be skiped

bank 0 = 600 - 7FFA
bank 1 ■ 8000 - DFFF reserved ,

;SPC80A:
;

start 0 E000 - FFFA

10000H AA 13FFFH should be skiped

bank 0 = 600 - 7FFA
bank 1 ■ 8000 - FFFA
bank 2 = 10000-13FFF reserved ,

i

;

;SPC120A:

;SPC120A:

(Dumny area)

(Dummy area)

start at 14000 -

17FFF

18000H AA 19FFFH should be skiped

I

bank 0 = 600 - 7FFA

;
;
;

bank 1 = 8000 - FFFA
bank 2 = 10000 - 17FFF
bank 3 = 18000 - 19FFF reserved ,

;SPC256A:

;SPC256A: Non dummy area

;SPC512A:

;SPC512A:

start at 1A000 -

(Dummy area)

1FFFA

Non dumny area

...
.CODE
.SYNTAX
6502
.LINKLIST
.SYMBOLS

;AAAAAAAAAAAAAAAAAAA PORT DIRECTION CONTROL REGISTER
AAAAAAAAAAAAAAAAA; AAAAAA
Ports_dir
EQU
00

;

(write only)

;
;

(4 I/O pins) controlled with each bit of this register
you can't control each pin separately, only as a nibble

;

0

« input /

1 « output

; 7

6

5

4

3

2

1

0

(REGISTER

*ZlS)

D

C

C

B

B

A

A

(PORT)

• 7654
3210
7654
3210
7654
3210
7654
3210
(PORT BITS)
jXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAJXAAAAAAAAAAAAAAAAAAAAAAAAA

AAAAA
•

AAAAAAAAAAAAAAAAAA PORT CONFIGURATION CONTROL REGISTER

AAAAA.’XAAAAAAAAAAA

A-5

baaed on if the port pin ia input or output
I
Ports_con

EQU

) (4 I/O pina)
6
j 7
BITS)

01

;

(write only!

controlled with each bit of
5
4
3
2

D
3210

C
7654

C
3210

;
;

D
7654

;
;

port_a INPUTS can be either:
0 = float
1 ” pulled high

B
7654

B
3210

this

register
0

1
A
7654

A
3210

(REGISTER
(PORT)
(PORT BITS)

; port_a OUTPUTS can be either:
; 0 * buffer
1 * upper (4) bits Open drain Pmos (source)
;
lower (4) bits Open drain Nmos (sink)
I
;

port_b INPUTS can be either:
0 * float
1 = pulled low

;
;
;

port_b OUTPUTS can be either:
0 = buffer
1 = upper (4) bits Open drain Nmos (sink)
lower (4) bits Open drain Nmos (sink)

i
;
;
;
;
;

port_c INPUTS can be either:
0 * float
1 = pulled high
port_c OUTPUTS can be either:
0 = butfer
1 = upper (4) bits Open drain Pmos (source)
lower (4) bits Open drain Nmos (sink)

;

; port_d INPUTS can be eitfsr:
; 0 = float
1 = pulled !ow
; port_d OUTPUTS can be either:
; 0 = buffer
1 * Open urain Pmos

(source)

; AAAAAAAAAAAAAAAAAAAAAA>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
:AAAAAAAAAAAAAAAAAAAAAAAAAAA I/O PORTS
AAAAAAAAAAAXAAAAAAAXAAAAAAXXXaAAXXAXA
EQU

Port_A
CPU's
Data_D0

02H

Data_Dl
Data_D2
Data_D3

EQU
EQU
EQU
EQU

01H
02H
04H
OBH

Port_B
TT.init
TI_CTS
IR_IN
TI_RTS

EQU
EQU
EQU
10H
EQU

03H
1!!
02H

Pc t_C
Motor_cal
Pos_sen
Touch_bck
Toucii_frnt

EQU

EQU
01H
EQU
EQU
04H
EQU
08H

EQU

1

(read/write)

for TI & speech recgn

;bit 0 data nible port
;
;
i

;b0/bl * I/O
b4/b5 « inp only
;B0 - TI reset control
;B1 - hand shake to TI
. B4 - I.R. Rec” data
;B5 - TI wants data
20H
1
'read/w-ite)
04H
crosses switch
; CO - lo when mo;
;Cl - motoi
ical sensor (intt Cl)
02H
;C2 - back touch
;C3 - front touch

Port_E
EQU
Ball_side
EQU
01H
Ball_invert EQU
02H
Light_in
EQU
04H
EQU
Mic_in
Power_on
EQU
10H
Motor_led
EQU
20H
Motor_lt
EQU
40H
EQU
80H
Motor_rt

05H
; DO
;D1
;D2
08K
;D4
;D5

j

(read/write)

- hi when on any aide (TILT)
- hi when inverted
- hi when bright light hits sensor
;D3 - hi pulse microphone input
- power to rest of circuit
- motor I.R. led driver
;D6 - motor drive left (forward)
;D7 - motor drive right (reverse)

,• AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'' AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
;AAAAAAAAAAAAAAAAAAAAAAAA DATA LATCH
PORT_D
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Latch_D
EQU
06H
; (read)
I
read to latch data from port_d, used for wake-up on pin change
jAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1
AAAAA
;AAAAAAAAAAAAAAAAAAAAAAAA* BANK SELECTION REGISTER
AAAAAAAAAAAAAAAAAAAAAAAAAA
Bank
EQU
07H
; (read/write)
xxxxxxxb
;
0 = bank 0, 1 = bank 1
;
76543210
; only two banks in SPC40a
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAA WAKE UP
AAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWake_up
EQU
08H
; (read/write)
.
•
;

xxxxxxxw
7 6 5 4 3 2 1-.0

w=(0—disable, l=enable wake-up on port_d change)
read to see if wake-up, or normal reset

; this is the only source for a wake-up
; Always reset stack on wake up.
jAAAAAAAAAAAAAA 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
;AAAAAAAAAAAA/
AAAAAAAAAAAAAA SLEEP
AAAAAAAAAAAAAAA
AAAAAAAAAA
aaAAAAAAAA
Sleep
tw
09H
i
(write)
,
,
s“(0»don‘t care, l=s.
j writting 1 ti bitO, 1
; AAAAAAAAAAAAAA* 'AAA AA,
I

xxxxxxxs
7 6 5 4 3 2 1 0

js sleep
AAAAAAAAAAAAAAAAAAAAAAAAAA/AAAAAAAAAAAAAAAAAAA

AAAAA
,AAAAAAAAAAAAAAAAAAAAAAAA TIMER A CONTROL REGISTER
AAAAAAAAAAAAAAAAAAAAAAAAAA
; this needs more work to understand DMH
TMA_CQN
EQU
OBH
;
(write)
I

1

7 6 5 4 3 2 1 0
m x x x

I
;

m= Timer one mode

(0=Timer.l=Counter)

;

Bic3: XE1
Bit2: T1
Bitl: IEO
BitO: TO

*
•
I

Ai IE1= 0:
A"
* 1,
A'
AO IEO* 0:
= 1,

;
I

Counter clock*
Tl= 0: counter
Tl= 1: counter
Counter clock*
TO* 0: counter
TO* 1: counter

external clock from IOC2
clock* CPUCLK/8192
clock* CPUCLK/6553i,
external clock from IOC2
clock* CPUCLK/4
clock* CPUCLK/64

; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
;AAAAAAAAAAAAAAAAAAAAAAAAAAAA INTERRUPTS
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Interrupts
EQU
ODH
; (read/write)
I
76543210
wmab321e

I
I

;

w
m
a
b
3

i

:

*
=
=
=
=

(0=watch dog ON, power-on default) (l=watch dog OFF)
(0=Timer A generates NMI INT, l=Timer A generates IRQ INT)
(0=Timer A interrupt off, l*Timer A interrupt on)
(0=Timer B interrupt off, l=Timer B interrupt on)
(0=CFU CLK/1024 interrupt off,
1*CPU CUC/1024 interrupt

on)
2 *

I0*CPU CLK/8192 interrupt off,

1=CPU CLK/8192 interrupt

1 *

<0*CPU CLK/65536 interrupt off,

1*CPU CLK/65536' interrupt

e *

(0=external interrupt off, l*external interrupt on)
rising edge, from port_c bitl

on)
on)
;
;

;AAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
; AAAAAAAAAAAAAAAAAAAAAXAAAAAAA TIMERS
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
; There are two 12bits timers.
; Timer A can be either a timer or a counter,
I
Timpr B can only be used as a timer.
(

(as set by TIKEK_CON)

*'

Tillers count-up and on overflow from 0FFF to 0000, this carry bit will
create an interrupt if the corresponding bit is set in INTERRUPTS
register.
i

; The timer will ->e auto reloaded with the user setup value,
start,.,
!
count-up again.

and

; Counter will reset by user loading *00 into register TMA_LSB and
TOA_MSB.
; Counter registers can be read on-i »-fly, this will r.j: affect
register,,,
: values, or ieset them.
JaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA. iAAAAAAAAAA
AAAAA

;AAAAAAAAAAAAAAAAAAAAAAAA TIMLR A (low byte
iAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/AA
TMA_LSB
EQU
10H
(read/write)
; all 8bits valid (lower Sbits of 12kit timer)

jAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
;AAAAAAAAAAAAAAAAAAAAAAAAA TIMER A
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

TMA_MSB
; read
;

EQU

rite

;
;
;

11H

(high byte)

X

X

X

X

7

6

5

4

(read/write)
8
ii 10 9
timer upper 4bits
2
0
3
1

x
7

X

t
5

c
4

11 10 9
3
2
1

6

8
0

timer upper 4bits
register bit

t=(0 speech mode. l«Tone mode)
this connects the AUDA pin to either
the DAC . or Timer generated square wave

!

c»(0*CPU clock.
1=CPU clock/4;
;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa*aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
AAAAA
I

jAAAAAAAAAAAAAAAAAAAAAAAA TIMER B (low byte
) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
TMB_LSB
EQU
12H
1

; all 8bits valid (lower 8fcits of 12bit timer)
; AAAAAAAAAAAAAAAAAA.' AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
;AAAAAAAAAAAAAAAAAAAAAAA.'
TIMER B (high byte)
AAAAAAAAAAAAAAAAAAAAAA; -_.AAAA
TM8_MSB
EQU
13H
; read
x x x x 11 10 9
8
timer upper 4bits
;
76543210
I

; write
J
l

x x t
c 11 10 9
8
76543210

timer upper 4bits
register bit

t=(0*speech mode, l=Tone mode)
this connects the AUDB pin to either
the DAC2, or Timer generated square wave

}

c=(0=CPU clock.
1=CPU clock/4.
.•AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,'

I

'AAA

AAAAA
;AAAAAAAAAAAAAAAAAAAAAAAAAA
D/A converters
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
DAC1
EQU
14H
i (write)
DAC2
EQU
15H
; (write)
.-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA
.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
AAAAA
i this needs more work to understand DMH

;

16H

DAC_ctrl

ADCoutputPortl6H:
EQU

16H

i

A-9

;
;

Bit7:
Bit6:
Bit5:
Bit4;

I/O 0:
I/O
I/O
I/O

J
}
»
;

Bit3:
Bit2:
Bitl:
BitO:

I/O
I/O
I/O
I/O

-•

Disable ADC;

1:

Enable ADC

;AAAAXAAAAAAAAAAAAAAAAAAAAAAAAA>\AAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
;OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAXAW SAA MJAi
;

» Operating equate definition

; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAu
;EQdef
;
I

;
;

to calculate samp/
CPU clk/sample rat..
Hi & Lo timer reg con
FFF - divisor = valu>

;ex:

6mHZ elk =

or
» FFF
oa ’ hi t

lo reg.

166nSEC
Tracker

;/* here is son.

definition chnge of time interrupt constant

;SystemClock:
same

EQU

SystemClock:
use that

EQU

6000000

3575545

’/Tracker

;Select 6000000Hz it will be the
;as before
,-Select 3579545Hz while we ate
;crystal

TimeA_low:
definition
TimeA_hi:

EQU

<(4096-(SystemClock/5859))

EQU

>(4096-(SystemClock/5859))

TimeB_low:
TimeB hi:

EQU
EQU

<(4096-(SystemClock/1465))
>(4096-(SystemClock/1465))

Port_def

EQU

;put constant

A7h

;D hi=out.D lo«ii., / C hi=out,C lo=inp
;B hi=inp,B logout / A hi=out,A lo=out

EQU

$
•

50H
;D hi=out buffer, D lo=in pull
;C hi=out buffer. C lo=in p ;1 hi
;B hi=in
hi-Z
, B lo-out buffer

1

;A hi=out buffer.

Con_def
•
t

lo

A logout buffer

f
Intt_d£lt

EQU

DOh

.-sets interrupt reg = no :atchdog, irq
; timer B , and EXt port C bit 1 = off

;*•**• run EQU's
;

.*****

A-10

; Send a braking pulse to stop motor drift,
number

and this EQU is a decimal

• that determines how many times through the 2.9 mSec loop
loops)

(how many

; the brake pulse is on. If attempting to make single count jumps, the
; brake pulse needs to be between 26 and 30. For any jump greater than
10
(
l

braking between 22 and 80 is acceptable. ( Long jumps are rot critical
but short jump will begin to oscillate if braking is too great.)

;

60 long fc 20 short work at 3.6v and no pulse width

Dnft_long
EQU
Drift_sho-t EQU

60
25

.-number times
j

thru intt before clearing pulse

i set this with a number from 0 - 255 to determine timeout of all
sensors
;

for the sequential

increments.

; goes back to the start,
table.
;

NOTE:

If it times out the table pointer

else each trigger increments through the

this time includes the mctor/speech execution time

Global_time EQU

16

;

1= 742 mSEC ;;

255 =1'

!!!

.3 seconds

;
;
;

This determines how long Firby waits with no sensor activity, then
calls the Bored_table for a random speech selection.
Ue
a number between 1 U 255. Should probably not be less than 10.

;

SHOULD BE > 10 SEC TO ALLOW TIME FOR TRAINING OF SENSORS

Bored_ eld

EQU

40

;

1= 742 mSEC

255 =

189.3 seconds

.......... .........

1

Each sensor has a sequential random sp.

;
;

Each sensor has a different assignment.
The tables are formatted with the first X assignment;,
and the remaining as sequential.

l

Soq_front
Ran_front

EQU
EQU

8
8

Seq_back
Ran_back

EQU
EQU

9
7

Soq_tilt
Rar_r.ilt

EQU
EQU

10
6

Seq_invert
Ran_invert

EQU
EQU

8
8

Seq_sound
Ran_sound

EQU
EQU

0
16

. which must equal

16.

random

All

Seq_light
Ran_light

EQU
EQU

0
16

Seq_feed
Ran_feed

EQU
EQU

8
8

Seq_wake
Ran_wake

EQU
EQU

0
16

Seq_bored

EQU
EQU

7

Ran_bored
Seq_hungcr
Ran_hunger

EQU
EQU

5

Seq_sick
Ran_sick

EQU
EQU

4

;

rev

9

11

12

furbllja

; Each sensor also determines how often it is random or sequential
; as in 50/50
or 60/40
etc.
; These entries are subtracted from the random nur.ber generated
; and determine the split, (the larger here, the mere likely sequential
pick I
Tilt_split
EQU
Invert_split
Front_split EQU
EQU
Back_split
Feed_split
EQU
Sound_split EQU
Light_split EQU
Bored_split EQU
Hunger_split
Sick_split
EQU
(*.

Random_age

8 Oh
EQU
8 Oh
80h
8 Oh
80h
80h
80h
EQU
80h

80h

80h

.

.

EQU

30h

;at any age, below this number when a
random number is picked will cause him
to pull from the age 1 table. More Furbish.

Leam_chg
EQU
!-----------

31

.-amount to inc or dec training of words

Food
Noed_food
Sick_reff
Really_sick
Max_sick

EQU
EQU
EQU
EQU
EQU

20h
80h
60h
COh

.-amount to increase

eoh

;below this starts complaining about hunger
;below this starts complaining about sickness
,-below this only complains about sickness
;cant go below this when really sick

Hungry_dec
Sick_dec

EQU
EQU

01
01

;subtract X amount for each sensor trigger
;subtract X amount for each sensor trigger

EQU

FEH

jturn speech word active off

EQU

FBH

,-bit 2 off - lart word sent to TI

;

Nt_word
Nt_last

'Hungry'

for each feeding

A-12

H

a

1

Nt_term
EQU

EQU
FCH
EQU

F7h
,-bit 3 off -terminator to
.-clears spch_activ & word_activ
FDH
makes TI_CTS go lo

Motor_rev
EQU
Motor_inactv
Motor_ntseek

FDH
EQU
EQU

Motor_o£f
Motor_revs
Motor_£wds

COh
7FH
BFh
DFh
F7h
EQU
EQU

.-clears motor fwd bit
FEh
,-kill motor activ bit
FBh
,-kill motor seek bit
turns both motor lines off (hi)
,-bit 7 lo
.-bit 6 lo
{dears motor pulse on req
.-clear IRQ stat
;mo\.or opto led off
DFh
100
,-X • 2.9 millSec for shut off

Nt_Init_rootor
NT_Init_Mspeed

EQU
EQU

FBh
F7h

Opto_spd_reld
Speed_ref f
EQU

EQU
30

80
.-number of IRQ to count opto pulse speed
value to adjust speed to

Nt_macro_actv

EQU

7Fh

Not_bside
EQU
Not_binvrt
EQU
Not_tch_bk
EQU
Not_tch_£t
EQU
Not_£eed
EQU
Sound_reload
Snd_cyc1e_r1ed

F7h
EFh
BFh
DFh
FDh
EQU
EQU

{dear ball side done flag
{dear ball invert done flag
.clear touch back sense done flag
.-clear touch back sense done flag
.-clear feed sense done flag
05
{X * 742 milisec time between trigger
02
.-sound sense referrence cycle timer

Light_reload

EQU

07

EQU

FEh

; dr IR slot low detected

Nt_lt_re£f
EQU
Nt_lght_stat

EFh
EQU

.-turns reff off
FEh.
.-clears light bright status to dim status

Clr_spch
CTS_lo

EQU
EQU
EQU
EQU

Ntmot on
Nt _IRQcui
EQU
Nt_Motor_led
Motor_led_.rst

Nt_Slot_dn

;;;

time

,-cks motor speed only on wake up
.-clears 2nd part of motor speed test

,-clears request

{X • 742 milisec until new reff

level set

Bright & Dim equates have been moved to the light include file.

;;;Bright
;;;Dim

EQU

05
EQU

,-light sensor trigger > reff level
05
{Light sensor trigger < reff

{Qik_sna_reload

EQU

01

jNt_srd_re£f
Nt_do_snd
EQU

EQU
FEh

DFh
,-kill sound reff level bit
{clears sound state change req

Nt_snd_stat ECU

FBh

{dears Sound_stat

Nt_fortune

EQU

FEh

{kills fortune teller mode

Nt_Rap
Nt_hideseek EQU
Nt_simon
EQU

EQU
FBh
»7h

FDh
{kills R-p mode
{kills Hide k seek game mode
{kills simon say game mode

F7h
EFh
DFh
BFh
EQU
EQU

{dears sensor change req
{dears sensor change req
{dears sensor change req
{dears sensor change req
7Fh
;clears sensor change req
FDh
{dears sensor change req

level

;j

-

l
Nt_do_tumny EQU
Nt_do_back
EQU
Nt_do_feed
EQU
Nt_do_tilt
EQU
Nt_do_invert
Nt_do_lt_brt

A-13

Nt_do_lt_dim

EQU

FBh

:clears sensor change req

Nt_temp_gaml
Nt_half_age EQU
Nt_randm
EQU

EQU
BFh
7Fh

FEh
.-clears game m'-de bits
;clears req for 2 tal.e instead of 4
1 clears randam/seque tial status

GameT_reload

EQU

24

;

1= 742 mSEC ;j

255 = 189.3 -econds

;OAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAV-AXXAAAAAAAAAAA i
;1 Variable definition

(Ram « $£0 to $FF)

; UAA A AAAAAAAAAXAAAXAMXAAAAAAAXAAA' AUUUUUUUUUUAAAO
;Rdef
......

DO

NOT

CHANGE RAM ASSIGNMENTS

...............

(X pointer used as offsett)

Tj,e next group of RAM locations can be used by any

;

sensor routine but cannot be used to save data.
TEMP ONL\ 1
;
• • • koball
i
TEMPO
80h
equ
equ
61h
TEMPI
equ
TEMP2
82h
equ
TEMP 3
83h
TEMI-4
equ
84h
IN_DAT
equ
85h
■ » • end koba11
;•••***•***
• * END TEMP RAM
EQU
Task_ptr
Port_A_image
Port_B_ Image
Port_D_ Image
Word_lo
Word_hi
Saysent_lo
Saysent_hi
Bank_ptr
Which_word
Srj : oup
Dc_data

EQU
EQU
EQU
EQU

66h
EQU
EQU
EQU

,-what function is in process
87h
88H
;output port image
89H

;output port image

E'U
EQU

8Ah

;speech word lo adrs

8CH
8DH
8 EH
8FH
EQU
EQU

SBh
; "
hi •
;saysent word pointer
;which bank words are in
;which word or saysent to call
90H
.-which saysent group table
91H

;

;
Which_motor EQU
Mgroup
Motor_lo
Motptr_lo
Motptr_hi
Which_delay
Intt_Temp
Drift_fwd
Drift_rev
Pot_timeL

EQU
EQU
EQU
EQU
EQU
EQU
EQU
EQU

92h
EQU
94H
95h
96H
97H
98H
99h
9Ah

.-holds table number of motor positon
93H
;which motor group table

9Bh

.-motor uses to compare against current positon

•
1

;table pointer to get motor position
«•
,-how much time between motor calls
s
l

.-time motor reverses

to stop drift

9
i

; moved to hi ram that is not cleared on power up

jPot_timeL2
Moff_len
EQU
Mon_len
Motor_pulsel
Slot_vote
EQU

9Ch
EQU
EQU
9Fh

.-holds motor po*er
9Dh
.-hold?- motor
9Eh
;motor pulse
;need majority cnt

off pulse time
power jn pulse time
timer
to declare a valid slot

A-14

EQU
EQU
EQU
EQU
A4h
EQU

AOh

EQU
Mili_sec
Cycle_timer EQU
Sensor_timer
Bored_timer EQU

A6h
A7h
EQU
A9h

;used in calc pot position by timer
;bypasses intt port c updates to motor
A8h
;times between sensor trigger
;time with no activity to random speech

Invrt_count EQU
Tilt_count
EQU
Tchfrnt_count
Tchbck_count
EQU
Feed_count

AAh
ABh
EQU
EQU
AEh

;which speech/motor call is next
.•which speech/motor call is next
ACh
.-which speech/motor call is next
ADh
;which speech/motor call is next
.-which speech/motor call is next

Last IR
Wait_tiroe

EQU

EQU
BOh

AFh
.-last XR sample data to compare to next
,-used in IRQ to create 2.8avSec timers

Light_timer EQU
EQU
Lght_count
EQU
Light_re£f

Blh
B2h
B3h

;Light sense, routines
.-which speech/motor call is next
;holds previou. sample

Sound_timer EQU
Sound_count EQU

B4h
B5h

.-time to set new reff level
.-which speech/motor call is next

Milisec_£lag

EQU
E7h
B8h
EQU

B6h

. iotor_led_t imer
Mot_speed_cnt
Mot_opto_cnt
Ca1_switcfc_cnt
motorstoped equ
Drift_counter

Macro_Lo
Macro_Hi
Egg_cnt

FOU
EQU

i•

HCEL_LO

•••
EQU
EQU
ECU

HCEL_HI
BIT_CT

;how long after action done led on for IR

Alh
;motor speed test
A2h
; ’
A3h
,-used to eliminate noisy reads
;times wheel count when stopping
A5h
decides how much braking pulse to apply

;set every 742 miliseconds

,-table pointer
B9h

,-easter egg table count pointer

Koball code rev B
BAh
BBh
BCh
end koball

I•••*••*•••■

EQU

BDh

;(

Pr«v_random EQU
Bored_count EQU
EQU
TEMP 5

BEh
BFh
COh

;prevents random number twice in a row
.-sequential selection for bored table
;general use also used for wake up

EQU

Clh
EQU
C3h

.-use in sensor training routines
C2h
.-use in sensor training routines
,-use in sensor training routines

EQU
EQU

C4h

;holds last call

C5h

;

Coh
C7h

;sequential counter for sick speech table
;sequential counter for hunger speech table

big!

_shift

Temp_ID2
Temp_ID
Leam_temp

EQU

Req_macro_lo
Req_macro_hi
Sickr_count
Hungr_count

EQU
EQU

was TMA_INT )

used for threshold change

to see if sleep or IR req

Motor_pulse2

EQU

C8h

,-motor pulse timer

DO NOT CHANGE BIT ORDER

Stat_0
Want_naine
EQU
Lt_prev_dn
EQU
Init_motor
EQU
Init_Mspeed EQU
Train_Bk_prev
Sav_new_name
REQ_dark_sleep
Dark_sleep_prev
gotosleep
I
Stat_l
Word_activ
Say_activ
Word_end
Word_term
Up_light
Snd_ref£
Half_age
Randm_sel
Stat_2
Motor_actv
Motor_fwd
Motor_seek
Bside_dn
Binvrt_dn
Tchf t_dn
Tchbk_dn
Macro_actv
Stat_3
Lght_stat
Feed_dn
Sound_stat
IRQ_dn
Lt_reff
Motor_on
M_forward
M_reverse

EQU
EQU
EQU
EQU
EQU
EQU
EQU
EQU

Equ
01H
02H
04H
C8H
EQU
EQU
EQU
EQU

C9h
;bit
;bit
;bit
;bit
10H
20H
40H
80H

EQU
01H
02H
04H

CAH
; bit
.-bit
,-bit
,-bit
,-bit
,-bit
,-bit
; 1 it

08H
10H
20H
40H
80H
EQU

EQU
EQU
EQU
EQU
EQU
EQU
EQU
EQU

EQU
EQU

EQU
EQU
EQU

0
0
1
3

;System status
*set forces system to say Furey's name
» done flag for quick light changes
* on wnkeup do motor speed/batt test
■ 2nd part of motor speed test
;bit 4 » set when 2 back sw hit in a row
.bit 5 = only happens on cold boot
,-bit 6 = set -dark level sends to sleep
,-bit 7 = if set on wake up thendont

;system status
0 = set during any speech
1

2
3
4
5
6
7

= when saysent is in process
= set when sending FF word end to TI
= set to send 3 iffh to end speech
=set when shift is incrmntg
= set for new referrenc cycle
= set for 2 tables of age instead of 4.
=decides random/sequential for tables

01H
02H
04H
3H
10H
20H
40H
80H

CBH
,-bit
.-bit
;bit
,-bit
; bit
,-bit
,-bit
,-bit

EQU
01H
EQU
04H
EQU
EQU
20H
40H
80H

CCh
,-system status
,-bit 0 * set=bright clr = dim
02H
,-bit 1 = set- prev done
jbit 2 ■
08H
,-bit 3 = set when IRQ occurs by IRQ
10H
,-bit 4 =set for light sense reff cycle
;bit 5 = set=motor pulse power on
,-bit 6 * lr ■ move motor forward
;bit

0
1
2
3
4
5
6
7

;system status more
= set = motor in motion
= set=fwd clr=rev
= seeking to next position
= set = previously flaged
= set- prev done
*
*
•
=set when macro in process

r*......
j

Following bit maps are reserved for easter egg / games

Stat_4
Do_snd
Do_lght_brt EQU
Do_lght_dim EQU
Do_tummy
EQU
Do_back

EQU
EQU
02H
04H
08H
EQU

CDh
;system task request state
01H
;bit 0 * set when sound > prev reff level
,-bit 1 « set when light > prev reff level
,-bit 2 » set when light < prev reff level
;bit 3 = set when front touch triggered
10H
,-bit 4 * «et when back touch triggered

A-16

Do.feed

EQU
EQU
80H

20H
;bit 5 = set when feed sensor triggered
40H
;bit 6 = set when tilt sensor triggered
bit 7 = set when inverted sensor triggered

Equ
01H
02H
04H
OSH
10H
20H
4CH
BOH

CEh
bit
bit
bit
oit
bit
bit
bit
bit

.-game status
0 sused in game play
0 « •
■
*
•

;
Game_l
Fortune, .mode

EQU
EQU

CFh

EQU
Rap_mode
Hideseek jnode

02H
EQU

01H
;bit
04H

;system game status
;bit 0 »set = furby in fortune teller mode
0 »set » furby in RAP SONG mode
;bit 1 = set o furby in hide U seek game

EQU

OSH

Do_tilt
Do_invert

EQU

Stat_5
temp_gaml
t emp_gam2
terop_gam3
temp_gam4
temp gam5
temp_gam6

EQU
EQU
EQU
EQU
EQU

temp_gam7
temp_gam8

EQU
EQU
EQU

mode
Simonsay_mode
mode
Burp_mode
EQU
Naae_mode
EQU
Twinkle_mode
Roos ter_mode

bit

1 -

3 4 »
5 »
6 «

7 »

;bit 3 = set =

furby in simon says game

4 =sel « mode

20H
EQU
EQU

bit
40H
80H

,-easter egg disqualified when clear

Qualifyl:
DQ_fortune

EQU
EQU

DQ_rap
DQ_hide
DO simon

DOh
Olh
EQU
EQU

EQU

DQ_burp
DO name
DO twinkle

08h
EQU

EQU

DQ_rooster

EQU

EQU
40h
80h

5 =
;bit 6 =
;bit 7 =

;bit C = fortune teller
;bit 1 = rap song
02h
;bit 2 = hide and seek
04h
bit 3 = simon says
;bit 4 = burp attack
lOh
;bit 5 = says his name
2 Oh
;bit 6 = sings song
bit 7 = rooster Icves you

1
THIS GROUP OF RAM IS SAVED IN EEPROM

s Need to read these from EEPROM and do test

for false data

;

"age" uses bit 7 to extend the "age_counter*

;

is saved in EERPOm also.

to 9 bits,

and this

j-AGE' MUST BE IN Dlh BECAUSE EEPROM READ & WRITE USE THE EQU FOR START
RAM.
Age
EQU
Age_counter EQU

Dlh
D2h

; Age - 0-3 (4 total)
; inc on motor action,rolls over U inc

Name
EQU
Rvoice
Pot_timeL2
EQU
Hungry_counter
Sick_counte:r

D3h

;holds 1-6 pointer to firby’s name
D4h
;which'one of three voices
.■counter from wheel I.R. sensor
;holds hungry/full counter
D6h
.■healthy/sick counter
D7h
D8h
,-only seed 1 6 seed 2 are saved
D9h
> ’

Saed_l
Soed_2
;

EQU
D5h
EQU
EQU
EQU
EQU

These are used for training each sensor.

There is a word number which

;
;

i« 1-16 for the sesnor table macro list and a ram for count which
determines how often to call the learned word.

;

*** DO NOT CHANGE ORDER- RAM adrs by Xreg offset

Tilt_leamed
Tilt_lm_cnt

EQU
EQU

DAh
DBh

;which word trained
;count determines how often called

1
2

Feed_learned
Feed_lm_cnt

EQU
EQU

DCh
DDh

;which word trained
;count determines how often called

3

Light_learned
Light_lrn_cnt

EQU
EQU

DEh
DFh

;which word trained
now often called
1 count determine

5
6

Dark_learned
Dark_lm_cnt

EQU
EQU

EOh
Elh

.-which word trained
;count determines how often called

7
8

Front_learned
Front_lm_cnt

EQU
EQU

E2h
E3h

;which word trained
;count determines how often called

9
10

Sound_learned
Sound_lrn_cnt

EQU
EQU

E4h
E5h

;which word trained
;count determines how often called

11
12

Wake_learned
Wake_lrn_cnt

EQU
EQU

Efh
E7h

;which word trained
;count determines how often called

13
14

Invert_learned
Invert_l rn_cnt

EQU
EQU

E8h
E9h

which word trained
;count determines how often called

15
16

;
;

4

next is equates defining which ram to use for each sensor
according to the sensor ram defined above, (compare to numbers above)

Tilt_ID
definitions
Feed_ID
Light_ID
EQU
Dark_XD
Front_ID
Sound_ID
Wake_ID
Invert_ID
Back_XD

EQU
EQU
EQU

EQU

00

;defines what offset for above._ram

EQU
04
EQU
08

02
; ■

•

■

06

l

*

10
EQU

; ■
12

1

’

14
EQU

i ■
EEh

;special

•

value triggers

learn mode

...
•

;
j

For power on test, WE only clear ram to E9h and use EAh for a
messenger to the warm boot routine. We always clear ram and initialize

i

registers on power up, bat if it is a warm boot then read EEPROM
and setup ram locations. Location EAH is set or cleared during power

;

up
; and then the stack can use it during normal

Warm_cold
Spcl_seedl
Spcl_seed2
Deep_sleep

EQU
EQU
EQU
EQU

....... .... Need

EDh
EEh
EFh
FOh

run.

j
;0=no deep sleep llh is.

to allow stack growth down

(tilt wont wakeup)

1 EAh- FFH

)

*•••••*•*

A-18

Stacktop

I

EQU

FFH

; Stack Top

.....

• • #•

.••••••••••••••••••••••••••••••••••••■••••••••••••••••••■I

**•*

....

».*.

ORG
BLKW

00H
300H, 00H

.-Fill 0000 AAA 05FFH*

00

;OAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi
;*
;»

PROGRAM

STARTS

HERE

; *

’
>
’

jAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU

ORG

0600H

RESET:

Wake2.asm

Include

;asm file

end Tracker

;
;
;
;

For power
messenger
registers
and setup

on test, WE only clear ram to E9h and use EAh for a
to the warm boot routine. We always clear ram and initialize
on power up, but if it is a warm boot then read E 'PROM
ram locations. Location EAH is set or cleared duri. j power

up
; and then the stack can use it during normal

j

run.

Clear RAM to OOH

LDA
LDX
RAMClear:
STA
DEX
CPX
BNE

«00H
• E9H

00,X
• 7FH
RAMClear

;

1
data for fill
start at ram location

;

base 00,

offset x

; next ram location
; check for end
; branch, not finished
1

fill done

A-19

Main:
InitIO:
LDA
STA

• 01
DAC_ctrl
*Port_def

;turn DAC on
;DAC control

LDA
STA

Ports_dir

.-set direction control
;1oad reg

LDA
STA

»Con_def
Ports_con

.-set configuration
;load reg

LDA
STA

• 00

LDA
STA

Bank
•00H
Wake_up

;set for bank 0
.-set it
.-disable wakeup control
;

LDA
STA

*00h
Sleep

.-disable sleep control
.-set dor.t care

LDA
STA

*Intt_dfIt
Interrupts

;Initialize tleers
;lead reg

;set timer mode
LDA
•00H
STA
TKA_CON
; set reg
#Tizr.eA_lov.‘
LDA
,-get preset timer for interrupts
TMA_LS5
STA
; load
LDA
STA

*TimeA_hi
TMA_KSB

;get hi byte for preset
.-load it

LDA
STA
LDA
STA

•TimeB_low
TMB_LSB
•TimeB_hi
TKB_MSB

.-get preset timer for interrupts
.-load
.-get hi byte for preset
,-load it

LDA
STA

•COh
Stat_3

;preset status

LDA
STA

• 00H

; init ports
;output

LDA
STA
STA

• 33H
; init ports
Port_B_Image
;ram image
Port_B
;output

LDA
STA

• 01H
Port _C

LDA
STA
STA

•DOH
.- init ports
Port_D_Image
,- ram image
Port_D
;output

LDA

•FFh
Mili_sec

STA
CLI

Port_A

for motors off

; init ports
;output

.-milisec timer reload value
,-also preset IRC timer
;Enable IRQ

A-20

.
;

JSR

Kick_IRQ

;wait

for interrupt

JSR

TI_reset

;go init TI

(uses

to restart
’Cycle..timer•)

Preset motor speed, assuming mid ba?te*V life, we set the pulse width
so that the motor wont be running at 6 volts and bum out. We then

• predict what the pulse width should be for any voltage.
•Mpulse_on

LDA
LDA
STA

• 11
Mon_len

LDA
STA

• 05
Mof f_len

;preset motor speed
;set motor on pulse timing

;set motor off pulse timing

itlltttttlttttttttttttttltttttttlttl.
:«ttiSi««SiSii«®iii5iSiii5«i imutttmtmtilittMttt
!
Include

Diag7.asm

;asm file

****** Only called by diagnostic speech routines
Be sure to set

'MACRG_HI'

Diag_macro:
Macro_Lc
STA
»0b8h
LDA
diag call
CLC
Macro_Lo
ADC
Macro_Lo
STA
LDA
STA
-JSR
JSR
RTS

.

101
Macro_Hi
Get_macro
Notrdy

and all calls are in that 128 byte block.

.save lo byte of Macro table entry
;<90h
, ex offset to adrs-.400 added

.-add in offset
.•update
,• get hi byte aars 400 = 190h
.-save hi b te of Macro table entry
;go start motor/speech
;Do / get
status for speech and motor
;yo

!

Enter with Areg holding how many 30 mili second delay cycles

Half_delayi
STA
Half d2:
LDA
STA
Half_d3:
LDA
BNE
DEC
BNE
RTS

TEMPI

;save timer

• 10
Cycle_timer

.set 1/2 sec
;set it

Cycle_timer

;ck if done
1 loop

Half_d3
TEMPI
Half_d2

J
; loop
;

done

Test_byp:

;We assume diagnostic only runs on coldboot

...
LDA
STA

*FFh
Temp_ID

{initialize word training variable
j

LDA

»FFh

j

STA
STA

Hungry_counter
Sick_counter

;preset

furby's health

.•••••••■■a......

;
;

We sit here and wait for tilt to go away, and just keep incrementing
counter un-il it does. This becomes the new random generator seed.

Init_md:
INC
LDA
AND
BNE
LDA
STA
STA

;

;random counter
;get switches
;check tilt 4 invert sw
{loop til gone
;get new seed
;stuff it
,-also load for cold boot

Use feed sw to generate a better random number

JSF.
LDA
AND
BNE
JMP
Feed_md:
INC
LDA
AND
STA
JSR
LDA
AND
BNE
LDA
STA
STA

1;
j

TEMPI
Port_D
• 03
Init_md
TEMPI
Spcl_seedl
Seed_l

Get_feed
;go test sensor
Stat_4
;get system
•Do_£eed
;ck sw
Feed_md 1
;if feed sw then cold boot
End coldinit
.-else do warm boot
TEMPI
Stat_4
• DFh

{random counter
;system

Stat_4
Get_feed
Stat_4
•Do_feed
Feed_md
TEMPI
Spcl_seedl
Seed_l

.-update
{go test sensor
{get system
.•ck sw
.-wait for feed to go away
;get new seed
.•stuff it
.-also load for cold boot

IF this is a cold boot , reset command then clear EEPROM and
chose a new name and voice.

Do_cold_boot:
LDA
STA

*00
Warm_cold

,-flag cold boot

A-22

LEA

Stat_0

ORA
STA

•Say_new_name
Stat_0

;•••••••
;
;

;

;system
,-make system say new name
•
t

NOTE :::::

VOICE AND NAME SLECTION MUST HAPPEN BEFORE EEPROM WRITE OR
THEY WILL ALWAYS COME UP
00
because ram 'ust got cleared!!!!!!

Random voice selection here
LDA
STA

«80h
IN_DAT

;ge-

• 00

; makei sure only gives random
;get number of random selections
;go get random selection

LDX
LDA
JSR

#10h
Ran_seq

TAX
LDA
STA

Voice_table,X
Rvoice

; On power up or reset,
cute.
JSR
AND
STA
JSR

random/sequential split
;save for random routine

;get new voice
;set new voice pitch

Furby must go select a new name

, ,,

ahw how

;

Random
DlFh
Name
Do_EE_write

;get 32 possible
.-set new name pointer
.-write the EEPROM

End_coldinit r

>*flllllflllitllllllfilltllllllllillttlfilltllfllllfllllllllfllliiixil
;• 'Special initialization prior to normal run mode
*
; •
Jump to Warm, boot when portD wakes us up
jfcllllllllllllilflllllllllillllllllllllllilllllllllllllillllllllllllll

;
Warm_b°ot:
JSR

;no

nal

S_EEK

tart when Port_D wakes ur up.
M_READ

;read data to ram

l Epront_read_byp:

; If light osc fails, or too dark and that sends us to sleep, we
; set 'Dark_sl->ep_prev• and save it in EEPROM in 'Seed_2'.
; when the sleep routine executes,(00 01 based on this bit)
; When we wake up we recover this bit and it becomes the previous done
; flag back in 'Stat_0', so that if the osc is

;

still dark or failed,
LDA
BED
LDA
ORA
STA

Furby wont go back to sleep.

Seed_2
{from EEPROM
No_prevsleep
{jump if none
Stat_0
;system
*Dark_sleep_prev ;prev done
Stat_0
{update

No_prevsleep:

LDA
STA

Spcl_seedl
Seed_l

;recover start up random number
;set generator

Pot_timeL2 is save in ram through sleep mode and then reloaded *
Pot_timeL which is the working register for the motor position.
This allows startup routines to clear ram without forgetting the
last motor position.
LDA
STA

;

Pot_timeL2
Pot_ imeL

.get current count
;save in motor routine counter

Get age and make sure it is not greater than 3

(age*!

;get current age
.•preserve bit 7 which is 9th age counter bit
and insure age not >3

LDA
AND

Age
»83h

STA

Age

LDA
STA

*Bored_reld ;reset timer
Bored_time' ;

LDA
STA

103
Last_IR

;set timer
;timer stops IR from hearing own IR xmit

JSR

Get_light

;go get light level sample

LDA
STA

TEMPI
Light_reff

;get new count
/update system

LDA
CMP
BEQ

Warm^cold

{decide if warm or cold boot
;ck for warm boot
{jump if is

/;; f

»llh
No_zero

.set system.

A-24

LDA
STA
STA
JSR
JSR

»00
Macro_Lo
Macro_Hi
Get_macro
Notrdy

;point to macro 0

(SENDS TO SLEEP POSITION)

LDA
STA

•11
Mon_len

;preset motor speed
;set motor on pulse timing

LuA
STA

• 05
Moff_len

.-set motor to 3/4 speed for speed test
,-set motor off pulse timing

LDA
STA

• 00
3tat_4

;clear all system sensor requests
;update

;go start motor/speech
;Do / get
status

for speech and motor

zeros

;

Currently uses 4
LDA
ORA
ORA
STA

;

tables,

one for each age.

;system
Stat_0
•Init_motor :flag motor to do speed test
*Init_Mspeea
;2nd part of test
;update
Stat_0

Do wake up routine

s
:reset timer to trigger sensor learning

Ida
STA

*Global_time
Sensor_timer

LDA
STA

#80h
IN_DAT

;get random'sequential split
.-save for random routine

»00h
*10h
Ran_seq
TEMPI

.-make sure only gives random
;get number of random selections
;go get random selection

LDX
LDA
. JSR
' LDA

;g«t decision

STA
LDA
(offset)
JSR
LDA

IN_DAT
*Wake_ID

,-save decision
;which ram location for leamea word count

Start_learn
IN_DAT

;go record training info
;get back word to speak

JSR
LDX
LDA
STA

Decid_age
TEMPO
Wakeup_Sl,X
Macro_Lo

;do age calculation for table entry

INX
LDA

Wakeup_Sl,X

STA
JMP

Macro_Hi
Start_macro

;age offset
;get new sound/word
,-save lo byte of Macro table entry

s
;get new sound/word
,-save hi byte of Macro table entry
;go start speech

;«lillilllllllllllllllllllllllllllillllliilllllllltllllllllllllllilll
'IDLE Routine

•

ittlttlittltltlllltltttltlltttllllttttltltttllittttttlltlitttllltlttii

Idle:
; Idle routine is the time slice task master
(TSTM) ugh!
; We must call each routine and interle-ve with a call to speech
; to insure we never miss a TI request for data.
JSR

Notrdy

;Do / get

status

for speech and motor

; *" *.......

;

THis bit is set when light sensor is darker than
LDA
AND
BEQ

Stat_0
; system.
*REQ_dark_sleep
;ck for
No_dark_req ;jump if not

LDA
AND
STA

Stat_0
tBFh
Stat_0

;system
;kill req
;update

LDA
STA
LDA
STA
JMP

#A6h
Macro_Lo

;sleep macro

-Dark_sleep’

;sleep macro
tOOh
;
Macro_Hi
Start_macro ;go say it

No_dark_req:

When any sensor or timer calls the ■start_macro' routine, the
Macro_Lo & Macr _Hi are saved. Everyone jumps back to Idle and when
I speech/motor routines are finished, this routine will look at the
I macros that were used and execute another function if a match is
found.
;
;

I
I

;

Checks for his name first, then any IR to send, and finally,
commands. THe temp macro buffers are cleared before

Spcl_Namel:
LDX
Spcl_Name2:
LDA
CMP
BEQ
CMP
BNE
INX
LDA
CMP

«00

the

Bleep

;offset

Ck_Name_table,X
;ck lo byte
tFFh
;ck for end of table
Spcl_IRl
;done if is

(note 255 cant execute)

Req_macro_lo
jck against last speech request
Not_Name2
;jump if not
; to hi byte
Ck_Name_table.X
;ck hi byte
Req_macro_hi
;ck against lasspeech request

A-26

BNE
JMP
Not_Name2:
I NX
Not_Nama3:
INX
JMP

Not _Name3
Say„Sname

.•jump if not
; speak it
J

Spcl_Name2

;
; loop til done

LDA
AND
STA

Stat_0
•DFh
Stat_0

,-kill req for startup new name
.■update

LDA
CLC
ROL
TAX
LDA
STA
INX
LDA
STA
JSR
JSR

Name

;current setting for table offset

A

;2's comp

Say_Sname:

Spcl_IRl:
LDX
Spcl_IR2:
LDA
CMP
BEQ
CMP
BNE
INX
LDA
CMP
BNE
INX
LDA

Name_table. X

; get lo byte
; save lo byte of Macro table entry
;
.-get hi byte
Name table.X
,-save hi byte of Macro table entry
Macro_Hi
;go start motor/speech
Oet_macro
;Do / get
status for speech and nw3tor
Notrdy
Macro_Lo

#00

;offset

IRxmit_tabie1,X
;ck lo byte
;ck for end of table
#FFh

(note 255 cant execute)

Spcl_IR_dn
.•done if is
;ck against last speech request
Req_macro_lc
Not_IRxmit2 .•jump if not
;to hi byte
;ck hi byte
IRxmit table ,X
;ck against last speech request
Req_niacro_hi
Not IRxmit3 ;jump if not
.•point to IR table

STA
LDA

IRxmi t_table,X
;xmit temp rrm
TEMP2
;TI consnand for IR xmit
#FDh

STA
JSR

TEMPI
Xmit_TI

LDA
STA

•Bored_reld .■reset bored timer
Bored_timer >

LDA

• 03
Last _IR

STA

J
;go send it

; set t imer
.•timer stops IR from hearing its own IR

xmit
JMP
Spcl_IR_dn
Not IRxmi t2
INX
Not IRxmit3 s
INX
INX
Spcl_IR2
JMP
Spcl_IR_dn:

.■done - ola.
;lo byte
jhi byte
;xmit pointer
;loop til done

Spcl_macrol:
LDX
#00
Spcl_sleepl:

.■offset

LDA
CMP
BEQ
CMP
BNE
INX
LDA
CMP
BNE

Sleepy_table,X
;ck lo byte
*FFh
;ck for end of table (note 255 cant execute)
Ck_macro_dn ;dcne if is
Req_macro_lo
;ck against last speech request
Not_sleepy2 ;jump if not
; to hi byte
Sleepy_table,X
;ck hi byte
Req_jnacro_hi
jck against last speech request
Not_sleepyj ;jump if not

LDA
STA
STA

100
;clear macro pointers
Req_macro_lo
Req_jnacro_hi

for wake up

;mod F-rels2 ;
;
Before going to sleep send sleep cmnd to all others.
LDA
STA
LDA
STA
JSR

115
TEMP2
IFDh
TEMPI
Xmit_TI

xmit temj ram
;TI command for IR xmit
•

•

;go send it

;need to wait >600 milisec before going to sleep because we arent using
.•busy flags from TI and need to make sure it is done transmitting the
;I.R. code, the sleep routine kills the TI and it would never send the
cmnd.
LDA
JSR

#25
Half_delay

;how many 30 milisec cycles to call
;do 30milisec delay cycles

GoToSleep

;nity-night

;end mod
JMP

Not_sl6epy2:
INX
Not_sleepy3:
INX
JMP
Spcl_sleepl

I
.-loop til done

Ck_macro_dn.
LDA
100
;clear macro pointers for wake up
STA
Req_macro_lo
STA
Req_macro_hi
JMP
Test_new_name
;on to task master

SLEEP TABLE & IR table
Sleepy_table:
DW
91
DW
DW
DW
DW

;hangout

166
167

;wake up
;wake up

166
169

;wake up
;wake up

. MOVE TO INCLUDE FILE LATER

CM

258
259
260

;Back sw

DW
DW
DW

403

jlR
ilR
; IR

DB

FFh,FFh

DW
DW

413
429

IRxmit_table:
DW
00
DB
DW
13
DB
00
DW
17
DB
00
DW
19
00
DB
CM
26
00
DB
DW
29
00
DB
DW
33
00
DB
DW
34
00
DE
DW
44
00
DB
DW
45
00
DB
DW
48
00
DB
DW
50
00
DB
DW
55
00
DB
DW
60
00
DB
DW
149
00
DB

;Back sw
;Back sw

;FF FF

is

table terminator

.•trigger macro
(

0 -

Of

(

0

Of

(

0

-

Of

(

0 -

Of

(

0

-

Of

{

0

-

Of

(

0 -

Of

(

0

-

Of

(

0

-

Of

to call

(

0

- Of

to call

(

0 -

Of

to call

(

0

-

Of

to call

l

0

-

Of

;trigger macro
;which IR command to call
;£rom rooste.- wake up

(

0 -

Of

(

0

(

0 -

Of

(

0

“

Of

(

0

-

Of

(

0 “

Of

(

0 -

Of

(

0 -

Of

;which IR conroand to call
;trigger macro
.•which IR command to call
.•trigger macro
.•which IR conroand to call
;trigger macro
.•which IR command to call
.•trigger macro
;which IR conroand to call
;trigger macro
.•which IR command to call
;crigger macro
.•which IR command to call
;trigger macro
;which IR command to call
;trigger macro
;which IR command to call
.•trigger macro
.•which IR conroand
(trigger macro
.•which IR command
;trigger macro
.•which IR conroand
;trigger macro
;which IR command

!

DW
DB
DW
DB
DW
DB

352
01
363
01
393
01

;trigger macro
;which IR conroand to call
.•trigger macro
.•which IR command to call
,• trigger macro
.•which IR command to call

DW
DB
DW
DB

248
02
313
02

,• trigger macro
.■which IR command to call
(trigger macro
.•which IR command to call

DW

86
03
93
03

trigger macro
.•which IR conroand to call
,• trigger macro
.■which IR conroandto call

339

.•trigger macro

DB

CM
DB
CM

- Of

A-29

DB
DW

03
344
03
351
03

.-which IR command to call
;trigger macro
;which IR command to call
;trigger macro
.-which IR command to call

404
04
405
04

;trigger macro
;which IR command to call
,-trigger macro
;which IR command to call

DB

293
05
394
05
406
05
414
05
422
05

,- trigger macro
;which IR command to
;trigger macro
;which IR comnand to
;trigger macro
,-which IR command to
;trigger macro
.-which IR command to
;trigger macro
,-which IR command to

DW
DB
DW
DB

395
06
421
06

DW
DB

423
06

;trigger macro
;which IR comnand to call
;trigger macro
;which IR command to call
;trigger macro
;which IR command to call

DW

296
07
41b
07
416
07

;trigger macro
;which IR command to call
;trigger macro
;which IR command to call
;trigger macro
;which IR command to call

288
08

;trigger macro

11
09
12
09
27
09
42
09
57
09
235
09
236
09
237

;trigger macro
;which IR command
,- trigger macro
;which IR command
;trigger macro
.-which IR command
;trigger macro
;which IR command
;trigger macro
.-which IR command
;trigger macro
;which IR command
;trigger macro
,-which IR command
;trigger macro
; which IR comma .d
,- trigger macro
;which IR command
; trigger macro

DB
DW
DB
DW
DB
DW
DB
DW
DB
DW
DB
DW
DB
DW
DB

W

DB
DW
DB
DW
DB
DW
DB
DW
DB
DW
DB
DW
DB
DW
DB
DW
DB
DW
DB
DW
DB
DW
DB
DW

09
238

DB
DW
DB

09
261
09

DW

262

0

-

Of

0

-

Of

0 -

Of

-

Of

0

0 - Of

call

0

-

Of

call

0

-

Of

call

0 - Of

call

0 -

Of

call

0

-

Of

0

-

Of

0 - Of
0 -

Of

-

Of

0 -

Of

0 -

Of

0

-

Of

to call

0 -

Of

to call

0

-

Of

to call

0

-

Of

to call

0

-

Of

to call

0

-

Of

to call

0 -

Of

to call

0

-

Of

to call

0 -

Of

to call

0 - Of

;which IR command to call

;which IR command to call
; trigger macro

0

0

-

Of

>

1

0

- Of

)

(

0 - Of

)

(

0 - Of

)

(

0

- Of

)

(

0

- Of

)

(

0

- Of

)

to call

( C

- Of

)

to call

( c

- Of

I

to call

(

- Of

)

to call

- Of

)

to call

- Of

)

to

call

- Of

)

tc call

- Of

)

to call

- Of

)

- Of

)

- Of

)

- Of

)

0 - Of

»

0 - Of

)

0 - Of

)

0 - Of

)

to call

0 - Of

)

to call

0 - Of

)

to call

0 - Of

)

to call

0 - Of

)

;which IR conmand to call
.•trigger macro
.•which IR conmand to call
.•trigger macro

0 - Of

)

0 - Of

)

09
396
09
409
09

;which IR command to call
itrigger macro
;which IR command to call
;trigger macro
;which IR command to call

DW
DB
DW
DB
DW
DB

399

.•trigger macro
.•which IR command to call
;trigger macro
.•which IR command to call
;trigger macro
;which IR command to call

DW
DB
DW
DB
DW

272

DB
DW
DB
DW
DB
DW
DB
DW

11
275

DB
DW
DB

11
426
11

;trigger macro
.•which IR command
.•trigger macro
;which IR command
;trigger macro
.•which IR command
trigger macro
;which IR command

DW

336
12
342
12
401
12

;trigger macro
;which IR command to call
;trigger macro
;which IR command to call
;trigger macro
.-which IR command to call
.•trigger macro
;which IR command to call

DB
DW

92
13
411
13
419
13
427

DB

13

DW
DB
DW
DB
DW
DB
DW

291
14
402

DB

14

CM

256
15
257

DB
DW
DB
DW
DB

DB
DW
DB
DW
DB
DW
DB
DW
DB
DW

DB
DW
DB
DW

10
407
10
408
10

11
273
11
274

11
400
11
418
11
425

14
412
14
428

15
420

trigger macro
;which IR command'
;trigger macro
.•which IR command
;trigger macro
.•which IR command
.•trigger macro
.•which IR command

;trigger macro
.•which IR command to call
;trigger macro
.■which IR conmandto call
.•trigger macro
;which IR command to call
.•trigger macro
.•which IR comnai d
; trigger macro
;which IR command
;trigger macro
.•which IR command
.•trigger macro
;which IR command

(

.•trigger macro

DB
;mod F-rels2
DW
DB
DW
DB
end mod

;

DB

15
;

;which IR coranand to call

(

0 - Of

)

0

- Of

)

( 0

- Of

)

send sleep if recv sleep on IR

403
15
413

;trigger macro
;which IR command to call
; trigger i«acro
.•which IR command to call

15

FFh.FFh

(

;FF FF

is table terminator

;FF FF

is table terminator

Ck_Name_table:

;

DW
DW
DW
DW
DW
DW
DW
DW

97
248
393
414
149
305
404
421

DB

FFh.FFh

Say name

Test_new_name:
LDA
AND

Stat_0
#Say_new_name

;system
;-ake system say new name

BEQ

Nosayname

;bypass ll clear

LDA
AND

Stat_0
»DFh

.-kill req for startup new name

STA

Stat_0

;update

LDA

Name

;current

CLC
ROL

setting for table offset

A

! 2's comp

TAX
LDA
STA

Name_table,X
;get lo byte
Macro_Lo
.save lo byte of Macro table entry

I NX
LDA
STA
JSR
JSR

Name_table,X
;get hi byte
Macro_Hi
;save hi byte of Macro table entry
Get_macro
jgo start motor/speech
Notrdy
;Do / get
status for speech and motor

Nosayname:

. ..... below routines run at 742 msec loops
•

Timer B sets

'Milisec_flag'

each 742 miliseconds

A-32

Updt_timer:
LDA

Mil:sec_flag

BEQ
LDA
STA

TimerL_dn
;bypass if 0
»00
;clear it
Milisec_flag
;reset

LDA
BEQ

Sensor_timer
TimerLl

;get current timer * 742ir^ec sec
;do nothing if 0

DEC

Sensor_timer

j-1

TimerLl:
LDA

Light_timer ;get current timer • 742mSec sec

BEQ

TimerL2

DEC

Light_timer

TimerL2s
LDA
BEQ
DEC
TimerL3:
LDA
BEQ
DEC

;if >0 Chen 742 mili seconds have passed

,-do nothing if 0
;-l

Sound_timer ;get current timer * 742mSec sec
TimerL3
Sound_timer ;-l

;do nothing if 0

Bored_timer ;get current timer * 742mSec
TimerL4
;do nothing if 0
Bored_timer ;-l

TimerL4:
LDA
BEQ

Last_IR
TimerLS

;get current timer
;do nothing if 0

DEC

Last_IR

;-l

* 742mSec

TimerL5:
TimerL_dn:
INC
LDA
CLC
SBC
BCC
LDA
STA

Task_ptr
Task_ptr

;*1
; get

*08
Ck_tsk_A

;ck if off end
;jump if <9
;reset pointer
•*

*01
Task_ptr

it

Ck_tsk_A:
;

If too sick then no game play,,,
CLC
LDA

Sick_counter

SBC
BCS
JMP

»Really_sick
J
Ck_task_egg ;do egg if not
Ck_bored
;bypass if too sick

;how sick is he

,
.
;
;

Scan all game mode pointers to determine if any are c-tive.
Continue to execute the first active game found, and ti.it game always
allows the task list to be scaned for sensor input. If no games are
active, than check task 0 to determine if the correct sensor sequence

;

is occuring which will initiate tha next game.

Ck_task_egg:
LDA
ror
BCC

Qame_l
A
ck_g2

;get game active bits
,-move bit 0 to earn'
;check next if not activ

A-33

JMP

Game_fortune

;jump if active

Ck_g2 !
ROR
-BCC
JMP

A
Ck_g3
Oame_Rap

.•bit 1
;check next if not activ
;jump if active

Ck_g3
ROR
BCC
CMP

A
Ck_g4

tor
BCC
JMP

A
Ck_g5
Qame_simon

;bit 3
.check next if not activ
•jump if active

ROR
BCC
JMP

A
Ck_g6
Game_Burp

;bit 4
.•check next if not activ
;jump if active

ROR
BCC
JMP

A
Ck_g7
G ame _name

.•bit 5
;check next if not activ
,-jump if active

ROR
BCC
JMP

A
.bit 6
Ck_g8
.•check next if not activ
Game_twinkle
,-jump if active

ROR
BCC
JMP

A
.-bit 7
Ck_g9
.•check next if not activ
Game_rooster
,-jump if. active

; bit 2
.■check next if not activ
Oame_hideseek
;jump if active

Ck_g4 :

Ck_g5

Ck_g6

Ck_g7

Ck_g8

Ck_g9:

;

none active

;

;
;

Task 0 : scans all active requests from sensors looking for a trigger.
If any are set then scan through the game select tables for each game

; looking for a match, and increment the counter each time a succesive
; match is found. If one is not in sequence, then that counter is reset
to
; zero. Since all counters are independent,
completion
; wins and all others are zeroed.

then the first one to

•
t

;

All sensor triggers are in one status byte so we can create a number

I based on who has been triggered (we ignore the I.R. sensor).
I The following bits are in Stat_4 and are set when they are triggered
■

by the inJ-ual sensor routines

;
;
;
;
;
;
;
•

00
01
02
04
08
10
20
40

=
=
=
=
=
=
=
=

:

none
Loud sound
Light change brighter
Light change darker
Front tummy switch
Back switch
Feed switch
Tilt switch

A-34

; 80 = Invert switch
; We assr 1 a single bit per game or egg senario. Each time a
; sensor . : triggered, we increment Che counter and test all eggs for
; a match. If a particular sensor doesnt match, then set its
disqualified
; bit and move on. If at any time all bits are set, then clear counter
to
; zero and start over. WHen a table gets an FF then that egg is
executed.
; Each time a sensor is triggered, the system timer is reset. This timer
; called 'Sensor_timer1 is reset with ,Global_time• equate. This timer is
also
; used for the random sequential selection of sensor responses. If this
; timer goes to zero before an egg is complete, ie, Furby has not been
played
; with, then clear all disqualified bits and counters.
;

Currently there are 24 possible eggs.

;Qualifyl:
;DQ_fortune
;DQ_rap
;DQ_hide
;DQ_simon
;DQ_burp
;DQ_name
;DQ_twinkle
;DQ_rooste

EQU
EQU
EQU
EQU
EQU
EQU
EQU

;

s
s
s
=
bit 4 s
bit 5 s
bit 6 s

;

bit 7 *

I

;

20
40
80

; bit
02
.-bit
.-bit
;bit

0 = fortune teller
bit 1 = rap song
2 = hide and seek

3
4
;Lit 5
;bit 6
;bit 7

= simon says
= burp attack
= say name
= sing song
= rooster-love you

removed due to lack of RAM

; Qualify2:
;
bit 0
j
bit 1
;
bit 2
;
bit 3
;

01
EQU
04
08
10

(3 bytes)

Test triggers here

Ck_game:
I
LDA
LDA
BNE
JSR
Ck_gamactv:
LDA
CMP
BNE
I
LDA
j
CMP
;
BNE
JSR
Ck_anysens:
LDA
BNE
JMP

Eensor_timer
;ck if no action for a while
Bored_timer ;ck if no action for a while
Ck_gamactv
;jump if system active
Clear_games ;go reset all other triggers and game pointers

Qualify2
#00h
Ck_anysens
Clear_games

;test if all are disqualified
.•compare activ bits only
ijump if some or all still active
;test if all are disqualified
compare activ bits only
;jump if some or all still active
;go reset all otler triggers and game pointers

Stat_4
Ck_gaml
Ck_bored

;ck if any sensor is triggered
;go ck games if any set
;bypass if none

Qualifyl
• FFh
Ck_anysens

Ck_gaml:
LDX
LDA
AND
BNE
LDA
AND
BNE
LDA
ORA
STA
JMP
rk_gamla:
LDA
CMP
BNE
JSR
LDA
ORA
STA
JMP
Ck_gam2:
LDA
AND
BNE
LDA
AND
BNE
LDA
ORA
STA
JMP
Ck_gam2a:
LDA
CMP
BNE
JSR
LDA
ORA
STA
JMP
Ck_gam3:
LDA
AND
BNE
LDA
AND
BNE
LDA
ORA
STA
JMP
Ck_gamJa:
LDA
CMP
BNE
JSR

/fortune teller
Egg_cnt
/get current count
Qualifyl
update game qualification
*DQ_fortune /check if dia-qualified bit
Ck_gam2
/bail out if is
Fortune_table,X
/get current data
Stat_4
/compare against sensor trigger
Ck_gamla
/if set then good compare
Qualifyl
/update game qualification
#DQ_fortune /set dia-qualified bit
/update system
Qualifyl
Ck_gam2
/check next egg
Fortune_table*l,X /get current ♦! to see if end of egg
*FFh
/test if end of table and start of game
Ck_gam2
/jump if not at end
Clear_games /go reset all other triggers and gome painters
Game_l
/get system
#Fortune_mode
/start game mode
Game. 1
/update
Idle
z done
Z Rap mode
Qualifyl
«DQ_rap
Ck_gam3
Rap_table,X
Stat_4
Ck_gam2a
Qualifyl
#DQ_rap
Qualifyl
Ck_gam3
Rap_table»l
#FFh
Ck_gam3
Clear_games
Game_l
»Rap_mode
Game_l
Idle

/update game qualification
/check if dis-qualified bit
/bail out if is
/get current data
/compare against sensor trigger
/if set then good compare
/update game qualification
/set dis-qualified bit
/update system
zcheck next egg
X
/get current data ♦! to see if end of egg
/test if end of table and start of game
/jump if not at end
/go reset all other triggers and game pointers
/get system
/start game mode
/update
Z done

/ Hide and seek
/update game qualification
Qualil/1
/check if dis-qualified bit
*DQ_hide
Ck_gam4
/bail out if is
Hseek_table,X
/get current data
Stat_4
/compare against sensor trigger
Ck_gam3a
/if set then good compare
Qualifyl
/update game qualification
/set dis-qualifiad bit
*DQ_hide
/update system
Qualifyl
Ck_gam4
/check nect egg
Hseek_table*l,X
/get current data el to see if end of egg
/test if end of table and start of game
#FFh
zjurp if not at end
Ck_gam4
Clear_garoes /go reset all other triggers and game point r—s

LDA
ORA
STA
JMP
C

vim4:
LDA

AND
BNE
LDA
AND
BNE
LDA
ORA
STA
JMP
Ck_gam4 a•
LDA
CMP
BNE
JSR
LDA
ORA
STA
LDA
STA
JMP
Ck_gam5:
LDA
AND
BNE
LDA
AND
BNE
LDA
ORA
STA
JMP
Ck_gam5a:
LDA
CMP
BNE
JSR
LDA
ORA
STA
LDA
STA
JMP
Ck_gam6:
LDA
AND
BNE
LDA
AND
BNE
LDA
ORA

Game_l
;get system
*Hideseek_mode
;start game mode
Game_l
;update
Idle
; done
> Simon says
Qualifyl
.-update game qualification
»DQ_simon
;check if dis-qualified bit
Ck_gam5
,-bail out if is
Simon_table,X
;get current data
Stat_4
;compare against sensor trigger
Ck_gam4a
;if set then good compare
.-update game qualification
Qualifyl
#DQ_simon
;set dis-qualified bit
Qualifyl
,-update system
Ck_gam5
;check next egg
Simon_table*l,X
;get current data *1 to see if end of egg
#FFh
.-test if end of table and start of game
Ck_gamS
,-jurop if not at end
Clear_gair.es ;gc reset all other triggers and game pointers
Game_l
;get system
#Simonsay_mode
;start game mode
Game_l
.-update
#00
;clear all pointers
Stat_5
;system
Idle
; dene
/ Burp atta::k
.•update game qualification
Qualifyl
#DO burp
;check if dis-qualified bit
Ck_gam6
,-bail out if is
Burp_tabl
)C
.-get current data
;compare against sensor trigger
Stat_4
Ck_gamSa
Qualifyl .
#DQ_burp
Qualifyl
Ck_gam6

;if set then good compare
.-update game qualification
.-set dis-qualif ied bit
;update system
;check next egg

Burp_table*l, X
;get current data ♦! to see if end of
;test if end of table and start of game
#FFh
Ck_gam6
Clear_games
Game_l
#Burp_mode
Game_l
#00
Stat_5
Idle
/ say name
Qualifyl
#DQ_name
Ck_gam7
Name_egg,X
Stat_4
Ck_gam6a
Qualifyl
#DQ_name

egg

.-jump if not at end
/ jo reset all other triggers and game pointers
.-get system
.■start game mode
update
;clear all pointers
,- system
; done

.-update game qualification
/check if dis-qualified bit
,-bail out if is
/get current data
/compare against sensor trigger
/if set then good compare
/update game qualification
/set dis-qualified bit

STA
JMP
Ck_gam6a:
LDA
CMP
BNE
JSR
LDA
ORA
STA
LDA
STA
JMP

Qualifyl
Ck_gam7

.-update system
;check next egg

Name_egg*l,X
;get current data +1 to see if end of egg
»FFh
;test if end of table and start of game
Ck_gam7
.-jump if not at end
Clear_gamea ;go reset all other triggers and game pointers
Garoe_l
.-get system
*Name_mode
;start game mode
Game_l
.-update
*00
.-clear all pointers
Stat_5
;system
Idle
;done

Ck_gam7:
LDA
AND
BNE
LDA
AND
BN5
LDA
ORA
STA
JMP
Ck_gam7a:
LDA
CMP
BNE
JSR
LDA
ORA
Sl'A
LDA
STA
JMP

; twinkle song
Qualifyl
,-update game qualification
#DQ_twinkle ,-check if dis-qualified bit
Ck_gamS
;bail out if is
Twinkle_egg,X
;get current data
Stat_4
.compare against sensor trigger
Ck_gam7a
;if set then good compare
Qualifyl
.-update game qualification
*DQ_twi kle ,-set dis-qualified bit
Qualifyl
.-update system
Ck_gam8
;check next egg

Ck_gam8:
LDA
AND
BNE

; roos1er lov»s you
Qualifyl
;update game qualification
»DO rooster .-check if dis-qualified bit
,-bail out if is
Ck_gam9
Rooster_egg X
.-get current uata
.-compare against sensor
Stat_4
Ck_gam8a
;if set then good compare
Qualifyl
;update game qualification
*DQ_rooster ;set dis-qualified bit
Qualifyl
,-update, system
Ck_gam9
,-check next egg

LDA
AND
BNE
LDA
ORA
STA
JMP
Ck_gam8a:
LDA
CMP
BNE
JSR
LDA
ORA
STA
LDA
STA
JMP

Twinkle_egg»l,X
,-get current data *1 to see if end of egg
*FFh
;test if end of table and start of game
Ck_gam8
;jump if not at end
Clear_games ;go reset all other triggers and game pointers
Game_l
.-get system
*Twinkle_mcde
start game mode
Game_l
,-update
*00
;clear all pointers
Stat_5
;system
Idle
.-done

trigger

Rooster_egg* 1,X
.-get current data *1 to see if end of egg
*FFh
;test if end of table and start of game
Ck_gam9
,-jump if not at end
Clear_games ,-go reset all other triggers and game pointers
Game_l
.-get system
*Rooster_mode
.-start game mode
Game_l
.-update
*00
.-clear all pointers
Stat_5
,- system
Idle
,- done

A-38

Ck_gam9:

INC
LDA
CLC
SBC
BCC
JSR

;incs on any sersor trigger

Egg_cnt
Egg_cnt

.-get

110
Cge2
Clear_games

.•limit max to 10 for error checking
.•continue if less

too

;clear all sensor triggers this pass
;ready for next pass of sensor t.iggers
;done with easter egg test

jreset all

Cge2:
LDA
STA
JHP

Stat_4
Ck_bored

Clear all_gam:
LDA
»00
Game_l
STA
Game_2
;
STA
Clear_games
too
LDA
Egg_cnt
STA
Stat_4
STA
Stat_5
STA
Qualifyl
STA
Qualify2
;
STA
RTS

;clear all game enabled bits
;

>
,-clea.

counter

;clear game status
.•clear game status
.•clear all dis-qualify bits
/clear all
; done

00
01
02
04
08

=
=
=
=
=

none
Loud sound
Light change brighter
Light change darker
Front tummy switch

10
20
40
80

=
=
■
=

Back switch
Feed switch
Tilt switch
Invert switch

dis-qualify bits

These look up tables provide the sequence of sensor triggers required
to enter that specific game mode. .FFh is always the last byte)

Fortune_table:
DB
04h,04h,lOh,FFh

; lght,lght,back

Rap_table:
DB

;snd,snd.snd,snd

01h,01h,01h,01h,FFh

Hseek_table:
DB
04h,04h,04h,08h,FFh

;light,light,light,frnt

Simon_table:
DB
08h,lOh,Olh,04h,FFh

;frnt.back,snd,lght

Burp_table:

A-39

DB

20h,20h,20h,lOh,FFh

.-feed, f *d,feed,back

J8h,08h,08h,lOh.FFh

,- frnt,frnt,fmt.back

Olh.Olh.Olh,lOh.FFh

jend,end,end,back

04h,04h,04h,lOh.FFh

; light,light,light,back

Name_egg:
DB
Twinkle_egg:
DB
Rooster_eu, 7:
DB

;
;

Normal

task scan of sense-s and timers.

I
Ck_bored:
LDA
BNE
;

Bored_t j me r
Ck_tski

Currently uses 4

hDt

;ck if bored ... =0
.-jump if not bored

tables,

one for each age.

STA

»Bored_spliC
IN_DAT

LDX
LDA
JSR
Bt-S

•Seq_bored
»Ran_bored
Rar._:. eq
Bored_ran

;get number of sequential selections
;get number of randoms

LDX
INC

Bored_cour.Bored_count
Bored_count

,-ave current

LDA
CLC
SBC
BCC
LDA
STA
Bored_t' de:

LDA
STA
JMP
Ck_tskl:
LDA
CMP
BNE
JMP
Ck_tsk4 :
CMP
BNE

;go decide rrndom/sequential
.Random mode when carry SET

;if not then next table entry
;get

»Seq_bo sd-1
;ck if > assignment
Bored_s_.de
;jump if <
• 00
;reset to 1st entry of sequential
Borcd_count *•

fXA
Bored_ran:
JSR
LDX
LDA
STA
INX

;get random/sequential split
;save for random routine

;current count

Decid_age
TEMPO
Bored_Sl,X
Macro_Lo

;do age calculation for table entry
;age offset

Bored_Sl,X
Macro_Hi

,-get n- w sound/word

Start_macro

,-get new sound/word
.•save lo byte of Macro table entry

.-save hi byte of Macro table entry
;go set group/table pointer for motor & speh

Task_ptr
*01
Ck_tsk4
CK.tilt

J

• 02
Ck_tsk5

;decide which
,-jump it not

.-decide which
,-jump if not
;Ck ball

witch side sense

A-40

JMP
Ck_tsk5:
CMP
BNE
JMP
Ck_tsk6:

Ck_invert

;Ck ball switch inverted sense

• 03
Ck_tsk6
Ck_back

;decide which
.•jump if not
;Ck Touch switch back sensor

104
Ck_tsk7

JMP
Ck_tsk7:

Ck_IR

.■decide which
.■jump if not
;Ck IR input

CMP
BNE
JMP
Ck_tsk8i
CMP
BNE
JMP
Ck_tsk9:
CMP
BNE
JMP
Ck_tskl0:

#05
Ck_tsk8
Ck_feed

.•decide which
,-jump if not
;Ck Feed sensor

• 06
Ck_tsk9
Ck_.ight

.-decide which

• 07
Ck_tskl0
Ck_front

;decide which
.•jump if not
;Ck Front touch switch

• 08
Ck_tskend
Ck_sound

;decide which

Idle

;no task

CMP
BNE

CMP
BNE
JMP
Ck_tskend:
JMP

;
;
;

;

,-jump if not
;Ck Light sensor

.•jump if not
;Ck Mic input

This rtn tests for motor and speech activity and only services them
to allow each request to finish, and then returns to task routine.
As long as motor »s active, we continually reload the motor led timer
to keep the optical counter alive and when all activity is complete,
the IRQ will

turn led off when timer goes tr 00.

;go do speech
;go do motor

JSR
JSR

Task_l
Task_2

LDA
AND
BNE
LDA
AND
BNE

Stat_l
•Wc -d_activ
Notrdy2

LDA
AND
BNE
LDA

;get system
Stat_2
•Motor_seek ;ck motor request
.•jump if set
Notrdy2
;get system
Stat_2
•Motor_actv ;ck motor in motion

AND
BNE
LDA
BNE

Stat_l
•Say_activ

;get system
for spch word active
■jump if not done
;update
;ck for saysent active
.■Test

Notrdy2

Notrdy2
Drift_fwd
Notrdy2

;motor drift counter 0 when

A-41

LDA
BNE

Drift_rev
NoCrdy2

LDA
AND
BEQ
JSR
JMP

Stat_2
;system
»Macro_actv ;ck for flag request
Notrdy_dn
;bail
if none
Ck_Macro
;decide if more chaining in process
Notrdy2
;continue

Notrdy_dn:
RTS
Notrdy2:
LDA
STA
JMP

Task_l:
LDA
AND
BNE
;More_spch
LDA
AND
BEQ
JSR
JMP
W_activ:
LDA

;

;only leave when everyone done

#Motor_led_rst
Motor_led_timer

;get led timer reload
;how long the motor stays on

Notrdy

;loop

Stat_l
;get system
*Word_activ ,-Test for spch word active
W_activ
;jump if not done
Stat_l

,-update

#Say_activ
;ck for saytent active
EndTask_l
;nothing going on. ck next task
Do_nextsent ;continue on with saysent
EndTask_l

AND
L.IE
JSR
EndTask_l:
RTS

.-Next task

Port_B
•TI_RTS
EndTas/._l
Do_spch

,-get TI req/busy line
;get bit
;if no speech then ck motor
,-go send next byte to TI

Task_2i
}*••••**•••*

Motor Routines

*

;

get next motor data

Ckjnotor:
LDA
AND
BEQ
JMP
Ck_mot2:
LDA
AND
BEQ
Next_motor:
;
LDA

Stat_2
jget system
#Motor_actv ;ck motor in motion
Ck_jnot2
; done
Do_motor
;not don-, so check position
Stat_2
»Motor_seek
NMM_out

jget sys.em
;ck motor request
;jump if rone

Drift_fwd

,-motor drift counter 0 when done

A-42

:
i

BNE
LDA

;

BNE

;

NMM_OUt
Drift_rev
NMM_out

.-wait

til 0

,-wait

til

;

Set a timer and ck counter

0

'motorstoped'

(incremented with wheel

count)
; to see if it changed. When it stops changing then the motor has
stopped.
LDA
BNE
LDA
CMP
BEQ
LDA
STA
LDA
STA
JMP
Motor_done:
LDA
BNE

motorstoped
NMM_out
TEMPI
Pot_timeL
Motor_done
Pot_timeL
TEMPI

• 15

;ck for 0
.-wait till 0
;get last motor count
;ck if changed
.•jump if same (motor finally stopped)
;get current
;reset timer

motorstoped
NMM_out

Cycle_timer
NMM .out

(8)

;wait another cycle

;get step timer
.-wait til 0

STA

Drift_counter

JSR

Motor_data

;get data

LDA
STA

#00
TEMPI

ireset

LDA
CMP

Mctor_lo
#FFh

;get data (use for Ibyte table (DB) ) ..
;is it table end (dont inc off end)

BNE
LDA
AND
STA

Motor_pause .-more
Stat_2
#Motor_ntseek
Stat_2

NMM_out:
JMP

.-use as a temp register

;get system
;clear seek flag
.-update system

Endtask_2

;seek complete

Motor_lo

;check for pause request on this step

Motor_pause:
LDA
BNE
JMP

Morejnotor
.-more
Motor_killend

;set cycle timer and

(00)

ait for next motor

step
I
To initialize the motor call
;

with the pointer and calls

Ck_Macro:
JSR
STA
JSR
STA
CMP
BNE
LDA
CMP

Next_macro
Which_m°tor
Next_macro
Mgroup

table,

the originator loads

•Decidejnotor'.

;get data
;save motor seek pointer
;get data
.-save high byte

,-check for end of macro
• OOh
;do it if not 0
Got_macro
Which_motor ;ck lo byte for 0
;check for end of macro
• OOh

*Which_m°tor•

BNE
End_macro:

Got_wacro

LDA
AND
STA
;
LDA
I
STA
No_macro:
RTS

Stat_2
;get system
#Nt_macro_actv
;clear request
Stat_2
;update
»Rored_reld ;reset bored limer
Bored_timer ;

;do it if not 0 else must be end command

;done

Next_macro:
LDX
*00H
LDA
(Macro_Lo,X)
.-get speech/motor table request
INC
Macro_Lo
;next
BNE
Mac_dat2
; jmp in no roll over
INC
Kacro_Hi
;rolled over so hi *1
Mac_dat2:
RTS
Got_macroi

I The speech and motor pointer table pointer from the sensor table ,
are
; a 1-999 decimal number. The assemble converts to two 8 bit numbers and
; this creates a one of four group of 128 byte pointers in each group.
; We also do 2's offset for table lookup.
CLC
ROL
ROL

; do motor
Whichjnotor ,-move hi bit to carry
Mgroup
;move carry into one of

LDA
STA
LDA
STA
JSR
JSR
RTS

Which_motor ;offset
Which_word
;set speech group pointers
Mgroup
;offset
Sgroup
;
Decide_motor
;start motor routine
Say_0
;start speech routine
{back to task master

Morejnotor:
LDA
ORA
STA
;m
LDA
;m
STA
LDA
ORA
STA

Stat_3
#Motor_on
Stat_3
Mon_.len
Motor_pulse
Stat_2
»Motor_actv
Stat_2

; flag!

;set

four grovo ptr

;system
on mode
;update
.-get length of on pulse
timer
,get system

; set motor in motion
update

Mcalc._lo:

;

When motor stops,
action is reeded.

if the IR detector is on the slot in the wheel, no
If passed the slot, when the next motion command

occurs,
; if the direction is the same as the last motion, no action is needed
j If the direction is opposit to last motion then we decrement or

A-44

;

increment,

based on new direction,

to compensate for the slot which

; will be counted twice.
LDA
CMP
BNE
LDA
AND
STA
JMP
Tst_£wdmore
CLC
SBC
BCC
Go_fwd:
LDA
AND
BEQ
LDA
AND
BNE
DEC
Go_fwd2:
LDA
ORA
ORA
STA
LDA
ORA
AND
JMP
Gorev:
LDA
AND
BEQ
LDA
AND
BEQ
INC
Go_rev2:
LDA
AND
ORA
STA
LDA
ORA
AND
End_rev:
STA
JMP

Motor_lo
Pot_timeL
Tst_fwdmore

;get data
; ck for same
jjurop if not 0
;get system
Stat_2
»Motor_inactv
;clear activ flag
.-update system
Stat_2
Endtask_2
;bail out

Pot_timeL
Go_rev

;get current position
;if borrow then dec consnand

Port_C
•Pos_sen
Go_fwd2

;

Stat_2
•Motor, fwd
Gc_fwd2
Pot_timeL2

Stat_2
*Motor_fwd
•Motor_actv
Stat_2
Stat_3
•Motor_o££
»Motor_fwds
End_rev

;get XR detector
.•bypass if sensor is over slot in wheel
;get system
;get direction motor was last headed
;if set then new direction is same as last
.•compensate for counter direction reversal

;get system
,-set = motor fwd line)
;set motor in motion
,-update system
;get current status
;turn both motors off
,-move motor in fwd dir
;go finish port setup

Port_C

;get IR detect.r

•Pos_sen
Go_rev2
Stat_2
•Motor_fwd
Go_rev2
Pot_timeL2

l

Stat_2
»Motor_rev
»Motor_actv

;get system
.•clear fwd flag
;set motor in motion
;update system
;get current status

Stat_2
Stat_3
»Motor_o£f
•Motor_revs
Stat_3
Endtask..2

••

.■bypass if sensor is over slot in wheel
;get system
;get direction motor was last headed
;if clr then new direction is same as last
compensate for counter direction revercal

.-turn both motors off
,-move motor in rev dir

; done

Do_motor:
;((((((((((( U ((((((((((((((•((((•((H(11(((«((((I((l((I(((((((11
; motor speed control

Id

jmp Byp_jnotorS3
LDA
AND
BEQ
LDA
AND
BEQ
LDA
AND
STA

Stat_0

LDA
STA
LDA
STA

#00
;reset opto speed counter
Mot_opto_cnt
.-set it
#Opto_spd_reld
;get timer value for speed tei
Mot_speed_cnt
.-set it

.•system
»Init_Mspeed
;ck if motor
Byp_motorS3
only runs on wake
Stat_0
;system
•Init_motor ;ck if motor to do
Byp_motorS2 ;only runs on wake
Stat_0
;system
#Nt_Init_motor
done
Stat_0
.■update

to do speed test
up
speed test
up

Byp_jnotorS2 :
LDA
BNE

Mot_speed_cnt
;get timer
Byp_motorS3 ;do nothing if >0

LDX
LDA
STA
LDA
CLC
SBC
STA
BCS
LDA
STA

Mot_opto_cnt
Motor_speed,X
Mon_len
#Mpulse_on+l

;get wheel count during speed test
;get motor on pulse width
;on time
;max cycle time on»off

Mon_len

;get cmplmnt

LDA
AND
STA

Moff_len
Byp_motorS3
#00
Moff_len

;jump if not neg

;

Stat_0
*NT_Init_Mspeed
Stat.O

;sys tem
.•clear motor to do speed test
.-update

Byp_motorS3:
;)))))))))))))))}I)))))))))))))))|))))))))))))))|))) 11)) |)) |) 1111111

;
;

I
I

On power up we preset Mon_len to 11 and Moff_len to 5. This prevents
the motor from destroying itself when the batteries are 6.4v.
This also gives a timed count on the speed test of -7 difference.
so I adjusted the table to ..-onpensate for the shift.

I Compare motor position to see if at destination yet
LDA
AND
BEQ

Stat_2
#Motor_fwd
Motor_dec

;get direction
;set=inc
clr=dec
;

;bit was set so motor in inc condition
FCalc_lo:
LDA
CLC

Motor_lo

;get data
;carry=0

A-46

SBC
BCC
JMP

Pot_timeL
;table - current cap time
Motor_killfwd
;jump if resul: is negative
Endmotor
.-wait till there k pulse for speed

; Reverse direction.
Motor_dec:
; go reverse
LDA
Pot_timeL
.-destination
CLC
,-carry* 0
SBC
BCC

Motor_lo
;table position to seek to
Motor_killrev
;jump if result negative

JMP

Endmotor

jwait till

there & pulse for speed

Motor_killfwd:
LDA
Drift_counter
;ck how far we travled
TAX
,-prep for drift table
CLC
SBC
(20
;ck if less than 20 steps
BCC
M_killf2
{jump if less
LDA
*Drift_long ,-long delay if >10 steps
JMP
M_killf3
;go fini
M_killf2:
LDA
I
LDA

Drift_table,X
*Drift_short

M_killf3:
STA
JMP

Drif t_rev
;save
Motor_killend
;go shut down motor

.-get brake pulse
;short delay if < 10 steps

;
Motor_killrev:
Drif t_counter
LDA
; prep
TAX
CLC
1•

;ck how far we travled
for drift table

SBC
*20
;ck if less than 20 steps
BCC
M_killr2
;jump if less
#Drift_long .-long delay if >10 steps
LDA
M_killr3
;go fini
JMF
M_killr2:
;get brake pulse
Drift_table,X
LDA
.-short delay if < 10 steps
HDrift_short
,LDA
M_killr3:
Drift_fwd
;save
STA
Motor_killend:
;get current status
LDA
Stat_3
»Motor_of f
,- turn both motors off
ORA
STA
LDA
AND
STA
LDA
STA
LDA
STA
JMP
;
;
;

Stat_3
Stat_2
•Motor_inactv
Stat_2
Which_delay ,-time
Cycle_timer ;reset
«00
TEMPI
,-used
Endtask_2
;

;update
;get system
;clear activ flag
;update system
til next read
it
to test motor drift between

Drift table controls the magnitude of braking pulse applied.
If the distance just travled is less than 20 then use that number
to point into table and get new brake pulse length.

Drift_table:
;

DB

24,30,32.34,35,38,40,44,48,54,56

A-47

DB

58,60,,60, 60, 60,60, 60, 60, 60, 60, 60

DB
DB

20,22,,24, 27, 30,32, 34. 36, 38
46,48,,50, 52. 54,56, 58..60, 60, 60,,60,60

DB
DB

25,26,,27,.28. 30,32, 34,,36,,38, 42,,<■•5
48,51,,54,,57..60,60, 60,,60,,60, 60,,60

/ On wake up when the motor moves from positic .
0 to 134, we
; time it and increment a counter which is used to access this table
;

and get the motor on pulse value.

;

Refer to power up preset pulse width for table pointers

Motor_speed:
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB

■

Mpu1s e_on,Mpu1s e_on,Mpu1s e_on
Mpulse_on,Mpulse_on,Mpulse_on
Mpulse_on,Mpulse_on,Mpulse_on
Mpulse_on,Mpulse_on,Mpulse_on
Mpu 1 s e_on, Mpu 1 s e_on, Mpu 1 s e_on
Mpulse_on,Mpulse_on,Mpulse_on
;f,10
Mpulse_on,Mpulse_on,Mpulse_on
Mpulse_on,Mpulse_on,Mpulse_on
Mpulse_on,Mpulse_on,Mpulse_on-l
Mpulse_on-2,Mpulse_on-3,Mpulse_on-4
;lb,lc
Mpulse_on-5,Mpulse_on-5,Mpulse_on-6
Mpulse_on-7,Mpulse_on-8,Mpulse_on-9
Mpulse_on-9,Mpulse_on-9,Mpulse_on-9
Mpulse_on-9,Mpulse_on-9,Mpulse_on-9
Mpulse_on-9,Mpulse_on-9,Mpulse_on-9
Mpulse_on-9,Mpulse_on-9,Mpulse_on-9
Mpulse_on-9,Mpulse_on-9.Mpulse_on-9
Mpulse_on-9,Mpulse_on-9,Mpulse_on-9

This finds the 16 bit adrs of the table and points the motor
Decide_motor:
Which_motor
LDX
Mgroup
LDA
CMP
BEQ

*03
Dec_mot4

CMP
BEQ
CMP
BEQ
Dec_jnotl:
LDA
STA
INX
LDA
JMP

*02
Oec_mot3

Dec_mot2:

.■offset ptr
;get current grc
;is it table group 4

t

s

rr

;jump if is
;is it table group 3
;jump if is
;is it table group 2
• 01
;jump if is
Dec_mot2
;table group 1
Motor_grpl,>;
;get lo pointer
Motptr_lo
.•working buffer
;X+1
Motor_grpl,X
;get hi pointer
;go finish load

i

A-48

LDA

Motor_grp2,X

.-get lo pointer

STJ
INX
LDA
JMP
Dec_jnot3:

Motptr_lo

;working buffer
;X+l
Motor_grp2,X
.-get hi pointer
Dec_mot_end ;go finish load
;

LDA
STA
INX
LDA
JMP
Dec_mot4:
LDA
STA
INX
LDA

Motor_grp3,X
;get lo pointer
Motptr_lo
.-working buffer
,-X*l
Motor_grp3,X
;get hi pointer
Dec_mot_end ;go finish load
;
Motor_grp4,X
.-get lo pointer
Motptr_lo
;working buffer
jX.l
Motnr_nmi ,»
.-get hi pointer

Dec_mot_end:
STA
Motptr_hi
;working buffer
LDA
Stat_2
;system
ORA
»Motor_seek .-flag system
STA
Stat_2
.-update
;
LDA
»Motor_led_rst
.-get me to led timer reload
;
STA
Motor_led_timer
,-how long the motor IR led stays on
More_multi_m:
JSR
Motor_data
LDA
Motor_lo
STA
Which_delay
RTS

,-lst time only get 1st byte
.-get data
;motor delay control
;done

(delay)

•

;

Get next motor data from table according to indirect pointer.

;
;

NOTE:

we are now using DB statments in the motor table
so were back to single byte format.

Motor_data:
LDX
LDA
STA
INC
BNE
INC

DOOM
(Motptr_lo,X)
Motor_lo
Motptr_lo
Mot_dat2
Motptr_hi

,-Get the motor data

;lo byte
,-next
jjmp in no roll over
;rolled over so hi *1

Mot_dat2:
RTS

;

Test motor pulse timer and alternate on i> off to keep motor speed

I constant through battery deterioration.
Endmotor:
LDA
;m
BNE
,-m
LDA
,-m
AND
;m
BNE
,-m
,-m
,-m
;m
;m
<m

LDA
ORA
STA
LDA
STA

Motor_pulse
Endtask_2
Stat_3
»Motor_on
Qnotor_off
Stat_3
»Motor_on
Stat_3
Mon_len
Motor_pulse

;ck pulse timer
;jump if not done
;system
;is it an power on pulse
•jump if uu pulse (set)
;system
; flag
on modi
,-update
,-get length of on puls<
,-set timer

A-49

;mPls_fwd:
;m
LDA
;m
AND
;m
BEQ
;m
LDA
;m
ORA
,-m
AND
;m
JMP
;mPls_rev:
;m
LDA

Stat_2
»Motor_£wd
Pls_rev
Stat_3
»Motor_of£
#Motor_£wds
Plsend

;get system
;ck if set « motor fwd (inc)
;else go reverse
;g#t current status
;turn both motors off
;move motor in fwd dir
;go finish port setup

Stat_3

;m
ORA
HMotor_off
;m
AND
#Motor_revs
;mPlsend:
;m
STA
Stat_3
;m
JMP
Endtask_2
;mQnotor_o£ f :
,-must
;m
LDA
Stat_3
;m
AND
*Ntmot_on
;m
STA
Stat_3
;m
LDA
Moff_len
;m
STA
Motor_pulse
LDA
Stat_3
;m
;zn
ORA
#Motor_off
;m
STA
Stat_3
Endtask_2:
RTS

;get current status
;turn both motors off
;move motor in rev dir

.-done
be on so turn off
;system
;set to power off pulse
;update
;get length of off pulse
;set timer
;get current status
;turn both motors off
;update
;back to Idle rtn

;

Start motor/speech from macro table

;
;
;

Because of conflicts in diagnostic routines, this routine has been
changed to a subroutine. All normal sensors jump here, diag-s call
direct.

Startjnacro:
LDA
*Bored_reld ; reset. bored timer
STA
Bored_timer ;
LDA
STA
LDA
STA

Macro_Lo
; save for sleepy &
Req_macro_lo
;
Macro_Hi
; save for sleepy U
Req_macro_hi

JSR
JMP

Oet_macro
Idle

IR tests
IR tests

;
; done

Getjnacro:
; Motor noise is triggering sound sensor hardware, so this sets the
; previously sound done flag, and the system will not respond to the
; sound sensor until the sound trigger line goes low and clears prev
done.
LDA
ORA
STA

Stat_3
»Sound_stat ;

;system

Stat_3

.•set prev dn

;-end sound flag

A-50

INC
BNE

Age_counter ;rolls over tc inc age
Same_age
;jump if no roll over

I
;

AQE INCR14NT uses bit 7 to double
LDA
Age
;get bit 7
AND
«80h
;get
BNE
Roll_age
;bit 7 set
LDA
Age
ORA
*80h
;set bit 7
STA
Age
;update
.TMP
Same_age
; done

Roll_age:
INC
LDA
AND
STA
CLC
SBC
BCC
LDA
STA

age counter
- set = counter rolled over twice
bit 7
so inc age
for next counter roll over

Age
Age

;just grew up some

»07h
Age

;clear bit 7

103
Same_age
*03
Age

,-make sure it isnt > 3
.•jump if <4
;max age

(0-3 age)

;

Same_age:
end age

LDA
ORA
STA
CLC
ROL
ROL
LDX
LDA
CMP
BEQ
CMP
BEQ
CMP
BEQ
acrol:
LDA
STA
INX
LDA
JMP
Dec_macro2:
LDA
STA
INX
LDA
JMP
Dec_macro3:
LDA
STA
INX

Stat_2
#Macro_actv
Stat_2
Macro_Lo
Macro_Hi

;system
;flag request
.•update
;do speech
.•move hi bit to carry A get i2-s offset
.-move curry into one of four

Macro_Lo

.■offset ptr

Macro_Hi
*03
Dec _macro4

;get current group pointer
;is it table group 4
;jump if is
*02
;is it table group 3
Dec_»acro3
.-jump ii is
*01
;is it table group 2
Dec_macro2
.•jump if is
;table group 1
Macro_grpl,X
;get lo pointer
Macro_Lo
.■working buffer
;X*1
Macro_grpl,X
;get hi pointer
Dec_roacro_end
;go finish load
Macro_grp2,X
;get lo pointer
Macro_Lo
;vrorking buffer
; X+l
Macro_grp2,X
jget hi pointer
Decjnacro_end
;go finish load
Macro_grp3,X
;get lo pointer
Macro_Lo
;working buffer
;X+1

LDA
JMP
Dec_macro4:

Macro_grp3.X

;get hi pointer

Dec_macro_end
j

;go finish load

LDA
Macro_grp4,X
;get lo pointer
STA
Macro_Lo
;working buffer
INX
; X+l
LDA
Macro_grp4,X
;get hi pointer
Dec_^iacro_end:
STA
RTS

Macro_Hi

.-working buffer

I
l

!

;
;

This group of speech & misc routines are used for the various game
play modes, triggered by the easter egg.

;

REMEMBER TO CLEAR GAME ACTIVE STATUS WHEN DONE

; NOTE:
;
;

Otomah should have a delay before the word to seperate this game
from the speech generated by the last sensor that triggered
this game.

Otomah_lo
Otomah_hi

EQU
EQU

Fortdelay_lo
Fortdelay_hi

»54h
*00

.-using macro 84 for 1st word
,-hi byte adrs 84 = 054h

EQU
EQU

*66h
*00h

.-using macro 102 for delay between speech
;hi byte adrs 102 * 066h

Game_fortune:
LDA
AND
BNE
LDA
ORA
STA

Stat_5
*temp_gaml
Gam_fort2
Stat_5
»temp_gaml
Stat_5

.-flag used at start of game
;see if prev done
.-jump if done
.-flag used at start of gome
.-set prev done
;update

LDA
STA
LDA
STA
JSR
JSR

*Otomah_lo
Macro_Lo
»Otomah_hi
Macro_Hi
Getjnacro
Notrdy

,-get macro lo byte
;save lo byte of Macro tabxe entry
,-get macro hi byte
.-save hi byte of Macro table entry
,-go start motor/speech
,-Do / get
status for speech and motor

LDA
STA

#GameT_reload
Sensor_timer

.-reset game timer
;

Test_all_sens

;go check all sensors

Gam_fort2:
JSR

A-52

LDA
AND
BNE

Stat_4
»Do_back
Gamw.fort4

LDA
Stat_4
AND
»Do_invi,. ;
BEQ
Ganv_fort3
Gam_fort2a:
JSR
JMP

;get sensor status
;ck if back sw req
jump if requested
,-get sensor status
;ck if tilt sw req
,-jump if not requested

Clear_all_gam
End_all_games

;go clear all status, cancle game
,-done go say 'me done*

Gam_fort3:
LDA
BEQ
JMP

Sensor_timer
;ck for no action timeout
Gam_fort2a
;clear all if timed out
Idle
;wait for switch

Gam_fort4:
LDA
AND
STA

Stat_4
;get sensor status
*Nt_do_back ;back sw req
Stat_4
,-clear req

LDA
STA

*GameT_reload
Sensor_timer

LDA
STA
LDA
STA
JSR
JSR

»Fortdelay_lo
;get macro lo byte
Macro_Lo
;save lo byte of Macro table entry
VFortdel ay_hi
;get macro hi byte
Macro_Hi
{save hi byte of Macro table entry
Get._macro
;go start motor/speech
Notrdy
;Do / get
status for speech and motor

LDA
ORA
STA

Stat_l
*Half_age
Stat_l

;get system
{force table 1 or 2 in *Decid_age*
;update

LDA
STA

»80h

IN_LAT

{get random/sequential split
,-save for random routine

LDX
LDA
JSR

»0u
«10h
n_seq

{make sure only gives random
,• get number of random selections
;go decide random/sequential

111111! 11! 11111

{• ;; {

;reset game timer
;

Acc holds random number 0-F

JSR
LDX
LDA
STA
STA
INX

Decid_age
{do age calculation for table entry
TEMPO
{age offset
Fortyes_Sl.X
;get lo byte
Macro_Lo
;save lo byte of Macro table entry
Req_macro_lo
;save for game
{

LDA
STA
STA

Fortyes_Sl,X
iget hi byte
Macro_Hi
,-save hi byte of Macro table entry
Req_macro_hi
;save for game

LDX
100
{Offset
Fort_Name2:
LDA
Ck_Fort_name,X
,-ck lo byte
CMP
*FFh
,-ck for end of table
BEQ
CMP

-.

(note 255 cant execute)

Fort_Name_dn
,-done if is
Macro_Lo
,-ck against last speech request

A-53

BNE
INX
LDA
CMP
BNE
JMP
Not_Fort2:
INX
Not_Fort3:
INX
JMP

Not_Port2

;jump if not
;to hi byte
Ck_Fort_name, X
,-ck hi byte
Macro_Hi
jck against last speech request
Not_Fort3
,-jump if not
Say_Fortname
;speak it

Fort_Name2

{loop til done

Say_Fortnamoi
LDA
CLC
ROL
TAX
LDA
STA
INX

Name

{current setting for table offs-

A

{2 ' s ’——if

Name_table.X
.-get le byte
Macro_Lo
.-save ic byte of Macro table entry

LDA

Name_table. X

STA
JSR

Macro_Hi
Get_macro

ge-

JSR

Notrdy

LDA
STA

Req_macrc_lo
.-recover for game
Macro_Lo
,-set game speech

LDA
STA

Req_macrc_hi
;recover for game
Macro_Hi
.-set game speech

; save be
;gc star

of Macro table entry
or speech

;Do

get

status for speech and motor

Fort_Name_dr.:
JMP
{

Start_macro ,-go set group.' table pointer for motor A speh

compare macro to see if we are going to call Furby’s name first.

Ck_Fort_name:
DW
69
DW
77
DB

FFh.FFh

{FF FF

is

table terminator

Game_Rap:
JMP
Grap_2:
JSR
LDA
BEQ
JSR
LDA
BEQ
AND
BNE
R*P_over:
JSR
JMP

Do_rap

{1st time thru

Simon_timer {decrement bored timer
Bored_timet
system elapsed time
Rap_over
{jump if 0
Test_all_sens
,-go check all sensors
Stat_4
,-get sensors
Grap_2
{loop if none
*Do_snd
,-ck for mic
Do_rap
;any other sensor stops game
Clear_all_gam
End_a1l_games

,-go clear all status, cancle
{done go say "me done*

A-54

Do_rapi
LDA
STA
LDA
STA
LDA
STA
LDX
LDA
JSR
LDA
AND
CLC
ROL
TAX
LDA
STA
INX
LDA

•00
.-clear all senior flags
Stat_4
;
»GameT_reload
;get reload
Bor#d_timer ;reset
,-get randam/sequential split
• 80h
IN_DAT
.-save for random routine
•OOh

•lOh
Ran_seq
TEMPI
• 03h

.-Bake sure only gives random
;get number of random selections
;go get random selection
;get decision
;got 1 of 4 decision

;2's offsett
Rapsong.X
Macro_Lo

;get macro lo byte
;save lo byte of Macro table entry

Rapsong.X
Macro_Hi
Getjnacro
Notrdy
Grap_2

jget macro hi byte
;save hi byte of Macro table entry
;go start motor/speech
;Do / get
status for speech and motor
; loop

Rapsong:
DW

395

.-macro RAP song pointer

DW
DW

396
407

;

DW

416

STA
JSR
JSR
JMP

!
HidePeek_lo EQU
HidePeek_hi EQU

•DBh
• Olh

.-using macro 475 for startp
;hi byte adrs 475 = lDBh

Hidsklost_lo
Hidsklost_hi

EQU
EQU

»D8h
•Olh

Hidskwon_lo EQU

»B7h
•Olh

;using macro 439 for 'whopee

Hidskwon_hi EQU

'hide me"

spch

.-using macro 472 for "nana nana nana
;hi byte adrs 472 = lD8h

;hi byte adrs 439 = lB7h

Game_hideseek:
LDA
STA

• 80
HCEL_LO

,-set timer for 1 min (80 * .742)
;use temp ram for timer

LDA
CLC
ROL
TAX
LDA
STA
INX

Name

;current setting for table offset

A

; 21■ comp

LDA
STA
JSR
JSR

.-get lo byte
Name_table.X
,- save lo byte of Macro table entry
Macro_Lo
;
Name_table,X
.-get hi byte
,- save hi byte of Macro table entry
Macro_Hi
;go start motor/speech
Get_jnacro
;Do / get
status for speech and motor
Notrdy

LDA

#HidePeak_lo

STA
LDA
STA
JSR

MacroJLo
;*ave lo byta of Macro table entry
#HidePeek_hi
.-get macro hi byte
Macro_Hi
nave hi byte of Macro table entry
Oat_raacro
; go start motor/speech

;got macro lo byta

JSR

Notrdy

;Do / get

status for speech and motor

0am_hide2:

;

JSR

HideS_timex

;go dec bored timer without Idle

JSR
LDA
AND
BEQ
JMP
JSR
JMP

Test_all_se.i»
;go check all sensors
Stat_4
;get all switches
#Do_invert
;ck if inverted
Gam_hide2a
;jump if not inverted
Gam_hide9
.-abort game and call game lost speech
Clear_all_gam
;go clear all status, cancle games
End_all_games
.-done go say "me done*

Ganv_hide2a:
LDA
BNE

HCEL_LO
Gam_hide2

;ck for no action timeout
.-wait till done to start game

LDA
STA

#00
Stat_4

.-clear all sensor flags

LDA
STA

#242
HCEL_LO

.-set timer for 3 min
;reset

#80h
IN_rAT

.-get random/sequential split
.-save for random routine

#00
#10h
Ran_seq
•OF

.-make sure only gives random
.-get number of random selections
;go decide random
.and nnot >16

Gam_hide4
LDA
STA
LDX
LDA
JSR
AND
TAX
LDA
STA
Gam_hide5:
JSR
LDA
AND
BNE

(242

*

.742)

{0-0f>

Hide_time.X .-get random timer for speech
Sensor timer
;

Test_all_sens
.-go check all sensors
Stat_4
;get sensor status
#Do_tilt
,-ck if tilt sw req
Gam_hide8
,-jump if requested

JSR
LDA
BEQ

HideS_timer
HCEL.LO
Ganv_hide9

LDA
BNE

Sensor_timer
.-get randcm speech timer
Gam_hide5
,-loop till done

;go dec bored timer A sensor_timer
,-get elapsed
.-game over

SAV RANDOM WORDS TCi HELP FIND HIM
LDA
STA
LDX
LDA
JSR
LDA

«80h
IN_DAT
•OOh
#10h
Rai._seq
TEMPI

,-get random/sequential split
;save for random routine
.-make sure only gives random
.-get number of random selections
;go get random selection
;get decision

A-56

CLC
ROL
TAX

A

;2's offsett

LDA
STA
INX
uDA
STA
JSR
JSR
JMP

Hideseek.X
Macro_Lo

;get macro lo byte
jaave lo byte of Macro table entry

Hideseek.X
Macro_Hi
Getjnacro
Notrdy
Gam_hide4

;get macro hi byte
;aave hi byte of Macro table entry
;go atart motor/speech
;Do / get
status for speech and motor

Gam_hide8:

;GAME WON SPEECH

JSR

Clear_all_gam

LDA
STA
LDA
STA
JMP

#Hidskwon_lo
,-get macro lo byte
Macro_Lo
;save lo byte of Macro table entry
#Hidskwon_hi
.get macro hi byte
Macro_H.i
; save hi byte of Macro table entry
Start_macro ;go set group/table pointer for motor & spch

Gam_hide9:
JSR
LDA
STA
Gant_hide9a:
LDA
STA
LDA
STA
JSR
JSR
DEC
BNE
JMP

BEQ
DEC
HideS_t2:
LDA
BEQ
DEC

Clear_all_gam
;go clear all status, cancel game
#03
;number of times to call ’nana"
HCEL_HI
#Hidsklost_lo
;get macro lo byte
Macro_Lo
;save lo byte of Macro table entry
#Hidsklost_hi
.-get macro hi byte
Macro_Hi
,-save hi byte of Macro table entry
Cet_macro
,-go start motor/speech
Notrdy
;Do / get
status for speech and motor
HCEL_HI
Gam_hide9a
Idle

;loop
;
,-done

DB
DB
DB
DB

;if >0 then 742 mill seconds have passed

HideS_tdn
;bypass if 0
#00
;clear it
Milisec_flag
;reset
HCEL_LO
;get current timer * 742mSec sec
HideS_t2
HCEL_LO

jdo nothing if 0
;-l

Sensor_timer

;get current timer * 742mSec sec

HideS_tdn
jdo nothing if 0
Sensor_timer
;-l

HideS_tdn:
RTS

Hide_time:
DB

cancel game

.GAME LOST SPEECH

HideS_timer:
LDA
Milisec_flag
BEQ
LDA
STA
LDA

;go clear all status,

;

;for random time between calls when hiding
6
;5 sec
(x * .742)
7
8
9
10

A-57

DB
DB
DB
DB
DB
DB
DB

11
12
13
14
15
16
17

DB
DB
DB
DB

18
19
20
10

Hidsseak:
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
EW

;

;15 sec

;table of sound when Furby is hiding t waiting to be found
437
438
95
96
97
451
452
437
437
438
95
96
97
451
452
438

Furby - Says

;;;;

; Four byte of ram allocated for game and 5th byte is game counter.
; On start, get 4 random numbers and set the game counter to 4
sequences.
I Furby plays the 4 sounds and waits for the sensors to respond. If

its

i wrong, then start over at beginning and if it is right then say
whoppee
1 and increment to 5 sounds,,,,,, until all 16. If 16 correct then get
j 4 new random numbers and continue with 16 sequences.
; The invert switch bails out of the game.

simondelay_lo
Simondelay_hi

EQU
EQU

«66h
• 0 Oh

.-using macro 102 for delay between speech
jhi byte adrs 102 = 066h

Listen_jne_lo
Listen_jme_hi

EQU
EQU

DAh
Olh

;on start up he say “Listen Me’
.■macro 474 = IDAh

Simon_fmt_lo
•tickle"
Simon_frnt_hi

EQU

•AEh

.■using macro 430

EQU

lOlh

;hi byte adrs 430 =

Simon_back_lo

EQU

*AFh

.-using mcro 431

Simon_back_hi

EQU

tOlh

;hi byte adrs 431

for simon chooses
1 AEh

for simon chooses

"pet

= lAFh

A-58

Simon_snd_lo
Siraon_snd_hi

EQU
EQU

IBOh
iOlh

;using macro 432 for simon chooses
;hi byte adrB 432 « IBOh

'sound

Simon_lght_lo
Simon_lght_hi

EQU
EQU

»Blh
#01h

.-using macro 433 for simon chooses
;hi byte adrs 433 = lBlh

“light

Skeyfrnt_lo EQU
Skeyfrnt_hi EQU

•OFh
»00h

;using macro 15 for user feed back
.-use for 'front'

Skeybck_lo
Skeybck_hi

EQU
EQU

»B2h
»01h

;using macro 434
.-use for 'back'

Skeylght_lo EQU
Skeylght_hi EQU

»B3h
»01h

.-using macro 435 for user feed back
,-use for 'light'

Skeysnd_lo

EQU

Skeysnd_hi

EQU

*B4h
»01h

.-using macro 4 36 for user feed back
,-use for 'sound'

Simonlost_lo

EQU

#D8h

Simonlost_hi

EQU

»01

;

;

for user feed back

lost game is macro 472

Available ram not in use during this game

;HCEL_LO

Counter of which sensor were on

;HCEL_HI
Random play ram 1
; BIT_CT “*
- • Random play ram 2
;Task_ptr
Random play ram 3
;Bored_count
Random play ram 4
.-TEMP5

Random save ram 1

( was TOA_INT )

TEMP5 used in

*RAN_SEQ’
;Temp_ID2
Random save ram 2
,-Temp_ID
Random save ram 3
;Learn_temp Random save ram 4

Game_simon:
; do delay before start of game
LDA
STA
LDA
STA
JSR
JSR

»Simondelay_lo
;get macro lo byte
Macro_Lo
;save lo byte of Macro table entry
»Simondelay_hi
,-get macro lo byte
Macro_Hi
,-save hi byte of Macro table entry
Oetjnacro
;go start motor/speech
Notrdy
;Do / get
status for speech and motor

LDA

Name

jcurrent setting for table offset

CLC
ROL

A

;2's comp

TAX
LDA
STA

Name_table,X
jget lo byte
Macro_Lo
;save lo byte of Macro table entry

I NX
LDA
STA
JSR
JSR

Name_table,X
,-get hi byte
Macro_Hi
,-save hi byte of Macro table entry
Getjaacro
;go start motor/speech
Notrdy
;Do / get
status for speech and motor

A-59

LDA
STA
LDA
STA
JSR
JSR

»Listen_me_lo
;get macro lo byta
MacroJLo
.-save lo byta of Macro tabla antry
#Listen_me_hi
;gat macro lo byta
Macro_Hi
;aave hi byte of Macro tabla antry
Get_macro
;go start motor/apeach
Notrdy
;Do / get
atatua for apaach and motor

LDA

«Simondelay_lo

STA
LDA
STA
JSR
JSR

Macro_Lo
;save lo byte of Macro tabla antry
#Simondelay_hi
;get macro lo byta
Macro_Hi
;save hi byte of Macro table entry
Oet_macro
;go start motor/speech
Notrdy
;Do / get
status for speech and motor

LDA
GS_rentr:
STA
STA
JSR
Simonl:
JSR
JSR
DEC
BNE

#04
HCEL_LO
IN_DAT
Simon_random

;gat macro lo byta

;number of sensors in 1st game
,-load counter
;save for later use
;go load 2 grps of 4 ram locations

LDA
HCEL_HI
;get
1st ram location
Simon_sensor
,-go to speech
Rotate_play ;get next 2 bits for sensor choice
IN_DAT
;-1 (number of sensors played this game)
Simonl
;loop til all speech done

JSR
Recover_play
;reset random rams
LDA
#GameT_reload
;reset timer
STA
Bored_timer ;set
LDA
#00
STA
Stat_4
;clear all sensors
LDA
HCEL_LO
;get counter
STA
IN_DAT
;reset it
Simon2:
JSR
Test_all_sens
;go check all sensors
LDA
Stat_4
;get em
BNE
Simon3
;jump if any triggered
JSR
Simon_timer ;go check for timeout
LDA
Bored_timer ;
BNE
Simon2
;loop if not
JMP
Simon_over
.'bailout if 0
Simon3:
; do to lack of time I resort to brute force ... YUK....
LDA
Stat_4
,-get which sensor
CMP
#08h
{front sw
BNE
Simon3a
{jump if not
LDA
#Skeyfmt_lo
{get macro lo byte
STA
Macro_Lo
;save lo byte of Macro table entry
LDA
#skeyfrnt_hi
.-get macro hi byte
JMP
Simon3dn
;go speak it
Simon3as
CMP
BNE
LDA
STA
LDA
JMP

#10h
Simon3b
#Skeybck_lo
Macro_Lo
#Skeybck_hi
Simon3dn

•.

(back sw
{jump if not
{get macro lo byte
;save lo byte of Macro table entry
{get macro hi byte
{go speak it

Simon3b:
CMP #04h

{light

A-60

BNE
LDA
STA
LDA
JMP
Simon3ct
CMP
BNE
LDA
STA
LDA
JMP
Simon3d:
CMP
BEQ
LDA
STA
JMP
Simon3e:
JMP
Simon3dn:
STA
JSR
JSR

AND
TAX
LDA
CMP
BNE
LDA
STA
JSR
DEC
BNE
JSR
JSR
INC
CLC
LDA
STA
SBC
BCS
JMP
Simon4:
LDA
JMP

till;;

; jump if not

•Skeylght_lo
,get macro lo byte
Macro_Lo
.-save lo byte of Macro table entry
*Skeylght_hi
;get macro hi byte
Simon3dn
;go speak it
#01h

;sound

Simon3d
»Skeysnd_lo
Macro_Lo
*Skeysnd_hi
Simon3dn

{jump if not
;get macro lo byte
;save lo byte of Macro table entry
;get macro hi byte
;go speak it

#Do_invert
Simon3e
• 00

;?
{jump if is invert
{

Stat_4
Simon2

{clear sensor flags
{ignore all other sensors

loop up

Simon_over

{bail out if is

Macro_Hi
Get_macro
Notrdy

.-save for macro call
;go start motor/speech
{Do / get
status for speech and motor

LDA
*03

HCEL_HI
,-get
1st ram location
;bit Oil
;point co interpret table entry

Simon_convert.X
;translat game to sensors
Stat_4
{ck for correct sensor
Simon_lost
,-done if wrong
*00
Stat_4
;clear all sensors
Rotate_play ;get next 2 bits for sensor choice
IN_DAT
{-1 (number of sensors played this game)
Simon2
Simon_won
{game
Recover_play
HCEL_LO

{loop til all sensors done
won
;reset random rams
,• increase number of sensors in next game

HCEL_LO
IN_DAT
*16
Simon4
Simon1

,• get current
{reset game sensor counter
:ck if max number of sensors
;
{loop up

116

,-set to max
;start next round

QS_rentr

Simon subroutines

Simon_lost:
{
LDA
;
CMP
1

Simon3c

BEQ

Stat_4
»Do_invert
Simon_over

,-ck for invert sw to end game
;?
{bail out if is

LDA

tSimonlost_lo

,-get macro lo byte

A-61

STA
LDA
STA
JSR;
JSR
JMP

Macro_Lo
.-save lo byte of Macro Cable entry
tSimonlost_hi
jget macro hi byte
Macro_Hi
;save hi byte of Macro table entry
Oetjiacro
;go start motor/speech
Notrdy
* Do / get
status for speech and motor
Game_simon
.-start at beginning

Simon_won:
LDA
CLC

HCEL_LO

ROL
TAX
LDA
STA
INX
LDA

A

STA
JSR
JSR
RTS

Macro_Hi
Get_macro
Notrdy

;save hi byte of Macro table entry
;go start motor/speech
,-Do / get
status for speech and motor

Bored_count
Task_ptr
BIT_CT
HCEL_HI
Bored_count
Task_ptr
BIT_CT
HCEL_HI

;shf1 to carry
,-carry 4 shfl to carry
;carry 4 shfl to
;carry 4 shfl to
;shfl to carry
;carry 4 shfl to carry
;carry 4 shfl to
;carry 4 shfl to

Rotate_play:
ROR
ROR
ROR
ROR
ROR
ROR
ROR
ROR
RTS

,-game number

(how many steps)

;2's offsett for speech win table

Simon_won_tbl X
,-get lo byte
Macro_Lo
;save lo byte of Macro table entry
Simon_won_tbl.X

;get hi byte

carry
carry throw away lo bit

carry
carry throw away lo bit

!

Recover_play:
LDA
TEMP5
STA
HCEL_HI
LDA
Temp_ID2
STA
BIT_CT
LDA

Temp_ID

STA
LDA
STA
RTS

Task_ptr
Learn_temp
Bored_count

,-recover random data

I

Simon_over:
JSR
LDA
STA
JMP

Clear_all_gam
»00

,-go clear all status,

cancel game

Task_ptr
,- reset for normal use
End_all_games
.-done go say "me done*

Simon_sensori
AND
»03h
;get senosr
CLC
RCL
A
;2b offset
TAX
;offset
LDA
Psimon_table,X
;
STA
Macro_Lo
;
INX
LDA

;
Psimon_table,X

STA

Macro_Hi

;

,-save hi byte of Macro table entry

JSR
JSR
RTS

Get_jnacro
Notrdy

;go stare motor/speech
;Do / gat
status for speech and motor

;
Simon_delay:
LDA
STA
LDA
STA

#Simondelay_lo
,-get macro
Macro_Lo
;save lo byte of
#Simondelay_hi
,-get macro
Macro_Hi
;save hi byte of

JSR
JSR
RTS

Get_macro
Notrdy

;go start motor/speech
;Do / get
status for speech and motor
i

S imon_ random :
JSR
Random
STA
TEMP5
STA
HCEL_HX
JSR
Random
STA
Temp_ID2 .
STA
BIT_CT
JSR
Random
STA
Temp_ID
STA
Task_ptr
JSR
Random
STA
Learn_temp
STA
Bored_count
RTS

,-get random number

(0-255)

.-get random number

(0-255)

,-get random number

(0-255)

;get random number

(0-255)

Simon_t inter:
LDA
Milisec_flag
;if >0
BEQ
Simon_tdn
;bypass if 0
LDA
#00
;clear it
STA
Milisec_f lag
.-reset
LDA
BEQ
DEC
Simon_tdn:
RTS

lo byte
Macro table entry
hi byte
Macro table entry

then 742 nsili seconds have passed

Bored_timer ;get current timer • 742mSec sec
Simon_tdn
;do nothing if 0
Bored_timer ;-l

Psimon_table:
DW
430
DW
431
EW
433
DW
432

,-front switch
,-back switch
;sound sensor
;light sensor

(
(
(

00
01
11

)
)
)

(

10

)

•
Sixnon__convert:

.•converts game

table to sensor table

DB
DB
DB
DB

08h
lOh
04h
Olh

;
Sixnon_won_tbl s
DW
72
DW
72
DW
72
DW
72
DW
DW

72
72

(It U snd swaped in table)

;front sw
,-back sw
;light
;sound
;for each game won there is a macro
,- 0 (not used, ,,,, place holder)
j 1 (not used,, ,, place holder)
,- 2 (not used, ,, ,, place holder)
j 3 (not used,,, ,, place holder)
;

4

J

5

(1st game has 4 sensors,

(or re-use them)

each game adds one)

A-63

DW
DW
DW

72
72
3B0

i 6
; 7
; 8

DW
DW
DW
DW
DW
EW
DW

380
380
380
471
471
471
471

;
;
;
j
;
;
;

9
10
11
12
13
14
15

DW

439

,-

16

End_all_games.-

,-when any game ends,

Saygamdn_lo EQU
Saygamdn_hi EQU

»D9h
«01h

they jump here and say done

.-using macro 473 for game over speech
;

LDA
STA

#Bored_reld ;reset bored timer
Bored_timer ;

LDA
STA
LDA
STA
JKP

#Saygamdn_lo
,-get macro lo byte
Macro_Lo
;save lo byte of Hacro table entry
*Saygamdn_hi
.get macro hi byte
Macro_Hi
,-save hi byte of Macro table entry
Start_macro ;go set group/table pointer for motor & spch

;Burp attack egg
Burpsnd_lo
Burpsnd_hi

EQU
EQU

*D6h
llOlh

,-using macro 470
;

for user feed back

Game_Burp:
JSK

Clear_all_gam

LDA
STA

»Bored_reld
Bored_timer

,- reset bored timer

LDA
STA
LDA
STA
JMP

»Burpsnd_lo
Macro_Lo
»Burpsnd_hi
Macro_Hi
Start_macro

;get macro lo byte
;save lo byte of Macro table entry
,-get macro hi byte
,- save hi byte of Macro table entry
•go set group/table pointer :Eor motor i> spch

!

..

,-easter egg says NAME
Game_name:

A-64

JSR

Clear_al l_gam

LEA
STA

#Bored_reld
reset bored timer
Bor*jd_t imer ;

LDA

Name

;current setting for table offset

A

; 2'b comp

CLC
ROL
TAX
LDA
STA
INX
LDA
STA
JMP

Name_table,X
;get lo byte
Macro_Lo
;save Jo byte of Macro table entry
Name_table,X
;get hi byte
Macro_Hi
;save hi byte of Macro table entry
Start_macro ;go set group/table pointer for motor 4 spch

i

;Twinkle song egg
;
;

When song i
we goto dee

;

the invert

>lete, if both front and back switches are pressed
p. That means only the invert can wake us up, not
-tch.

Twinklsnd_lo

EQU

#D5h

;using macro 469

Twinklsnd_hi

EQU

tiOlh

;

Sle.>p_lo

EQU

»A6h

.-using macro 166

Sleep_hi

EQU

ItOOh

;

(before going to sleepl

Game.twinkle:
JSR
LDA
STA

Clear_all_gam
*03
;song counter
HCEL_LO
; set

DEC
LDA
AND
AND

HCEL_LO
;-l
Stat_2
;Get system clear done flags
»Not_tch_ft ;clear previously inverted flag
#Not_tch_bk ;clear previously inverted flag

STA

Stat_2

LDA
STA

»Bor#d_reld ; reset bored ti.aer
Bored_timer ;

LDA
STA
LDA
STA
JSR
JSR

#Twinklsnd_lo
;get macro lo byte
Macro_Lo
;save lo byte of Macro table entry
»Twinklsnd_hi
;get macro hi byte
Macro.Hi
;save hi byte of Macro table entry
Get_macro
;go start motor/speech
Notrdy
;Do / get
status for speech and motor

JSR
JSR

Test_all_sens
Test_all_sens

LDA
AND

Stat_4
*18h

CMP
BEQ
LDA

*16h
Start_sleep ;if both switches pressed, goto sleep
HCEL_LO
.-get song loop counter

BNE

Gtwnk

Gtwnk:

,-update

;get status
;get status 2nd time for debounce

.switch status
;isolate front and back switches

;loop

A-65

JMP

Idle

;not so egg complete

LDA
STA
LDA

»Sleop_lo
Macro_Lo
*Sleep_hi

STA
JSR
JSR
LDA
STA
JMP

Macro_Hi
Get_macro
Notrdy
#llh
Deep_sleep
QoToSleep

.-get macro lo byte
,-save lo byte of Macro table entry
; get macro hi byte
; save hi byte of Macro table entry
; go start motor/speech
;Do / get
status for speech and motor
,-set deep sleep mode

Start_sleep:

;Rooster loves you
Roostersnd_lo
Roostersnd_hi

;nity-night

egg
EQU
EQU

»D4h
#01h

.-using macro 468

Game_rooster:

;
;
;

JSR

Clear_all_gam

LDA
STA

«Bored_reld ;reset bored timer
Bored_timer ;

LDA
STA
LDA

#Roostersnd_lc
.-get macro lo byte
Macro_Lc
;save lo byte of Macro table entry
#Roostersnd_hi
.get macro hi byte

STA
JMP

Macro_Hi
.-save hi byte of Macro table entry
Start_ma^ro ;go set group/table pointer for motor & spch

If a game requires sensor input without triggering the normal
sensor cycle for speech, then this rtn will check all sensors for
change and tht calling game can check for the appropriate trigger
DO NOT USE I.R.

SENSOR SINCE ITS RAM LOCATIONS ARE USED IN GAMES

Test_all_sens:
JSR
Get_back
JSR
Get_Tilt
JSR
Get_invert
JSR
Get_front
JSR
Get_light
JSR
Get_sound
JSR
RTS

Get_feed
back to game

.........*.

;

;*•*** Side

'll switch triggers when ball

falls off center and I/O goes

A-66

hi.
CK_tilt:
JSR
BCS
JMP

;tilt sensor
Oot_Tilt
;go ck for sensor trigger
Norraal_tilt ;go fini normal spch/motor table
Idle
;no request

Oet_Tilt:
LDA
AND
BNE

;this is the subroutine entry point.
Port_D
;get I/O
#Ball_side
;ck if we tilted on side
Do_bside
;jump if hi

LDA
AND
STA
Side_out:
CLC
RTS

Stat_2
»Not_bside
Stat_2

;Get system
;clear previously on side flag
;update
;clear indicates no request

Do_bside:
LDA
AND
BNE
LDA
ORA
STA

Stat_2
#Bside_dn
Side_out
Stat_2
#Bside_dn
Stat_2

.-system
;ck if previously done
.-jump if was
;get system
;flag set .only execute once
;update system

LDA
ORA
STA
SEC
RTS

Stat_4
»Do_tilt
Stat_4

;game mode status
;flag sensor is active
;update

Normal_tilt:

.-carry set indicates sensor

is triggered

;Idie rtn jumps here to complete speech/motor table

also for testing, when tilt is triggered, it resets all
easter egg routines to allow easy entry of eggs.

;

JSR

Clear_all_gam

JSR
BCS
JMP

Life
Mcre_tilt
Idle

;go tweek health/hungry counters
;if clear then do sensor else bail
;done

LDA
STA

»Tilt_split
IN_DAT

;get random/sequential split
;save for random routine

LDX
LDA
JSR

»Seq_tilt
»Ran_tilt
Ran_seq

;get how many sequential selections
;get number of random elections
;go decide random/sequential

More_tilt:

A-67

LDX

Sensor_timer

BCS

Tilt_ran

LDA
BEQ

Sensor_timer
Tilt_reset
;yep

;Random mode when carry SET

LDA

Tilt_count

STA

BIT_CT

LDA
STA
LDA

;ck if timed out since last action
.

;save current
;temp store

INC
Tilt_count
LDA
Tilt_count
CLC
SBC
#Seq_tilt-l
BCC
Tilt_side
LDA
»Seq_tilt-l
STA
Tilt_COUnt
JMP
Tilt .side
Tilt_reset:
LDA
STA
STA
Tilt_side:

;get current for training subroutine

*00
BIT_CT
Tilt_count

;if not then next table entry
;get
;ck if > assignment
{jump if <
;dont inc off end
;
;do it
;reset to 1st entry of sequential
;temp store
;

»Global_time
Sensor_timer
BIT_CT

;get timer reset value
;reset it
;Arc holds value for subroutine

Tilt_ran:
STA
LDA
(offset)

......
hi.

IN_DAT
*Tilt_ID

.-save decision
.-which ram location for learned word count

JSR
LDA

Start_learn .-go record training info
IN DAT
;get decision

JSR
LDX
LDA
STA
I NX

Decid_age
TEMPO
Tilt_Sl,X
Macro_Lo

;do age calculation for table entry
;age offset
.-get lo byte
.-save lo byte of Macro table entry

LDA
STA

Tilt_Sl,X
Macro_Hi

.get hi byte
,-save hi byte of Macro table entry

JMP

Start_macro ;go set group/table pointer for motor h spch

inverted ball

Ck_inverts
JSR
BCS
JMP
Get_invert:

switch triggers when ball

;

touches top and I/O goes

upside down sense

Get_invert
;go ck for sensor trigger
Normal_invert
;go fini normal spch/motor table
Idle
;no request
;this is

the subroutine entry point.

A-68

LDA
AND

Port_D
»Ball_invert

BNE

Do_binvrt

;jump if

Stat_2
•Not_binvrt

;Oet system
;clear previously inverted flag

LDA
AND
STA
Invrt_out:
CLC
RTS

;get I/O
;ck if we upside down

Stat_2

inverted

(hi)

;update
.•clear carry indicates no sensor change

Do_binvrt:
LDA
AND
BNE
LDA
ORA
STA

Stat_2
»Binvrt_dn
Invrt_out

Stat_2

;get system
;ck if prev done
.•jump if was
;get system
.•flag set .only execute once
.•update system

LDA
ORA
STA

Stat_4
»Do_invert
Stat_4

.game mode status
.-flag sensor is active
;update

Stat_2
#Binvrt_dn

SEC

;set indicates sensor is triggered

RTS
Normal_invert:

JSR

Life

BCS

More_invert

JMP
Idle
More_invert:

;go tweek health/hungry counters
;if clear then do sensor else bail
;done

;**■****•••••••••••••••••••••*••••••*••••*••*•*•••••*.
;get random/sequential split
.■save for random routine

LDA

»Invert_split

STA

IN_DAT

LDX
LDA
JSR

•Seq_invert
»Ran_invert
Ran_seq

LDX

Sensor_timer

BCS

Invrt_md

LDA
Bx.Q

Sensor_timer
Invrt_reset ;y«p

LDA
STA

Invrt_count
BIT_CT

.-save current
,-temp store

INC
LDA

Invrt_count
Invrt_count

;if not then next table entry
;get

.get how many sequential selections
.get number of random elections
;go decide random/sequential
;get current

for draining subroutine

.•Random mode when carry SET
,-ck if

timed out since last action

CLC
SBC
BCC
LDA
STA
JMP
Invrt_r#set:

»Seq_invert-l
,-ck i£ > assignment
Invrt_set
,-jump if <
»Seq_invert-l
;dont inc off end
lnvrt_count ;
Invrt_set
;do it

LDA
STA
STA
Invrt_set:
LDA

*00
BIT_CT
Invrt_count

STA
LDA

;reset

to 1st entry of sequential
;temp store

;

tOlobal_time

.-get timer reset value

Sensor_timer
BIT_CT

;reset it
.-speech to call

Invrt_rnd:
STA
LDA
(offset)
JSR
LDA
JSR
LDX
LDA
STA
INX
LDA
STA
JMP

IN_DAT
»lnvert_ID

.-save decision
,-which ram location for learned word count

Start_learn .-go record training info
IN_DAT
;get back word to speak
Decid_age
TEMPO
Invrt_Sl,X
Macro_Lo

;do age calculation for table entry
;age offset
,-get lo byte
;save lo byte of Macro table entry
;
Invrt_Sl,X
.-get hi byte
Macro_Hi
;save hi byte of Macro table entry
Start_macro ;go set group/table pointer for motor & speh

Ck_back:

;Back touch sensor

JSR
BCS

Get_bac>'.
Normal_back

;go ck for sense- trigger
;go fini normal speh/motor table

JMP

Idle

;no request

Get_back:
LDA
AND
BEQ
LDA
AND
STA.
Tchl_out:
CLC

;this is the subroutine entry point.
Port_C
.-get I/O
#Touch_bck
;ck if Kirby's back is rubbed
Do_tch_bk
{jump if lo
Stat_2
.-Get system
»Not_tch_bk {clear previously inverted flag
Stat_2

{update
{dear carry for no sensor request

RTS

{

Do_tch_bk:
LDA
AND
BNE

Stat_2
*Tchbk_dn
Tchl_out

;get system
;ck if prev done
{jump if was

A-70

LDA
ORA

Stat_2
#Tchbk_dn

STA

Stat_2

LDA

Stat_4
*Do_back
Stat_4

ORA
STA
SEC
RTS

;get system
;flag set .only execute once
.-update system
,-game mode status
,-flag sensor is active
.-update
,-set indicator sensor is triggered
s

Normal_back:

;enter here to complere sensor speech/motor

Life
More_back
Idle

; go tw». k health/hungry counters
;if clear then do sensor else bail
; done

LDA
STA

»Back_split
IN_DAT

;get

LDX
LDA
JSR

»Seq_back
#Ran_back
Ran_seq

.-get how many sequential selections
.-get number of random elections
,-go decide random/sequential

LDX

Sensor_timer

BCS

Back_rnd

LDA
BEQ

Sensor_timer
Back_reset
;yep

LDA
STA

Tchbck_count
BIT_CT

{temp store

INC
LDA
CLC
SBC
BCC
LDA
STA
JMP
Back_reset:

Tchbck_count
Tchbck_count

;if not then next
.-get

LDA
STA
STA
Back_set:
LDA
STA

#00

JSR
aCS

JMP
More_back:

LDA

random/sequential split
;sa
for random routine

.-get current

for training subroutine

,- Random mode when carry SET
;ck if timed out since last action

;save current

table entry

»Seq_back-l ,-ck if > assignment
Back_set
;jump if <
#Seq_back-l ;dont inc off end
;
Tchbck_count
Back_.oet
,- do it

BIT_CT
Tchbck_count
»Olobal_time
Sensor_timer
BIT_CT

;reset to 1st entry of sequ*atial
,-temp store
;
,- get timer reset value
;reset it
,-get current pointer to tables

Back_md:
STA
LDA

IN_DAT
»Back_ID

,-save decision
.-which ram location for learned word count

A-71

(offset)
JSR
LDA
JSR
LDX
LDA
STA
INX
LDA
STA
JMP

Start_leam
IN_DAT

;go record training info
;get back word to speak

Decid_age
TEMPO
Tback_Sl,X
Macro_Lo

;do age calculation for table entry
.-age offset
;get lo byte
;save lo byte of Macro table entry

Tback_Sl,X
Macro_Hi
Start_macro

)
;got hi byte
,-save hi byte of Piero table entry
,-go set group/table pointer for motor 4 speh

The IR routine turns interrupts off for 100 Msec,

which stops the

timing chain (multiplies time by 100). This front end leaves
interrupts on and sits in a loop for 5 msec to determine if X.R.
active and if so, executes normal I.R. routine, else exits.
.........

is

start Tracker

;The way to include the IR program, I list as the following:
;It shows the program prargraph from Ck_IR: to Ck_front:
;of couse. It also attach the IR.asm file
;the IR.asm file I just make a little bit change, to make they work at
;any system clock assume by constant SystemClock:
.-please advise..

:>

Ck_IR:
LDA
BEQ
JMP
CKIR_S:
LDA
STA
LDA
STA
IR—req:
LDA
AND
BNE
LDA
AND
BNE
DEC
BNE
LDA
STA
DEC
BNE
JMP
Got_IR:
LDA

Last_IR
CKIR_S
Idle

;timer stops IR from hearing
;jump if timer 0
•abort if >0

#FFh
TEMPI
#10h
TEMP 2

;set loop timer
;
;sot gross timer

Port_B
#IR_IN
Got_IR
Port_B
#IR_IN
Got_IR
TEMPI
IR_req
#FFh
TEMPI
TEMP2
IR—req
Idle

#05

;ck if IR signal active
;get port pin
1 go do input if active
;ck if IR signal active

(hi)

(hi)

;get port pin
;go do input if active
,- inside loop
;
; reset loop timer.
;
;outside loop
iloop thru
,-no activity found

;number of times

to ck for TR reception

A-72

STA

TEMP4

Got_IR2:
JSR
D_IR_test
BCS
New_IR
TEMP4
j
DEC
BNE
QoC_IR2
Idle
JMP
New_IR:
JMP
Normal_IR

.-used as a subroutine for diags
;jump if found data
; loop
.■bail out if not

..
;

Begin Koball's code
'• •

D_IR_test:
SEI
JSR
LDA
;;Tracker
STA
;;Tracker
LDA
CL I

GBYTE
•Intt dflt

;;Tracker
; .-Tracker
First time to read
;Initialize timers, etc.

Interrupts

.-load reg

IN_DAT

.-.-load result to ACC
S;Tracker

RTS
Normal_IR:
; There are 4 I.R. table arranged as all other tables, one for each age
; But here we get a random number which determines which one of the
; four tables we point to and the actual number received is the one of
; sixteen selection.

;;Tracker add
.-kill hi nibble (con^liment of
; save

LDA
AND
STA

IN DAT
(OFh
IN_DAT

CMP

(08
,-test for special sneeze command
No_sneeze
.•jump if not
IReally_sick-30
;force Furby to get sick

BNE
LDA
STA
No_sneeze:
LDA
STA
Qet_IR_md:
JSR
DEC
BNE
LDA
AND
STA
CLC
SBC
BCC
LDA
JMP
NormIR_2:
LDA
CLC

Sick_counter

lo nibble)

;update

Bored_timer
TEMPI

,- get current count
; save

Random
TEMPI
Get_IR_md
Seed_l

?-l
,-loop getting randcsn numbers
.-get new random pointer

(OFh
TEMPI

.•kill hi nibble
; save

*11
NormIR_2
*96
Got_normIR

;ck if > 11
•jump if not
.■point to table 4

TEMPI

;recover random number

,-get

something

;

A-73

SBC
BCC
LDA
JMP
NormIR_3;
LDA
CLC
SBC
BCC
LDA
JMP
NormIR_4:
LDA

#C7

;ck if > 7
.-jump if not
.-point to table 3

NormIR_3

164
Oot_normIR

•>*
TEMPI

;recover random number

• 03
NormIR_4
• 32
Oot_normIR

;ck if > 03
.-jump if not
;point to table 2
;

• 00

;force table 1

Got_normIR:
CLC
ROL
CLC
ADC
TAX

IN_DAT

;16 bit offset

for speech

;create speech field ofsett pointer

IN_DAT

.-set offset

LDA
STA
I NX
LDA
STA
JMP

IR_S1,X
Macro_Lo

;get lo byte
;save lo byte of Macro table entry

IR_S1.X
Macro_Hj
Start_macro

;
.-get hi byte
.-save hi byte of Macro table entry
;go set group/table pointer for motor

spch
Include

IR2.Asm

; asm file

end Tracker

;
;
;

;
;

Ck_£ront:
JSR
BCS
JMP
Get_fronts
LDA
AND
BEQ
LDA
AND
STA
Touch_endi
CLC
RTS
Do_tch_ft:
LDA
AND
BNE

touch front

(tummy)

Get_£ront
;go ck for sensor trigger
Normal_front
;go fini normal spch/motor table
Idle
jno request
;this

is the subroutine entry point.

Port_C
*Touch_frnt
Do_tch_ft

;get I/O
;ck if Firby's chest is rubbed
;jump if lo

Stat_2
•Not_tch_ft

.-Get system
;clear previously inverted flag
.-update

Stat_2

;clear indicates no sensor request

Stat_2
•Tchft_dn
Touch_end

;get system
,-ck if prev done
• jump if was

LDA
ORA
STA

Stat_2
#Tch£t_dn
Stat_2

;get system
; flag set .only execute once
;update system

LDA
ORA
STA
SEC
RTS

Stat_4
SDo_tummy
Stat_4

;game mode status
/flag sensor is active
.-update
; set indicates sensor is triggered
;

Normal_front:

JSR
BCS
JHP

;enter here to complete sensor speech/motor

Life
More_£ront
Idle

• g° tweek health/hungry counters
; if clear then do sensor else bail
;done

More_£ront:

.-get random/sequential split
;save £or random routine

LDA

*Front_split

STA

IN_DAT

LDX
LDA
JSR

#Seq_front
*Ran_front
Ran_seq

LDX

Sensor_timer

BCS

Front_rnd

LDA
BEQ

Sensor_timer
Front_reset ;yep

;ck if timed out since last action

LDA
STA

Tch£mt_count
BIT_CT

;save current

INC
LDA
CLC
SBC
BCC
LDA

Tchfrnt_count

;if not then next

Tch£mt_count

; get

STA
JHP
Front_reset:
LDA
STA
STA
Front_set:
LDA
STA
LDA

.-get how many sequential selections
.-get sequential split
,-go decide random/sequential
;get current

for training subrout:

;Random mode when carry set

,-temp store

,-ck if > assignment
•Seq_front-1
Front_set
.-jump if <
;dont inc off end
»Seq_front-1
Tchf mt_count
;
Front_set
;do it

100

; reset to 1st entry o£ sequential

BIT_CT
Tch£rnt_count

; temp store

»Global_time

;get timer reset value

Sensor_timer

;reset it
;get current pointer to tabl*

BIT_CT

Front_rnd:
STA

table entry

IN_DAT

save decision

LDA
(offsot)
JSR
LDA
JSR
LDX
LDA
STA
INX
LDA
STA
JHP

•Front_ID

;which ram location for learned word count

Start_learn
IN_DAT

;go record training info
;get back word to speak

Decid_age
TEMPO

;do age calculation for table entry
;age offset
;get lo byte

T£mt_Sl,X
Macro_Lo
Tfrnt_Sl,X
Macro_Hi
Start_macro

.save lo byte of Macro table entry
;get hi byte
;save hi byte of Macro table entry
;go set group/table pointer for motor 4 spch

;
Ck_feed:

;

food sensor

JSR
BCS

Get_£eed
;go ck for sensor trigger
Normal_feed ;go fini normal spch/motor table

JMP

Idle

Get_£eed:

;no request

;this is the subroutine entry point.

;

Each trigger increments

;

Special enable routine to share port pin D1 with invert switch.
Feed switch is pulled hi by the DAC1 (aud-a) output only after
we test the invert line. If invert is not hi, then turn on
DAC1 and ck feed line on same port D1.

;
;
;

LDA
AND
BEQ
CLC
RTS
St_£eed:
LDA
STA
LDA
AND
BNE
LDA
STA
LDA
AND
STA
Feed_out:
CLC
RTS
Start_feed:
LDA

Port_D
»Ball_invert
St_feed

the health status at a greater rate

*

;get I/O
;ck if we are inverted
;jump if not inverted (lo=not inverted)
.-indicates no request
;if inverted then bypass

• FFh
,-turn DAC2 on to enable feed switch
DAC2
; out
Port_D
;get I/O
»Ball_invert
;ck if feed switch closed
Start_feed
;jump if hi
• 00
DAC2
;clear feed sw enable
Stat_3
;Get system
•Not_feed
.-clear previously inver'ed flag
Stat_3
.-update
;clear indicates no request
;go test next

»00

A-76

STA

DAC2

.•clear feed sw enable

;
;
;

LDA
AND
BNE

.-get system
; ck if prev done
,-jump if was

;

LDA
ORA
STA

Stat_3
»Feed_dn
Feed_out
Stat_3
»Feed_dn

;
»

LDA
ORA
STA
SEC
RTS

Stat_3
Stat_4
#Do_feed
Stat_4

.-game mode status
.•flag sensor is active
.■update
;set when sensor is triggered
;

Normal_feed

;

;get system
.•flag set .only execute once
.•update system

;enter here to complete speech/motor

health table calls here and decision for which speech pattern

LDA
CLC
ADC
BCC
LDA
Feeding_dn
STA

Hungry_counter
;feed him!
Feeding_dn
;jump if no roll over
HFEh
;max count

;;;;;

JSR

Life

;go finish sick/hungry speech

LDA
STA

*Feed_split
IN_DAT

.-get random/sequential split
,-save for random routine

LDX
LDA
JSR

#Seq_feed
#Ran_feed
Ran_seq

.-get how many sequential selections
.-get random assignment
,-go decide random/sequential

LDX

Sensor_timer

BCS

Feedrand

LDA
BEQ

Sensor_timer
Feed_reset
,-yep

LDA
STA

Feed_count
BIT_CT

,- save current
;temp store

INC
LDA
CLC
SBC
BCC
LDA

Feed_count
Feed_count

;if not
;get

*Seq_feed-1
Feed_Bjt
»Seq_feed-l
Feed_count
Feed_set

;ck if > assignment
.•jump if <
;don' inc off end
;
;do it

STA
JMP
Feed_resetj

#Food

;each feeding increments hunger counter

Hungry_counter

.-update

.-get current

for training subroutine

,- Random mode when carry set
,-ck if

timed out since last action

then next table entry

A-77

LDA
STA
STa
Feed_set:
LDA
STA
LDA

#00
BIT CT
Feed_count

;reset to 1st entry of sequential
;temp store

#Global_time
Sensor_timer
BIT_CT

;get timer reset value
;reset it
.-get current pointer to tables

Feedrand:
STA
LDA
(offset)
JSR
LDA

IN_DAT
#Feed_ID

.-sate decision
.-which ram location for learned word count

Start_leom ;go record training info
IN_DAT
.-get back word to speak

JSR
LDX
LDA
STA

Df>cid_age
'EMPO
reed_Sl,X
Macro_Lo

INX
LDA
STA
JMP

;
Feed_Sl, X
.-get hi byte
Macro_Hi
;save hi byte of Macro table entry
Start_macro ;go set group/table pointer for motor & spch

Ck_light:
JSR
BCC
JMP
Ck_light2:
JMP

;do age calculation for table entry
;age offset
;get lo byte
;save lo byte of Macro table entry

.-Bright light sensor
Get_light
Ck_light2
Idle

.-now handled as a subroutine
;jump if new level > reff
;nothing to do

Normal_light

Include

.-jump if new level

Lights.asm

> reff

.-asm file

Normal_light:
;

below routines are jumped to by light exec if > reff

JSR
Life
BCS
More_light
JMP
Idle
More_light:

LDA
STA

#Light_split
IN_DAT

,-go tweek heolth/hungry counters
;if clear then do sensor else bail
; done

;get random/sequential split
.-save for random routine

A-78

LDX
LDA
JSR

#Seq_light
•Ran_light
Ran_seq

LDX

Sensor_timer

BCS

Lghtrand

LDA
BEQ

Sensor_timer
Lght_reset
;yep

LDA
STA

Lght_count
BIT_CT

;save current
;temp store

INC
LDA
CLC
SBC
BCC
LDA
STA
JHP

Lght_count
Lght_count

;if not then next
;get

;get how icany sequential selections
;get sensor split table
;go decide random/sequential
;get cu.rent

for training subroutine

.•Random mode when carry set
;ck if timed out since last action

table entry

rr

f

#Seq_light-l
;ck if > assignment
Lght_set
.■jump if <
#Seq_liyht-l
;dont inc off end
Lght_count
;
Lght_set
;do it

.reset:
LDA
STA
STA
Lght..set:
LDA
STA
LDA

#00
BIT_CT
Lght_count
#Global_time
Sensor_timer
BIT_CT

;reset

to 1st entry of sequential
;save temp store

;get timer reset value
;reset it
.-get current pointer to tables

Lglitrand:
STA
LDA
AND
BEQ

TEMP4
Stat_3
#Lght_stat
Do_dark

.•save seq/rand pointer
system
;ck bit for light/dark table
.•jump if clear

LDA

TEMP4

;get pointer

STA
LDA
(offset)
JSR
LDA

IN_DAT
#Light_ID

;save decision
.•which ram location for learned word count

Start_learn
IN_DAT

;go record training info
.-get back word to speak

JSR
LDX

Decid_age
TEMPO

;do age calculation for table entry
,-age offset

LDA
STA
INX
LDA
STA
JMP

Light_Sl,X
Macro_Lo

;get lo byte
;save lo byte of Macro table entry

Light_Sl,X
Macro_Hi
Start_macro

;get hi byte
,-save hi byte of Macro table entry
;go set group/table Pointer for motor U spch

TEMP4

;get pointer

Do_dark:
LDA
STA

IN_DAT

;save decision

LDA
(offset)

*Dark_ID

;which ram location for learned word count

JSR
LDA

Start_learn
IN_DAT

;go record training info
;get back word to speak

JSR
LDX
LDA
STA
INX
LDA
STA
JMP

Decid_age
TEMPO
Dark_Sl,X
Macro_Lo

;do age calculation for table entry
,-age offset
.-get lo byte
;save lo byte of Macro table entry

Dark_Sl,X
Macro_Hi
Start_macro

;get hi byte
;save hi byte of Macro table entry
;go set group/table pointer for motor & spch

Ck_s ound:
JSR
BCS
JMP
Ck_sound2:
JMP

;Audio sensor
Gec_80und
;now handled as a subroutine
Ck_sound2
.-jump if new level > reff
Idle
.nothing to do

Get_sound:

,-alt entry for diagnostics

Normalsound

;jump if new level > reff

The microphone interface generates a square wave of 2k to 100k.
We can loop on the sense line and count time for the
hi period to determine if sound has changed and compare it to previous
samples.

SEI
LDX
STX
LDX
STX
Ck_end2:
DEC
BEQ
LDA
AND
BEQ
LDX

»00
TEMPI
*FFh
TEMP2
TEMP2
Ck_snd4
Port_D
•Mic_in
Ck_snd2

#FFh
STX
TEMP2
Ck_snd3:
INC
TEMPI
BEQ
Snd_ove
LDA
Port_D
AND
»Mic_in
BNE
Ck_snd3
ll5*166ns=2.49uS)
JMP
Snd_over:

Ck_snd4

.•disable interrupts
.■clear
.•clear buffer
;load loop timer
;
;
.•jump if timed out
;get I/O
;ck sound elk is hi
,-wait for it to go hi
.■load loop timer
;
.■count during lo elk
,-juap if rolled over
.get I/O
;ck if still hi
'.•loop till lo
; done

♦5
♦3
♦2
♦2
*3

we should never get here so bail back to idle and this will
also prevent system lockup when no elk
LDA
STA
Ck_snd4:
CLI
JSR
LDA
CLC
SBC
BCC

*250
TEMPI

Kick_IRQ
TEMPI

.•never allow roll over

;
;re-enable interrupt
,-wait ft..- motor R/C to start working again

*05
No_snd

;get count
.•clear
;is diff > 5
.•bail out i£ not
.•system
;ck for prev done
.•wait till quiet

LDA
AND
BNE

Stat_3
•Sound_stat

LDA
ORA

Stat_3
*Sound_stat

system

STA

Stat_3

set prev dn

LDA
ORA
STA

Stat_4
»Do_snd
Stat_4

set

No_snd2

SEC

;carry se

indicating change > reff

level

indicates no change

RTS

Mo snd:
LDA
AND
STA
No_snd2:
CLC

.-get system
;clear prev dn
; update

Stat_3
*Nt_snd_stat
Stat_3

;carry clear indicates no sound

RTS

;done

Normal_sound:
•

below routines are jumped to if sound pulse detected

JSR
BCS

Life
More_sound

sgo tweek health/hungry counters
;if clear then do sensor else bail

JMP

Idle

;done

More_sound:

LDA
STA

»Sound_split

LDX
LDA

»Seq_sound
*Ran_sound

JSR

Ran_seq

IN_DAT

.-get random/sequential split
;save for random
itine
:get how many sequential selections
.•number of random selections
;go decide random/sequential

A-81

LDX

Sensor_timer

,-get current

BCS

Sndrand

.-Random mode when carry set

LDA

Sensor_timer
Snd_reset
;yep

;ck if timed out since last action

BEQ
LDA
STA

Sound_count
BIT_CT

INC
LDA
CLC
SBC
BCC
LDA
STA
JMP
Snd_reset:
LDA

Sound_count

STA
STA
Snd_set:
LDA
STA
LDA

BIT_CT
Sound_count

Sound_count

; save current
;temp store
; if :not then next table entry
;get

#Seq_sound-l
Snd_set
#Seq_sound-1
Sound_count
Snd_set
(00

for training subroutine

;ck if > max assignment
.-jump if <
,- dont inc of f end
;dc it
.reset to 1st entry of sequential
.-temp store

*Globai_time
Sensor_timer
BIT_CT

.-get timer reset value
; reset it
.-get current pointer to tables

Sndrand:
STA
LDA
(offset)
JSR
LDA
JSP.
LDX
LDA
STA
INX
LDA
STA
JMP

IN_DAT
#Sound_ID

.save decision
.-which ram location for learned word count

Start_leam
IN_DAT

;go

Decid_age
TEMPO
Sound_Sl,X
Macro_Lo

; do ,age calculation for table entry
■ age offset
.get lo byte
,-save lo byte of Macro table entry

Sound_Sl,X
Macro_Hi
Start_jnacro

.get hi byte
.-save hi byte of Macro table entry
;go set group/table pointer for motor U spch

record training info
;get back word to speak

1

J

•filllllllllllllllllflliilflillllfllfilflflillilllflllllllllllllfllllllll

Hill
.-•Misc Subroutines

;61111111111111111111111111111111111111111111111111111111111111111111111

mu
;

SENSOR TRAINING

;

Training for each sensor is set up here and the decision if

the

A-S2

learned
; word should be played or not.
; Temp_ID hold the ram offset for the last sensor of the learned word.
Temp_ID2 hold the ram offset for the current sensor of the learned
word.
; IN_DAT holds
;

the current word the sensor chose,

and will be loaded

the learned word instead if the sensor count > the random number that

was
,• just sampled,

ie.,

force learned word to play.

j

••••

.
;

If the sensor timer is at 0 when entering here, then the LEARN_TEMP
ram location is cleared, else the current learned word is loaded. If

;

the learned word is 0 then all entries are cleared.

;

When entering,

;

the back switch and if so then move the current sensor to previous

check sensor timer and bail if 0.

sensor
; ram and increment the counter.
; If this is not the back switch,
and
. decrement

it.

THen test

if

this is

then get previous sensor ram counter

THen move all current sensor information to previous and

j

return to caller.

;
;

Because of training difficulties, we now need two back touches to
increment training counters. If only one occurs then the normal

decrement
; happens. This double back touch helps to prevent accidentally training
; with a new macro by hitting the back sw when it is not the macro you
;

have been working with.
art_leam:
Temp_ID2
STA
Temp_ID2
LDA
»EEh
CMP
Not_BCK
BNE
CPX
BNE

Not_BCK:
LDA
CMP
BEQ

;sensor ram location of counter
; get current sensor ID
;EF= this is the back switch

(current sensor)

(special)

;jumpif not
;ck if sensor timer timed out
#00
;jump if is back switch and not timed out
Leam_update

Temp_ID

;get previous sensor ram offset

VEEh
;ck if last was back sw
NotJLeamed {jump if no sensor prev

LDX
LDA

Terop_ID
Tilt_leamed,X

{get prev.ous sensor ram offset
{get learned word counter from ram

CMP
BNE
LDA

Leam_temp
;compare with last word
Do_lrn2
{bail out if different
Tilt_lrn_cnt,X
,-prev sensor counter ^offset

to current

sensor
CLC
SBC
STA
BCS
BPL
LDA
STA

iLeam_chg

,-dec learned word counter since not back sw

Tilt_lm_cnt.X
Do_lrn2
Do_lra2

update
jump if > *Leam_chg
jump if not negative

(rolled over'

#00
Tilt_lrn_cnt,X

,-set to xero,

no roll over

Do_lm2:
LDX
JSR
CLC
LDA
CMP
BEQ
CLC
SBC
BCC
Do_lrn2a:
LDA
AND
STA
STA
Not_leamed
LDA
STA
LDA
STA
LDA
AND
STA

Temp_ID
Random

Tilt_lm_cnt,X
.-get count
• FFh
;check for max
Do_lrn2a
;bypass random
Seed_l
Not_learned

IN_DAT
Learn_temp
Temp_XD2
Terop_lD

;get curent sensor word
.SAVE FOR NEXT PASS
;get current sensor
;save in previous sensor ram

Stat_0
*EFh
Stat_0

;system
;*Train_Bk_prev"
.update

Lm_updl :
LDA
AND
STA

;sensor ram location for last trigger
;E£= this is the back switch (special)
.-bail out if last trigger was also back sw
; only happens on power up
;false call

.•system
.Stat_0
»Train_Bk_prev
;is this the 1st or 2nd time thru
Lm_updl
;jump if 2nd back sw hit
Stat_0
;system
*Train_Bk_prev
.-this is 1st time
Stat_0
lupdate
;my job is done here !

Stat_0
• EFh
Stat_0

.•system
;"Train_Bk_prev* clear 2nd time thru flag
;update

LDX
LDA

Temr_ID
Tilt_learned.X

CMP
BEQ
LDA
STA
LDA
STA
JMP

Leam_temp

Lrn_upd2:
CLC
LDA

clear 2nd time thru flag

;done-ola

Leam_update:
LDA
Temp_ID
CMP
• EEh
BEQ
Not_learned
CMP
• FFh
BEQ
Not_learned

LDA
ORA
STA
RTS

.•random minus learned word counter
lit less than random then bail out

Tilt_leamed, X
;get learned word counter from ram
• OFh
.-make sure never off end of table
Tilt_leamed1,X
.-also in ram
;force learned word for sensor
1N_DAT

RTS

LDA
AND
BNE

;get sensor learn ram offset
;get a number

;sensor ram location for last trigger
;get learned word from ram

;ck for training of same word
;jump if is
Lm_upd2
Learn_temp
,-get new word trainer wants to use
Tilt_l#arned,X
;update new word
*00
.■reset to 0 for new word to train
Tilt_lm_cnt,X
;
Not_learned .-done for now

Ti 1 t_lm_cnt, X

;get learned word counter from ram

;

on 1st cycle of new learn,

BNE
LDA
STA
JMP
Lm_upd2a:

,ADC
BCS
STA
JMP

we set counter 1/2 way

(chicken)

Lm_upd2a
; jump if not 0
•80h
;l/2 way point
Tilt_lm_cnt,X
;update sensor counter
Clear_learn ;gc finish
end 1st cycle preload
*Leam_chg
;add increment value
Learn_overflw
;jump if rolled over
Tilt_lm_cnt,X
.update sensor counter
Clear_leam
go finish

Leam_over f lw:
LDA
#FFh
;set to max
STA
Tilt_lrn_cnt,X
;save it
Clear_learn:
JMP
Do_lm2

;
;

.-done

When IRQ gets turned off, and then restarted, we wait two complete
cycle to insure the motor R/C pulses are back in sync.

Kick_IRQ:
LDA
AND
STA
LDX

Stat_3
*Nt_IRQdn
Stat_3
*03

;get system
.•clear IRQ occured status
.■update system

Stat_3
*IRQ_dn
Kick2
Stat_3
INt_IRQdn

,• system
;ck if IRQ occured
.-wait till IRQ happens
;get system
.•clear IRQ occured status

;loop counter

Kick2:
LDA
AND
BEQ
LDA
AND
STA
DEX
BNE
RTS

.-update system

Stat_3
Kick2

i-1
.■loop til done
Iis done

,-EEPROM READ/WRITE
;

Read fc write subroutines

;
Do_£E_write:
;

EEPROM WRITE

;
;
;

Enter with 'TEMPO' holding adrs of 0-63. Areg holds lo byte and
Xreg holds hi byte. If carry is clear then it was succesfull, if
carry is set the write failed.

j
;

MODIFIED eeprom , load lo byte in tempi and hi byte in temp2
and call EEWRIT2.

,•

LDA
STA
SEI

DAC1

«00

;use DAC output to put TI in reset
••
,-tum IRQ off

LDA
STA
LDA
STA
LDA
STA

• 00
Sgroup
• 13
Which_delay
• 00
Which _mot or

;EEPROM adrs to write data to
,- save adrs
;number of ram adrs to transfer
; save
,-Xreg offset
; save

(x/2)

Need one read cycle before a write to wake up EEPROM
LDX
JSR

Which_motor ;eeprom address to read from
EEREAD
;get data (wakes up eeprom)

Write_loop:

l

LDA
STA
LDX
LDA
STA
INC
INX

Sgroup
TEMPO
Which.motor
Age,>:
TEMPI
Which_motor

;get next EEPROM adrs
.-buffer
;ram source
; lo byte (data byte #1)
; save data bytes
;

LDA
STA
JSR
BCS

Age,X
TEMP2
EEWRIT2
EEfail

;
;hi byte (data byte »2)
.-send em
;jump if bad

INC
INC

Sgroup
Sgroup

INC
DEC
BNE

Which_motor ;next adrs
Which_delay ;how many to send
Write_loop
;send some more

RTS

; done

•-

;0-63 EEPROM adrs next
;0-63 EEPP.OM adrs next

(eeprom writes 2

bytes)

;

READ EEPROM HERE AND SETUP RAM

S_EEPROM_READ:
;

Xreg is the adrs 0-63,

system returns lo byte in Areg & hi byte in

Xreg.
;
;
;

on call: X = EEPROM data address (0-63)
on return: ACC = EEPROM data (low byte)
X = EEPROM data

(high byte)

(also in TEMPO)

(also in TOIP1)

A-86

LDA
STA
SEI

#00
DAC1

LDX
JSR

#00
EEREAD

;eeprom address to read from
;get data (one read to init system)

LDA
STA
LDA
STA
LDA
STA

#00
Sgroup
#13
Which_delay
#00
Which_motor

;EEPROM adrs to read
;save adrs
;number of ram adrs to transfer
; save
;Xreg offset to write ram data
; save

;use DAC output to put TI in reset
•
;turn IRQ of f

(x/2)

Read_loop:
LDX
JSR

Sgroup

LDX
LDA
STA
INC
IMX
INC
LDA
STA
INC
INC

Which_motor
TEMPO
Age, X
Which_motor

; ram destination
.get data
;lo byte (data byte #1)

Sgroup
TEMPI
Age, X
Which_stctor
Sgroup
Which_delay
Read_loop

; 0-63 EEPRCX1 adrs next
;get data
;lo byte (data byte #2)
,- next adrs
;0-63 EEPROM adrs next

DEC
BNE
LDA
STA
STA
STA

EEREAD

;EEPROM adrs
;get data

;how many to get
;send some more

;clear rams used
#00
Sgroup
;
Which_motor ;
Which_delay •

CLI
JSR
Kick_IRQ
JSR
TI_reset

;Enable IRQ
;wait for interrupt to restart
;go init TI
(uses ,Cycle_timer')

I

:
l Begin Koball'■ code
;**■****”'.
i

I Enable or Disable EEPROM by setting/clearing CS
i

(CS - B.O)

;
;
;
;
;

;

on cal1: —
on return: —
stack usage: 0
RAM usage: B_IMG

EEENA:
LDA
ORA
JMP

Port_B_Image
#001H
;
EEE02

.-get prev state of port B,
turn on B.O

LDA
AND

Port_B_Image
#0FEH
j

;get prev state of port
turn off B.O

STA

Port_B

;output to port

STA
RTS

Port_B_Image

;

EEDIS:
3,

EEE02:
and save port image

f

l

; Output data bit to EEPROM by placing data bit on
;

EEPROM DI line and toggling EEPROM CLK line.

;
;

EEPROM DI = A.l
EEPROM CLK = A.O

;

on call:

;
;
;

on return: —
stack usage: 0
RAM usage: Port_A_image

OUTBIT:
BCS

C = data bit to be output

OUTB02

.-branch if output bit = 1

LDA
AND
JMP

Port_A_image
#0FDH
;
OUTB04

.-get prev state of port A,
turn off A.l.
;

OUTB02:
LDA
ORA

Port_A_iroage
#002H
,•

.-get prev state of port A.
turn on A.l,

OUTB04:
STA
STA

Port_A
Port_A_image

;

; output bit to port
; and save image

toggle EEPROM clock

I
TOGCLK:
LDA
ORA
STA
NOP
NOP

Port_A_image
#001H
Port_A

NOP
AND

#0FEH

STA

Port_A

.-get prev state of A
; turn or. A.O,
; o-itput
;delay
;
;
; turn off A.O
;output

to port

to port

STA
RTS

Port_A_image

;save image
j

•• *•*
;
;
;
I
;
;

Read data 16-bit data word from EEPROM at specified address
or. call: X = EEPROM data address (0-63)
on return: ACC « EEPROM data (low byte)
X = EEPROM data (high byte)
stack usage: 2
RAM usage: TEMPO

EEREAD:
STX
JSR

TEMPO
EEENA

SEC
JSR

OUTBIT

SEC
JSR
CLC
JSR

.•store data addr
;turn on CS
.•send start bit

OUTBIT

•'
; send READ opcode
2
2

(10)

OUTBIT

LDX
ROL
ROL

•6
TEMPO

;init addr bit count
,-align MS addr bit in bit 7

TEMPO

•'

ROL
JSR
DEX
BNE

TEMPO
OUTBIT

.•shift address bit into carry
;send it to EEPROM
;bump bit counter
; and repeat until done

LDX
LDA
STA
STA

*16

:
JSR
LDA
BIT
BNE
CLC
JMP

EERD02

•0
TEMPO

jinit data bit count
**
;init data bit accumulators

TEMPI

•

TOOCLK

;toggle clock for next bit
;test data bit (B.5) from EEPROM
;

*020H
Port_B
EERD08

*
;EEPROM data bit = 0

EERD10

l
SEC
I
EERD10 :
ROL
ROL
DEX

e

;

;EEPROM data bit = 1

TEMPO
TEMPI

;rotate data bit into 16-bit
; accimulator
;bump bit counter

ASP

BNE

EERD04

JSR

EEDIS
TEMPO
TEMPI

LDA
LDX
RTS

;

and repeat until done

;turn off CS and return
;ret w/data byte in ACC
j and X regs
;

;

;
;

Issue ERASE/WRITE ENABLE or DISABLE instruction to EEPROM
(instruction = 1001100000)

•
on call: -on return: -stack usage: 2
RAM usage: TEMP3

;
!
•

.

EEWEN:
LDA
JMP

HOFFH
EEWE02

;set up enable inst

LDA

K000H

;set up disable inst

EEWE02:
STA
JSR

TEMP3
EEENA

; save instruction
;turn on CS

<•

EEWDS:

SEC
JSR

.■send start bit
OUTBIT

•

CLC
JSR
CLC

OUTBIT

JSR

OUTBIT

LDX

06

;init instr bit count

TEMP3
OUTBIT

.•shift

EEWE04 :
ROL
JSR
DEX
BNE
RTS

EEWE04

.-send ENA/DIS opcode
;
;

(00)

:

instruction bit into carry
;send it to EEPROM
;bump bit counter
; and repeat until done
•
t

;

;

Writ* data byte to EEPROM at specified address

;
;
;
1
;
;
;

on call: TEMPO = EEPROM data address (0-63)
ACC = data to be written (low byte)
X = data to be written (high byte)
on return: C = 0 on successful write cycle
C ■ 1 on write cycle time out
stack usage: 4

A-90

;

RAM usage:

TEMPO,

TEMPI.

fEMP2

;

EEWRITs
STA
STX
EEWRIT2!

TEMPI
TEMP2

;save data bytes

JSR
JSR
JSR

EEWEN
EEDIS
EEENA

Jsend write enable inst to EEPROM
jset
' low
j then high again

SEC
JSR

OUTBIT

I

•

,
;send start bit

CLC
JSR
SEC
JSR

OUTBIT

LDX
ROL
ROL

«6
TEMPO
TEMFO

;init addr bit count
.•align MS addr bit in bit 7

EEWR02:
ROL
JSR

TEMPO

,-send WRITE opcode

(01)

OUTBIT
i

-•

DEX
&NE

EE-JR02

.■shift address bit into carry
;send it to EEPROM
,-bump bit counter
; and repeat until done

LDX

*16

jinit data bit count

TEMPI
TEMP2
OUTBIT

.•shift data bit into carry
;

EEWR06:
ROL
ROL
JSR
DEX
BNE

OUTBIT

EEWR06

.■send it to EEPROM
;bumn bit counter
j and repeat until done

JSR
JSR

EEDIS
EEENA

.•cycle CS low
; then high again

LDA
STA
STA

•0
TEMPO

jinit write cycle

TEMPI

)

I020H
Port_B
EEWR10

.•test READY/BUSY bit
;
from EEPROM

TEMPO
EEWR08
TEMPI
EEWR08

.•write cycle time out counter
•

EEWR08:
LDA
BIT
BNE
DEC
BNE
DEC
BNE

j

time out counter

/wait

(B.5)

for write cycle to finish

1
;

;
JSR
SEC

EEWR10

.-time out,
;

disable EEPROM and

set carry to signal error

A-91

RTS
EEWR10:
JSR
JSR
CLC
RTS

EEWDS

.-send write disable inst to EEPROM
.-set CS low
.-clear carry to signal successful write

EEDXS

1

;

Subroutine creates sensor table entry for the selected age.

;
;
;

One table for each age.
Enter with Acc holding the 1-16 table selection.
Exit with Acc k Tempo holding the offset 0-FF of

;
;
;

Special condition where we have only two tables instead of 4
(where each table is called based on agel, if the "half_age' bit is
set then ages 16 2 call table 1 and ages 364 call table ?.

Decid_age:
STA

the 1-4 age entry.

TEMPO

.-save O-Of selection

LDA
AND

Stat_l
*Hal£_age

;system
;test if this is a special 2

BEQ
LDA
AND
STA

Decid_normal
Stat_l
#Nt_hal£_age
Stat_l

LDA

Age

AND *03h
CLC
SBC
BCC
JMP

.-clear req
;update system

;get rid of bit 7

*01
Dec_agel
Spcl_age2

table select

;jump if net

(9th counter bit

)

;actual age is 0-3, test if <2
;choose age 1 ( actually 0 here)
;choose age 2 ( actually 1 here)

Decid_normal:
;;;
III

111

mod TestR3a....

25» of time choEe agel to add more furbish after
he is age 4.

JSR

Random

CLC
SBC
BCS

*Random_age ,• below this level selects age 1
Nospcl_age
;jump if >

LDA
*00
JMP
Do_age
end mod

,-get a number

; set age 1
;go do it

Nospcl_age:
LDA
AND
CMP
BNE
LDA
JMP

Age
*03h
*03
Dec_agej
*96
Do_age

.-get current
,-get rid of bit 7

(9th counter bit

;is it age 4
,-jump if not
.-point to 4th field
;finish load from table

A-92

Dec_age3:
CMP
BNE
LDA
JMP
Dec_age2:
CMP
BNE
Spcl_age2 s
LDA
JMP
Dec_agel:
LDA
Do_age:
STA
CLC
ROL
LDA
ADC
STA
RTS

*02
Dec_age2
*64
Do_age

;is it age 3
;jump if not
.-point to 3rd field
.-finish load from table

*01
Dec_agel

.-is it age 2
.-jump if not

*32
Do_age

;point

to 2nd field
.-finish load from table

• 00

,-age 1
.-point to 1st field

TEMP2

.-save age offset for speech

TEMPO
TEMP2
TEMPO
TEMPO

; 16 bit offset for speech
;which table entry
,-create speech field ofsett pointer
,- save

;
;

;

Random/sequential decision control

for all sensors.

,;

Enter with Acc holding the number of random selections for sensor.
Enter with Xreg holding number of sequential selections

; It.returns with Acc holding the random selection and the carry will
; be cleared for a sequential mode and set for a random mode.
; NOTE: if the caller has no random selections then carry will be •
cleared.
Ran_8eq:
STA
STX
LdA
BEQ
DEC
Ran_loop:
JSR
ROR
ROR
ROR
ROR

TEMPI
TEMP5
TEMPI
Seq_decisn
TEMPI
Random
A
A
A
A
• OFh
TEMP2

,- save random max
,-save number of sequentials
;force cpu status ck
.-jump if no randoms
,-make offset from 0
.-get n
.-move hi nible to lc.

AND
STA
CLC
SBC
BCS
LDA
CMP
BEQ
STA
STA

,-get lo nible
; save

TEMPI
Ran_loop
TEMP2
Prev_random
Ran_loop
Prev_random
TEMPI

,-get max random number from sensor
,- loop until «< max value
;get new number

LDA

TEMP5

;ck if no sequentials

;ck if duplicate from last attempt
.-loop if is
,-update for next pass
.-new

A-93

BEQ

Ran_decisn

JSR

Random

,-get random/sequential decision

CMP

IN_DAT
CMP
*80h

;random/seqential split
;>80=random else sequential

BCC

Seq_decisn

;jump if

TEMP5

;get number of sequential

TEMPI
TEMPI

;add to random for correct table start point
.■update
.-set carry to indicate random
.-done (Acc holds answer)

;;;;;

Ran_decisn:
LDA
CLC
ADC
STA
SEC
RTS
Seq_decisn:
CLC
RTS

;
;
;
;

;force random if none

less

for this pass

.•clear carry to indicate sequential
.•done (Acc holds answer)

Random number generator.
SEED_1 & SEED_2 are always saved through power down
TEMP3 & TEMP4 are random temporary files.
Acc returns with random number, Seed_l also holds random number.

Random;
LDA
STA
LDA
STA
CLC

Seed_l
TEMP3
Seed_2
TEMP4

ROL
ROL
CLC
ROL
ROL
CLC
ADC
STA
LDA
ADC
CLC

A
Seed_l

ADC
STA

TEMP3
Seed_l

LDA
INC
ADC
STA
RTS

*00
Seed_2
Seed_l
Seed_l

A
Seed_l
TEMP4
Seed_2
100
Seed_1

;return with random number in Acc & seed_l

A-94

Life:
;

Each FEET trigger increments the HUNGRY counter by

(EQU = FOOD).

;Hungry >80 (Need_£ood)
;Hungry >80 (Need_£ood)
;Hungry <80 (Need_food)
.•Hungry <80 (Need_food)
HUNGRY/SICK/SENSOR

♦
*
♦
*

>C0
<C0
>C0
<C0

(Really_sick)
(Really_eick)
(Really_sick)
(Really_sick)

=
■
=
=

.Hungry <60

♦ Sick <C0

(Really_sick)

= random HUNGRY/SICK

(Sick_ref£)

Sick
Sick
Sick
Sick

normal sensor
random SICK/SENSOR
random HUNGRY/SENSOR
random

.•Hungry >60 then each sensor motion increments Sick
.•Hungry <60 then each sensor motion decrements Sick
;

When the system does a cold boot,

we set HUNGRY S> SICK to FFh.

; When returning from here, carry is set if sensor should execute
; normal routine, and cleared if sensor should do nothing.
;REFF only H’ .ngry_counter
;Sick_counter
;Food
EQU
;Need_food
EQU
;Sick_re££
EQU
;Really_sick

20h
80h
60h
EQU

;Hungry_dec EQU
;Sick_dec
EQU
;Max_sick
EQU

01
;subtract X amount for each sensor trigger
01
;subtract X amount for each sensor trigger
see EQU

LDA
.-mod F-rels2
;
CLC
SEC
;end mod
SBC
BCS
LDA
£rst_life:
STA
CLC
SBC
BCS
LDA
;mod F-rels2
I
CLC

;amount to ii -rease ‘Hungry’ for each feeding
.-below this s arts complaining about hunger
,-below this starts complaining about sickness
COh
,-below this only complains about sickness

Hungry_counter

;current

;

»Hungry_dec ;-X for each trigger
frst_life
;jump if not neg
tOO
;reset
Hungry_counter

;get count

*Sick_ref£
;ck if g tting sick
Sick_inc
;jump if not sick
Sick_counter
;current
,•

SEC
;end mod
;mod testr3a
;
;

SBC
BCS

»Sick_dec
frst_sick

;-X for each trigger
;jump if not neg

A-9S

LDA

*00

SBC
STA

*Sick_dec
;-X for each trigger
Sick_counter

BCC
CLC

Max_Sref

LDA

Sick_counter

;reset

,-jump if neg
;get again

SBC
BCS
Max_Sref:

*Max_sick
frst_sick

;ck if at minimum allowed count
,-jump if not at min

LDA

»Max_sick

{set to min

frpt_sicks
STA
Sick_counter
JMP
Hungerl
;end mod testr3a

;

Sick_inc:
INC
Sick_counter
;*1 if is
BNE
No_sick_inc ,-jump if did-* roll over
LDA
*FFh
;if did the
t t to max
STA
Sick_counter
No_sick_inc:
Hungerl:
LDA
CLC

SicV_counter

;ck how sick

SBC
BCC

#Really_sick
Hunger2

,-decide if too sick to play
;jun^3 if <

LDA
CLC

Hungry_counter

.-check how hungry he

is

SBC
*Need_food
;ck if getting hungry
BCC
Decd_Hung_norm
,-jump if is
Life_normal:
SEC
;tell sensor to do normal routine
RTS
,- done
Hunger2;

;

LDA
CLC

Hungry_counter

.-check how hungry he is

SBC
BCC

#Sick_r«ff
,-ck if very hungry and a
Decd__Hung_sick
,-only speak hungry

LDA
CLC

Hungry_counter

SBC
BCS

*Need_food
;ck if getting hungry
Decd_Sick_norm
.-jump if is

JMP

Decd_Hung_sck_nom ,-do hungry k sick speech

sick
/ sick

;check how hungry he is

Decd_Hung_sck_norm:
JSR
CLC

Random

SBC
V,_o'
LDA
BMI
JMP

»A0h
Life_normal
Seed_l
Say_sick
Say_hunger

,-need 3-way decision
;hi split
;>A0 = normal senior
;get again
;>80
;<80

Decd_Hung_norm:

A-9f

JSR
HMI
JMP

Random
Lif e_normal
Say_hunger

;go get random 50/50 decision
l

t

Decd_Sick_norm:
JSR
Random
BMI
Life_normal
JMP
Say_siek

;go get random 50/50 decision
;
J

Decd_Hung_si ck:
JSR
BMI
JMP
Say_hunger:
LDA
STA
LDX
LDA
JSR
BCS

Random
Say_hunger
Say_sick

•

1

#Hunger_split
IN_DAT
*Seq_hunger
•Ran_hunger
Ran_seq
Hunger_ran

;go get random 50/50 decision
.

;get random/sequential split
;save for random routine

;get how man} sequential selections
;get number oi random slet.ions
;go decide random/sequential
;Random mode when carry SET

LDA
Sensor_timer
;ck if timed out since last action
BEQ
Hunger_reset
;yep
INC
Hungr_count ;if not then next table entry
LDA
Hungr_count .-get
CLC
SBC
#Seq_hunger- 1
;cfc if > assignment
BCC
Hunger_side /jump if <
LDA
*Seq_hunger- 1
;dont inc off end
STA
Hungr_count J
JMP
Hunger_side ;do it
Hunger_reset:
LDA
*00
/reset to 1st entry of sequential
STA
Hungr_count J
Hunger_side
LDA
#Global_time
;get timer reset value
STA
Sensor_timer
/reset it
LDA
Hungr_count /get current pointer to tables
Hunger_ran:
JSR
LDX
LDA
STA
INX
LDA
STA
JSR
JSR

Decid_age
TEMPO
Hunger_Sl,X
Macro_Lo

/do age calculation for table entry
/age offset
/get lo byte
/save lo byte of Macro table entry

Hunger_Sl,X

;
/get hi byte

Macro_Hi
Oet_macro
Notrdy

/save hi byte of Macro table entry
/go start motor/speech
/Do / get
status for speech and motor
/tells sensor to do nothing

LDA
STA

*Sick_split
XN_DAT

/get random/sequential split
/save for random routine

LDX
LDA

*Seq_sick
t!Ran_sick

/get how many sequential selections
/get number of random elections

CLC
RTS
Soy_aick:

A-97

Ran_seq

BCS

Sick_rai

LDA
BEQ
INC
LDA

Sensor_Cimer
;ck if timed out since last action
Sick_reset
;yep
Sickr_count ;if not then next table entry
Sickr_count ;get

CLC
SBC
BCC
LDA
STA
JMP
Sick_res#t:
LDA
STA
Sick_side:
LDA
STA
LDA

;Rar

.

.node when carry SET

#Seq_sick-l

;ck if > assignment

Sick_aide
*Seq_sick-l
Sickr_count
Sick_side

;jump if <
;dont inc off end
;
;do it

#00
Sickr_count

;reset to 1st entry of sequential
;

Sick_ran:
JSR
LDX
LDA
STA
INX
LDA
STA
JSR
JSR
CLC
RTS
. •* •

a decide random/sequential

JSR

#Global_time
rget timer reset value
Sensor_timer
;reset it
Sickr_count ;get current pointer to tables

Decid_age
TEMP''

;do age calculation for table entry
;age offset

Sick_Sl,X
Macro_Lo

;get lo byte
,-save lo byte of Macro table entry

Sick_Sl,X
Macro_Hi
Get_macrc
jro.iay

;get hi byte
e hi byte of Macro table entry
,go start motcr/speech
;Do / get
status for speech and motor
.•tells sensor to d
nothing

;

•

)

GoToSleep:
j

sa e light

sensor fail or sleep command in

LDA
AND

Stat_0
;systew
»Dark_6leep_prev ;

BEO
LDA
STA

Nodrk_prev
#01
’eed_2

JMP
Nodrk_prev:
LDA
STA

'Seed_2'

into EEPROM

;jump if none
;set flag that it was done
;save in EEPROM

G'2
#10
S«ed_2

;set

flag that it was clear
;save in EEPROM

Gs2:

;

EEPROM WRITE

A-98

;
;
;

Enter with 'TEMPO' holding adrs of 0-63. Areg holds lo byte and
Xreg holds hi byte. If carry is clear then it was succesfull, if
carry is set the write failed.

; MODIFIED eeprom , load lo byte in tempi and
;
and call EEWRIT2.
LDA
STA

too
DAC1

SEI
LDA
STA
LDA
STA
LDA
STA
;

x byte in temp2

.-use DAC output to put TI in reset

l
,-turo IRQ off

too
Sgroup
113
Which_delay
too
Which_motor

.•EEPROM adrs to write data
o
,-save adrs
;number of ram adrs to transf.
; save
;Xreg offset
; save

(x/2)

Need one read cycle before a write to wake up EEPROM
LDX
JSR

Which_motor .-eeprom address to read from
EEREAD
;get data (wakes up eeprom)

IWrite_loop:
LDA
STA
LDX
LDA
STA
INC
IN7
LDA
STA
JSR
BCS

Sgroup
TEMPO
Which_motor

INC
INC

Sgroup

INC
DEC
BNE

Which_motor
Which_delay
IWrite_loop

Age, X
TEMPI
Which_motcr
Age, X
TEMP2
EEWRIT2
EEfail

Sgroup

,-get next EEPROM adrs
,-buffer
; ram source
; lo byte (data byte tl)
,-save data bytes

,-hi byte (data byte #2)
;send em
,-jump if bad
.-0-63 EEPROM adrs next
;0-63 EEPROM adrs next

(eeprom writes 2

bytes)
;next adrs
,-how many to send
,- send some more

GoToSleep_2:

Include

Sleep.asm

;

!• £11111111111111111111111111111111111111111111111x1111111111111111111111

mu

,- 'Interrupt

Su) routines

;£1111111111111111111111111111111111111111111111111111111111111111111111
111 11

A-99

............

CAUTION

•••*»•••••••

; Any ram location written outside ,o£ IRQ can only be read in the IRQ,
I
likewise if written in the IRQ, then can only be read outside the IRQ.
; THIS WILL PREVENT DATA CORRRUPTION.

NMI:
RTI

;Not used

PHA
PHP

.-push acc on stack
;punh cpu status on stack

IRQ:

.......

timer A = 166 uSEC •••••••

CkTimerA:
LDA
Interrupts
AND
• 20H
BNE
Do_ta
JMP
Ck_.timerE
;

;
;
;
;

;get who did it
; test for timerA
,-jiimp if is

;Do_ta:
......

timer B = 700 uSEC

******

Ck_timerB:
LDA
Interrupts
;get status again
AND
#10H
;test for timer B
BNE
Do_timeB
jjump if request true
JMP
Intt_false
.-bypass all if not
j

also changed TimerB relaod value from »10h to 00 in EQ'J

Do_timeB:

I

RE-CALIBRATE SWITCH for motor position

;

This counter must meet a threshold to decide if
calposition t ..tch is really engaged.

I

LDA
AND
BNE
INC
BNE
LDA
STA
Cal_noroll:
LDA
CLC

the

Port_C
;get I/O
•Motor_cal
;lo when limit hit
No_cal_sw
;no position switch found
Cai_switch_cnt
;ine each time found low
Cal_noroll
;jump it dtdnt roll over (stopper on sw tch)
•31
;max count
Ca1_swit ch_cnt
;
Cal_switch_cnt

;

SBC
BCC

•30
No_lim_stp

;ck if enough counts
.-jump if not enough

LDA
STA

•Cal_pos_fwd
; force value
Pot_timeL2
;reset both

JMP

No_lim_stp

; done

No_col_sw:
LDA
STA

#00
;clear count if hi
Cal_switch_cnt
;update

No_lim_stp:
LDA
BNE
LDA
STA
JMP
DEC
JMP

Wait_time
WTa
#04
Wait_time
Timer_norm
Wait_time
TimerB_dn

;4 times thru loop =
;>0
;counter reset
;reload
;
•

2.9 msec

.-bypass timers until done

Timer_norm:
Below routines run at 2.9 msec
LDA
BEQ
DEC
No_spd_m:

Mot_speed_cnt
;ck for active
No_spd_m
;jump if not
Mot_speed_cnt
;-l

LDA
BEQ
DEC
No_mstop:

motorstoped .-motor drift timer
Nc_mstop
.-jump if done
motorstoped ;-1

LDA
BEQ
DEC
TimeBl•

Motor_led_timer
TimeBl
Motor_led_timer

L7A
E^Q
DEC
TimeB2i
;m
LDA
m
BEQ
,- m
DEC
TimeB3:

Cycle_timer
TimeB2
Cycle_timer

;2.9mSec timer * cycle reload
.•jump if done

Motor_pulse
TimeBl
Motor.-'Ulse

;2.9mSec timer • Motor_pulse
;jump if done
; -1

DEC
BNE
INC

,- Motor_led timer * 742 mSec
.-jump if done

; -1

J-l

Mili_sec
;-1 & allow rollover
TimerB_dn
.-wait for rollover
(2.9mS • 256 = 742mSec)
Milisec_flag
;tell task rtn to decrement timers

TimerB_dn:
**********

We could test all interrupts here as needed

Ck2Khz:
CkSOOhz
Ck60hz:
Check motor position -

IR slot

in wheel sensor

; This version does two reads to eliminate noise and sets a done flag to
j prevent multiple counts. It also reads twice when no slot is present
to
J clear the done flag.
LDA
AND
BNE
LDA
AND
BNE

STA
JMP

Port_C
#Pos_sen
Clr_pos
Port_C
*Pos_sen
Clr_pos
Slot_vote
Pc_donc
#00
S’.ot_vote
Force_int

Clr_pos :
LDA
AND
BEQ
STA
JMP

Port_C
#Pos_sen
Pc_done
Slot_vote
Pc_done

LDA
BEQ
LDA

ExtportC:
JMP

;get I/O
;ck position sensoi
jjump if no I
j get I/O

_,ger

;

READ 2x to prevent noise trigger
jjump if no IR trigger
;get prev cycle
,-bail if prev counted
t

;set ram to 0.
j go count slot

(faster than setting a bit)

jget I/O
READ 2x to prevent noise trigger
;not 2 equal reads so bypass ithis cycle
.-set ram to 1. (faster than setting a bit)
;

;

Intt_£alse
;this should be turned off
Interrupts
,-get status again
#01H
; test for port C bit 1
AND
; jump if not
BEQ
Pc_done
LDA

;

Force_int:
LDA
»
AND
*
BEQ
i
LDA
AND
BEQ
INC
CLC
LDA
SBC
BCC
LDA
STA
JMP
Cnt_ rev:
DEC
CLC
LDA
• ;
-S
Cnt_ c

.
LDA

STA
Updt _cnt:
INC

rising edge

Port_D_Image
.-system
#Motor_led
;ck if position I.R. led is on
Pc_done
jjump if not off
Stat_2
#Motor_£wd
Cnt_rev
Pot_timeL2

,-get system
;if set then FWD else REV
jjump if clr
;sensor counter

Pot_timeL2
#207

j current

Updt_cnt
#00
Pot_tiroeL2
l)pdt_cnt

jck for > 207
jjump if not
jrol1 over
»
•'

Pot_timeL2

J-1

#208
Pot_timeL2
Updt_cnt

jtnax count
,-ck for negative

(

>207

)

jjump if not

• 207

.-when neg roll over to max count

Pot_t imeL2

{

Drift_counter

;to be used for braking pul

A-102

LDA
STA
;

Pot_timeL2
Pot_timeL

;get current count
;save in motor routine counter

THis routine used to calculate motor speed based on battery voltage.
LDA
Mot_speed_cnt
;ck for active
BEQ
Pc_done
;jump if not
INC
Mot_opto_cnt

Pc_done:
LDA
Motor_led_timer
BEQ
Hot_led_off .-jump
LDA
Port_D_Image
ORA
#Motor_led
;turn
JMP
Mot_led_dn
;
Mot_led_off:

;ck if active
if done
;system
LED on

(>0)

LDA
AND
Mot_led_dn:
STA

Port_D_Image
*Nt_Motor_led

;system
;turn LED off

Port_D_Image

;update motor led

M_drft_Fl:
LDA
BEQ
LDA
CMP
BEQ

Drift_fwd
M_drft_Rl
Drift_fwd
*01
M_drft_F2

;grt delay value
;jump if prev done
;get delay value
;01=turn motors off
,-send it

DEC

Dnft_fwd

;-l

LDA
AND
STA

Port_D_Imaae
;get system
(note lo is tranys off)
*3Fh
;turn both motors off to prevent transistors
Port_D
;on at same time

;m32

;m32
LDA
ORA
AND
JMP
M_drf t_F2
DEC
LDA
ORA
JMP
M_drft_Rl
LDA
BEQ
LDA
CMP
BEQ
DEC

Port_D_Image
;get system
*Motor_off
,-turn both motors off
*Motor_fwds .-move motor in
wd dir to stop motion
Intt_motor_end
Drift_fwd
;-l
Port_D..Image
jget s stem
»Motor_of£
;turn both motors off
Intt_motor_end

Drift_rev
Intt_motor
Drift_rev
*01
M_drft_R2
Drift_rev

;get delay value
;jump if prev done
,get delay value
;01=turn motors off
.-send it
;-l

;mJ2
LDA
AND
STA

Port_D_Image
;get system
(note lo is tranys off)
»3Fh
(turn both motors off to prevent transistors
P-rt_D
son at jame time

LDA
ORA

Port_D_Image
;get system
*Motor_off
;tum both motors off

AND

*Mctor_revs

;m32

.-move motor in rev

dir to stro motion

A-103

JMP
M_drft_R2:

Intt_jnotor_end

DEC
LDA
ORA
JMP

Drift_rev
;-l
Port_D_Image
.-get system
*Motcr_off
;turn both motors of£
Intt_notor_end

Intt_motor:
LDA
AND
STA

St«t_3
dCOh
Intt_Temp

;_ Furbyir

jget motor command bits
;sav • motor direction

.. move motor pulse width to interrupt routine

LDA
BEQ
DEC
JMP
Intmotorl:

Motor_pulsel
.-get on time
Intmotorl
,-jump if 0
Motor_pulsel
;-l
Intmotor_dn .-exit (dent change Intt_temp if on)

LDA
BEQ
DEC
LDA
STA
JMP
Intmotor2:
LDA
STA
LDA
STA
Intmotor_dn

Motor_pulse2
;get off time
Intmotor2
;got reset timer
Motor_pulse2
;-l
»C0h
.-shut motor off
Int t_Temp
;
Intmotcr_dn .-exit
Mon_!en
.-reset on time
Motor_pulsel
Moff_len
.-reset off time
Motor_pulse2
;

;- end motor pulse width
LDA

Port_D_Image

AND
CLC
ADC

*3Fh

.-clear motor direction bits

.-get system

Intt_Temp

.-put in motor commands

Intt_motor_end:
STA
Port_D_Image
,-

st Tracker

I

EOR
end Tracker
STA

»%11000000

PortJD

Intt_done:
LDA
ORA
STA
Intt_false:
LDA
STA

;;Tracker add

Stat_3
* IRQ dn
Stat_3
I00H
Interrupts

invert motor drivers

;output
;g>-

LDA »Intt_dflt
STA Interrupts
?LP

,-update system

-ral

;syst.
.-flag
,-uplat

turn

tern IRQ occured

;clear all intts first
j
,-get default for interrupt reg
.-set reg & clear intt flag
; recover CPU

A-104

PLA

;recover ACC

RTI

;reset interrupt

........................
;
;
;
;
;
;

Communication protocal with the TI is:
FF is a no action command, (used as end of speech command)
FE seta the command data mode and the TI expects two
additional data bytes to complete the string. (3 TOTAL)
ALL OTHERS (0-FDI ARE CONSIDERED START OF A SPEECH WC-aD !
Command data structure is BYTE 1 ♦ BYTE 2 ♦ BYTE 3

,•

BYTE 1

;

Command 1
BYTE 2 = FE is pitch table control;
BYTE 3 = bit 7 set = subtract value from current course value
clr = add value to current course value
bit 6 set = select music pitch table
clr = select normal speech pitch table
bit 0-5 value to change course value (no change = 0)

I
I

;
;
;
;

is always

~E

Command 2
BYTE 2 = FD is Infrared transmit cmnd
BYTE 3 = Is the I.R. code to send
( 0 - OFh only )
Command 3
BYTE 2 = FC is the speech speed control
BYTE 3 * a value of 0 - 255 where
2Eh is normal

,
;

Enter subroutine with TEMPI = command byte
TEMP2 * data byte (2nd)

Xmi t_.TI:
LDA
JSR
LDA
JSR
LDA
JSR
RTS

speed.

(1st)

*FEh

;tells TI command da.a to follow

Sp>.'n_more
TEMPI
Spch_more
tpmp2
Spch_more

;out data
;command code
;out data
;data to send
;out data
; done

;
;

There is an entry for each bank of speech and only the words
bank are in the list. THis is a subroutine coll.

;

The first

time thru,

in tha'

w« call SAY_x and as long as WORD_ACTIV or

SAY_ACTIV
; is set we call DO_NEXTSENT until saysent is done.
;

There are 4 groups of

128 pointers in ea h group.

This gives 512

A-10S

saysents.
I

1.

Enter with

'Which_word'

holding 0-12’’ and ’Sgroup'

for the 1 of 4

tables
;
which points to two byte adrs of a saysent. These two bytes are
I
lo-ded into Saysent_lo & Says«nt_hi.
;

2.

Dat~

s shuffled to the TI according to the BUSY/REQ line

;
;

Currently we have 167 speech words or sounds in ROM. Words 1-12
are in bank 0
ad 13 - 122 are in bank 1 & 123 - 167 in bank 2.

Say_0:
LDA

i*

ord

group
CMP
BEQ
CMP
BEQ
CMP
BEQ
Dec_sayl:
LDA
STA
INX
LDA

»03
Dec_say4
»02
Dec_say3
• 01
Dec_say2

STA
JMP
Dec_say2:
LDA
STA
INX
LDA
STA
JMP
Dec_say3:
LDA
STA
INX

Saysent_hi
Dec_say5

LDA
STA
JMP
Dec_say4:
LDA
STA
INX
LDA
STA
Dec_say5:

;get off sett
,-load offset to Xreg
;get current

;is it table group 4
.jump if is
;is it table group 3
jjump if is
; is it table group 2
;jump if is
;default group 1
Spch_grpl,X .-get lo pointer
Saysent_lo

;save
;X«1
Spch_grpl.X ,-get hi pointer
;save
;go calc word

Spch_grp2,X ;get lo pointer
Saysent_lo
;save
;X»1
Spch_grp2,X .-get hi pointer
Saysent_hi
;save
Dec_say5
;go calc word
Spch_grp3, X
Saysent_lo

,-get lo pointer
;save
;X-1
Spch_grp3,X ;get hi pointer

Saysent_hi
Dec_say5

.-save
;go calc word

Spch_grp4,X
Saysent_lc

;get lo pointer
;save
;X*1
Spch_grp4,X ;get hi pointer
Saysent_hi

;save

LDX
LDA
STA
LDA
STA
JSR
INC
BNE

»00
,-no offsett
(Saysent_lo,X)
;get data @
bit adrs
TEMP2
.-save new speech speed
«FCh
.command for TI to except speed data
TEMPI
Xmit_TI
Saysent_lo
Xney_say

;

INC

Saysent_hi

;♦!

;send it to TI
,-next saysent pointer
;jump if no roll over

A-106

Xnay_say:
LUX
LDA
CLC

»00
;no offsett
(Saysent_lc,X)
.-get data 0 16 bit adrs

ADC
STA
LDA
STA

Rvoice
TEMP2
#FEh
TEMPI

;adjut to voice selected on power up
;save new speech pitch
jconroand for TI to except pitch data

The math rout Ine
converts the value to 00 for 80 and
if
j0 then subtracts from 80
to get the minus ver ' a of 00
ie. if number is 70 then Tl gets sent 10 (-1
LDA
BKI
LDA
CLC
SBC

TEMP2
.•get voice with offsett
No_voice__chg
;if >80 then no char
#80h
.•remove offsett if <80

TEMP2
STA
TEMP2
No_voice_chg:
JSR
Xmit_TI

.•kill offsot
;update
;send it to TI

Do_nextsent:
Frst_say:
INC
Saysent_lo
;next saysent pointer
BNE
Scnd_say
;jump if no roll over
INC
Saysent_hi
;*1
Scnd_say:
LDX
#00
;no offsett
LDA
(Saysent_lo,X)
;get data 0 16 bit adrs
CM''
#FFH
; check for end
BEQ
Say_end
;done
LDA
(Saysent_lo,X)
;get data 0 16 bit adrs
STA
Which_word
Ntest:
CLC
SBC
#12
;ck if in bank 1
BCS
Get_groupl
;jump if is
Get_group0:
LDA
STA
CLC
LDA
ROL
TAX
LDA
STA
INX
LDA
STA
JMP
Get_groupl:
LDA
CLC
SBC
BCS

#00

jset bank
;Bank number
;clear carry
Which_word
;get word
A
;21s offsett
;1oad offset to Xreg
Word_group0,X
;get lo pointer
Word_lo
;save
Bank_ptr

;X*1
Word_group0,X
;get hi pointer
Word_hi
;save
Word_fini
;go do it

Which_word

;selection

#122
Get_group2

;ck if in bank 2
jjump if is

A-107

LDA
#01
STA
CLC
LDA
SBC
CLC
ROL
TAX
LDA
STA
INX
LDA
STA
JMP
OoC_group2:
LDA
STA
CLC
LDA
SBC
CLC
ROL
TAX
LDA
STA
I NX
LDA
STA
Word_finis
LDA
ORA
ORA
STA
JMP
Say_end:
LDA
AND
STA
RTS

.-set bank
Bank_ptr

Which_word
#12

;Bank number
.-get word
.-1st 12 in word_group0

A

; 2 ’ s offsett
,-load offset to Xreg
Word_groupl,X
;get lo pointer
; save
Word_lo
;X*1
Word_groupl,X
Word hi
Wor _.ini

#02
Bank_pT
Which_word
#122

;get hi pointer
; save

;sec bank
; Bank number
;clear carry
;get word
;lst -22 in word_group Oil

A

;2‘s offsett
.•load offset to Xreg
Word_group2,X
iget lo pointer
Word_lo
;save
;X»1
Wc.d_group2,X
;get hi pointer
Word_hi
;save
Stat_l
#Say_acti
#Word_activ
Stat_l
Do_spch

;get system
;Set spch active after word pointer loaded
;Set status
•.
.•update system
.go say it

Stat_l
#"lr_spch
Stat_l

;get system
.•turn say_activ & Spch_activ off
.-save system
done

;

This is the re-entry point during speech for all woi

.

•*••••*•

start of chg

for 3 -

to be spoken

»FFh xmits ti TI

Do_spch:
LDA
STA
LDX
LDA
CMP
BNE
LDA
AND
BEQ

;Bank number

Bank_ptr
Bank

;set it

#00H
(Word_lo,X)
•FFH
;is
Clr_word_end
Stat_l
#Word_term
Set_end

;was

.-Get the speech ■
it end of word
.•jump ir not en.!
;get system
it prev set
; nope

A-108

Wake2.a6m

WAKE2
adds deep sleep -rude. If
wake us up. only invert.

;
;
I
;

'Deep_aleep'»llh Chen tile will not

Power up reset decision for three types of startups
1. Powerup with feed switch zeros ram & EEPH CM, & calls 10-200-10 macro.
2. Power up from battery change wont clear EEPRCK but calls 10-200-10 macro.
3. Waki up from Port_D clears ram and jumps directly to startup. No macro.

SEI
LDX
STX
LDX
TXS

•C0H
Interrupts
#FFH

LDX
LDA

•0
Wake_up

STA
STX

TEMPS
Wake_up

AND

*400000001

BEC

Power_battery

(interrupts off
.•startup setting
.■disable Watch Dog
(Reset stack pointer address S0FFH

,-Get the information from h‘ rdware to check
whether reset is from po er up or wakeup
.•disable wakeup immediately, this action can
.•stop the reset occupied by another changed on
;portD, so once the program can execute to
(this line then chip will net be reset due to
.•port changed again

,-mask the rest of bit and just check the port
.-wake up information
(jump to power up initial if not port D

; Need to debounce tilt and invert since they are very unstable
Ck_wakeup s
LDA
STA
STA
LDX
Dbnc_lp:
LDA
AND
BEQ
INC
Dbnc_lp2 s
LDA
AND
BEQ
INC
Dbnc_lp3 s
DEX
BNE
LDA
CM.
BEQ
LDA
BEQ
CLC
SBC
BCS

•00
TEMPI
TEMPI
•FFh

;clear
;

,*

;loop counter

Porc_D
• 01
Dbnc_lp2
TEMPI

.•ck tilt sw
.•juirp if not tilt
,-switch counter

Port_D
•02
Dbnc_lp3
TEMP2

(ck invert sw
.•jump if not invert
.•switch counter

Dbnc_lp

cl loop court
(loop

Deep_sleep
•llh
Dbnc_lp4
TEMPI
Dbnc_lp4

(decide if normal or deep sleep
(
(if deep sleep then only test invert
(get tilt count
.•jump if 0

».
Power_Port_D

.■min count to insure not noise
(jump if > min

Page 1

A-109

Wafce2 - asm

Dbnc_lp4:
LDA
BEQ
CLC
SBC
BCS
Dbnc_lp5i

TEHP2
Dbnc_lp‘

;get invert count
(junp if 0

•10
Power_Port_D

,-Biin count to insure not noise
; jusp if > Biin

(Verify Chat Port_D i» no longer changing before going to aleep.
(If not, the CPU will lock up without setting the low power node.
(Before we exit here when count is less than minisum count, we Bust
(be sure Port_D is not changing. If we ]unp to sleep routine when
(it IB not stable, the sleep routine will wait forever to be stable
(Which causes Furby app-ar to be locked up.
LDA
STA
LDA
Test_Bleep:
CMP
BNE
DEC
BNE
,’MP

•00
TEMPI
Port_D

/
.-counter
.get current statu*

Port_D
Ck_wakeup
TEMPI
Test_sleep
OoToSleep_2

.•check if changed
.-start over if did
(-1 counter
(loop
(Otherwise, iust goto sleep again

Power_Port_D:
LDA
STA
JMP

•llh
.-signal port D wake-up
Wann_cold
L_PowerOnInitial

Power_battery:
LDA
STA

•OSh
Wann_ccid

[Signal battery wakeup
:

L_PowerOnInitial:
LD*
STA

#00
Deep_sleep

.-clear deep sleep conraar.d

Page 2

A-UO

Light5.asm

.....................................................................
11

MODS i

; LIOHT3.asm
; Add test to light counter eo that if the oscillator
l
fails, the system will ignore light sensor and keep running.

;
; Light!
! When goes to conpiete dark and hits the •Dark_sleep1 level
i and stays there until the reff level updates, at that point
i we send Furby to sleep.
I
i
i

Lights (used in F-RELS2 )
Change detection of light threshold to prevent false or continue.s trigger.

Bright
Dim

EQU
EQU

15
15

;light sensor trigger > reff level
;Light sensor trigger < reff level

Shift_reff

EQU

10

imax count to set or clear prev done flag

Dark_sleep

EQU

BOh

.-when timer A hi =0f and timer A low
is = to this EQU then send him to sleep

(Hon)
(Hon)

;
;
;
;
;

The CDS light sensor generates a square wave of SOOhz to 24khz based on
light brightness. We can loop on the sense line and count time for the
lo period to determine if light has changed and conpare it to previous
samples. This also determines going lighter or daiA.*r. W also set a timer
so that if someone holds their hand over the sensor and we announce it.
I
if the change isnt stable for 10 second, we ignore the change back to the
; previour state. If it does exii
for > 10 seconds, then it becomes the
! new sample to compare against on the next cycle.
; In order to announce light change,
j count > 'Shlft_x«ff'.
i
l

i
;
;
;
;
i

i

the system must have a consistent

If a previous retf has been set then the ,L'p_light' bit is set to
look for counts greater than the reff. The system passes through the
light routine 'Shift_reff times. If it is consistently greater than
the reff level, we get a speech trigger
If any single pass is less
than the reff, the counter is set back to zero. This scenario also
is obeyed when the trigger goes away, ie remove your hand, and the system
counts down to zero.(‘Up_light' bit is cleared ) If during this time any
trigger greater than reff occurs, the count is set back to max.
This should prevent false triggers.

Oet_lighti

jalt ent^ / for diagnostics

I This uses timer A tc get a count from the lo period of the elk
SEI
LDA
STA
LDA
STA

#0C0H
Interrupts
• 000H
TOA_CON

,'inteirupts off
.■disable timer, clock, ext ints.
; & watchdog; select IRQ int.
;set timer A for timer mode
!

Page 1

/■111

Light5.asm

LDA
STA
LDA
STA
Ck_lght2i
LDA
AND
CMP
BNE
LDA
CLC
SBC
BCC
JMP

#OOOH
TMA_LSB
ffOOOK
IMA J1SB

;re-start timer A
<
.•now CPUCLK; was *010H - CPUCLK/4

TMA_MSB
#0Fh
•OFh
Ck_lt2a
TOA_LSB

.-test for dead light osc
iget timer
zck 'or > OE
,-jump if not
;get lo byte

•EOh
Ck_lt2a
Light_fail

/ck for > ,mnb-*lsb *OFEO)
/jump if not
/bail out if >

LDA
AND
BEQ

Port_D
•Light_in
Ck_lght2

/get I/O
;ck light elk is hi
/wait for it to go hi

LDA
STA
LDA
STA

•OOOH
TMA_LSB
tr'OH
-A_KSB

/re-start timer A
z
/now CPUCLK/ was fOlOH = CPUCLK/4

TMA_MSB
#OFh
#0Fh
Ck_lt3a
TMA_LSB

/test for dead light osc
/get timer
,-ck for > OE
zjunp if not
/get lo byte

•EOh
Light_£ail

/ck for > (msb*lsb =OFEO)
/bail out if >

Port_D
♦Light_in
Ck_lght3

/get I/O
.ck light elk is lo
;wait for it to go lc to insure the elk

•OOOH
TMA_LSb
• OOOH
TMA_MSB

/re-start timer A
/
/now CPUCLK/ was »010H = CPUCLK/4

Port_D
•Light_in
Ck_lght4a

/get I/O
;ck if still lo
/loop till hi

(Honl

1

Ck_lt2a;

Ck_lght3:
LDA
AN0/P
BNE
LDA
CLC
SBC
BCS

(Honl

/

..

Ck_lt3a:
LDA
AND
BNE
Ck_lght4:
LDA
TA
LDA
STA
Ck_lght4a:
LDA
AND
BEQ

(Hon)

1

/ Timer A holds count for lo peiiod of elk
Lght4cmp:
LDA
AND
STA
LDA
STA

TMA_MSB
• OOFH
TEMPi
TMA_LSB
TEMPI

/get timer
/ mask out
/ and save
/get timer
/ and save

LDA

TKA_MSB

/get timer A high byte onain

high byte
high nybble
it
low byte
it

Page 2

A-112

Light5.asm

AND
CMP
BNE

iOOFH
TEMP2
Lghtictrp

mask out high nybble
/ and compare it with last reading
/loop until they're
Tual

; take 12 bit timer (2 bytea) and move to one byte and trash lo nible
/ of low byte. End up with hi 8 bits out of 12.
LDX
Light_byte:
RQR
ROR
DEX
BNE
Ck_lght4bs
LDA
STA
CLI
JSR
CLC

#04

/loop counter

TEMP2
TEMPI

/get lo bit into carry
/shuffle down and get carry from TEMP2
/-I
/loop till done

Light_byte

Kick_IRQ

/-now have new cour.* in
LDA
SBC
BCC
CLC
SBC
BCS
JMP
Ck_lght5:
CLC
LDA
SBC
BCC
CLC
SBC
BCC
Lght_dimi
LDA
AND
STA
JMP
Lght_brti
LDA
ORA
STA
JMP
Light_£ail/
LDA
STA
IDA
STA
CLI
JSR
JMP

!
/Initialize timers, etc.
/re-establish normal system
/re-enable interrupt
zwait tor motor R/C to start working again
/clear

#Intt_dflc
Interrupt*

'TEMPI'

Light_reff
TEMPI
Ck_lghc5

/get previous sample
zck against current sample
/jump if negative

•Bright
Lght_brt
Kill_ltrf

zck if difference > reff
/go do speech
/bail out if not

TEMPI
Light_ref£
Kill_ltr£

;try the reverse subtraction
; prev
;quit if negative

•Dim
Kill_ltrf

/is diff < reff
/bail out if not

Stat_3
#Nt_lght_Etat
Stat_3
Do_lght

z system
/clear 1 it to indicate dark table
/update system
/go fini

Stat_3
•Lght_atac
Stat_3
Do_lght i

/system
/set bit to indicate light table
/update system

#FFh
TEMPI
•Intt_d£lt
Interrupts

zforce lo number so no conflicts

Kick_IRQ
Kill_ehi£t

/Initialize timers, etc.
/re-establish normal si tern
/re-enable interrupt
/wait for motor R/C to start working again
/ret with no req

Do_lght:

Page 3

A-113

Lights.asm

LDA
AND
BNE
LDA
STA
JMP
Rst_shftup:

Stat_l
•Up_light
RaC ahftup
#Shi£t_re£f
Light_shi£t
No It todo

;ayatem
;ck if incmnt mode
.•jump if incnmt mode
;set to max

INC
LDA
CLC
SBC
BCC
LDA
STA

Light_ahift
Light_ahift

!*1

#Shi£t_re£f
No_lt_todo
#Shift_reff
Light_ahift

;ck if > max reff count
(junp if < max count
; reaet to max

LDA
AND
BNE

Stat_0
#Lt_prev_dn
New_ltreff

;aystem
; check if previously done
; junp if was

LDA
ORA
STA

Stat_0
#Lt_prev_dn
Stat_0

;system
/set previously done
.■update

LDA
AND
STA

Stat_l
#EFh
Stat_l

.-system
:set sytem to shift decrimt mode
; up '-ate

LDA
STA
JMP

#Light_reload
Light_timer
Do_ltchg

;rese- for next trigger
.-set it
;go announce it

Light_timer
No_lt_todo
TEMPI
Light_ref£

;get current
.■nothing to do
;get new count
(update system

:da
AND
STA

Stat_l
#EFh
Stat_l

.• system
(set sytem to shift decrrmt mode
.• update

LDA
CLC
SBC
BCS
LDA
AND
STA
JMP

TEMPI

.•get current value

•Dark_sleep
Ck_drk
Stat_0
•7Fh
Stat_0
Kill_ltr£

(Ck if > sleep level
(jump if >
(system
(kill prev done
(Update

LDA
AI.D
BNE

lsystem
Stat_0
#D rk_sleep_prev ;ck if thia wan already done
(junp if was
Kill_ltrf

LDA
ORA
ORA
STA

;system
Stat_0
#REQ_dark_aleep (set it
#Dark_sleep_prev ;aet also
Stat_0
(update

(
(
;

New_ltref£:
LDA
BNE
LDA
STA

l
i

iget

counter

»

,

1

Ck_drki

Kill_ltr£i

Page 4

A-114

Light5.asm

LDA
AND
BEQ
LDA
BEQ
LDA
AND
BEQ
LDA
STA
JMP
Ret ohftdnt
DEC
JMP
Kill_shi£t s
LDA
AND
STA
1

;
[

LDA
ORA
STA

Stat_0
'
#Lt_prev_dn
No_lt_‘ odo
Light_ahi£t
Kill_ahift
Stat_l
#Up_light
Rst_sh£cdn
#00
Light_shift
No_lt_todo

jeystero
;check if previoualy done
;jun*> if clear
;get shift counter
;junv if went zero last time
jsystem
;ck if incrnnt mode
;jujn> if decrimt mode
»aet to min

Light_shi£t
No_lt_todo

j-i
(done

Stat_0
#FDh
Stat_0

/system
(dears Lt_prev_dn
(update

Stat_l
#Up_light
Stat_l

/system
.-prepare to incrrmt
(update

No_lt_todo:
SEC
RTS

I
;

,Light_shift'

,-carry set indicates no light change

....... alert system to start speech
Do_ltchg:
LDA
AND
BNE
LDA
ORA
JMP
LT_re£_brt:
LDA
ORA
Ltre£_egg:
STA
CLC
RTS

Stat_3
#Lght_stat
LT_re£_brt
Stat_4
#Do_lght_dim
Ltref_egg

;system
;ck if went light or dark
(went brighter if set
(get system
(set indicating change < reff level

Stat_4
#Do_lght_brt

l

Stat_4

(update egg info
(carry clear indicates light > reff
(done

J

/set indicating change > reff level

Page 5

A-115

Diag7.asm

ifttlllllllllllllltllllllllllllllllllllllllltlllllllllllllltllllllltll
(• 'Diagnostics and calibration Routine
•
i

l

Mods to the diagnostic routines :

I

DIAQ6 s
Init memory.voice,name and write EEPRCM before exiting.

i

( Diag7i
» EEprom memory test, reads and writes all locations.
; On power up if port D woke us. then bypass diagnostics.

..
i

refer to self test mode documentation

...............

START

;
; Diagnostic EQU's
Dwait_tilt

EQU

02

.-full test waiting for no tilt

(step 1)

Diagnostic:
All speech / motor calls use standard macro routines, except we
; force the macro directly. Be carefull to load the ,MACPO_LO’ and
; 'MACRO_HI' bytes properly. We use a conroon subroutine to set the macro
; so 'MACRO_HI' is loaded only once in the subroutine. Be sure the macros
; are in the same 128 byte block. Initially chose adrs 400 (190) for these
r diags.
1

Wam\_cold
#lih
No_Diag

;get startup condition
;ck for port D wakeup
.•jump if not

#FFh

iloop

Port_D
• 03
No_Diag

.get I/O
;ck for tilt and invert
;if either hi then bail out

DportD_tst

»-l
;loop till done (ckg for Port D bounce)

EDA
AND
BEQ

Port_C
•OCh
Diagl

jget I/O
;ck for front and back switches made
lit both not lo then bail out else start diag

JMP

Test_byp

;no diagnostic request

LEA
CMP
BEQ
LDX
0portD_tst:
LDA
AND
BNE
DEX
BNE

counter

No_Piag:

Diagl:

(Start test
force voice to normal condition while diag is active
j ,-Tracker add for constant
LDA
•9
; .-Tracker add
STA
Rvoice
(hi beep for start of test
LDA
•0
.•go send motor/speech
Diag_macro
JSP.
ll

wait for front
LDA

Sc

back to clear

Port_C

.•get I/O

Page 1

A-U6

Diag7.asm

AND
CMP
BNE

#0Ch
•OCh
Diagl

;get keys
I trust be both hi
(wait till are

LDA
JSR

#03
Half_delay

.•set delay for switch bounce
lx •
delay

LDA
AND
BNE

;proas front key t go to EEPRCM test
Po rt_C
;get I/O
#Touch_fmt
lwait for switch
Diag2b
;go ck if next test is requesting

LDA
JSR

#01
Diag_macro

LDA
AND
BEQ

Port_C
#Touch_fmt
Diag2al

New_top:

Diag2a:

(hi beep for start of test
;go send nutor/speech

Diag2al:

; EEPROM WRITE
;

inic ram as 1 ,2,3.4,5.

to 26

LDA
LDX

#01H
•Age

; data for fill
i start at ram location

STA
CLC
ADC
INX
CPX
BNE

00,X

;

#01
#Age»26
RAMset

;inc Acc
s next ram location
i check for end
branch, not finished
; fill done

JSR
JSR

Do_EE_write
S ~EPROM_F.EAD

;write the EEPRCM
.-read data to ram

LDA'
STA
LDX

*00
Task_ptr
•Age

.■clear

LDA
CLC
ADC
STA
INX
CPX
BNE
LDA
CMP
BNE

00.X

#Age»26
RAMtest
Task_ptr
• 5Fh
EEfail

base 00, offset X
>
.-running CRC
lrunning total
,- next ram location
.- check for end
! branch, not finished
(get result
,-matching CRC (actual total is 15Fh )
,-jurtp if bad

LDA
STA
JMP

#02
Feed_count
EEdone

(beep to signal good test
(Use as tenp storage
(send sounds

LDA
STA

#03
Feed_count

,-beep indicates failure
(temp storage

RAMset:

t
i

base 00. offset x

start at ram location

RAMtest:

Task_ptr
Taok_ptr

EEpaaa:

EEfail1

EEdonei

Page 2

A-117

Diag7.asm

CLI
JSR
JSR

Kick_IRQ
TI_reset

enable IRQ
;wait for time:
.•clear TI from

I LA
JSR

Feed_count
Diagjnacro

;get lo byte of macro to call
.•go send motor/speech

LDA
AND
BMC

» Speaker tone / I.R. xmit
Port_C
.get I/O
#Touch_bck
;weit for switch
Diag2c
;go check if next test is requesting

Diag2b:

LDA
JSR
Diag2blp:
LDA
AND
BEQ

#1
rtag_macro

e-sync

;hi beep for start of test
igo send motor/speech

Port_C
#Touch_bck
Diag2blp

Diag2bl:
LDA
JSR

#04
Diag_macro

.•send long tone (lk sinewave)
.-go send motor/speech

LDA
AND
BNF

Port_C
#Touch_bck
Diag2bl

.•mask for back switch
■•loop until back switch pressed

LDA
JSR

•01
Diag_macro

; beep
;go send motor/speech

Xmit_lp:

;
;
(

LDA
AND
BNE

Port_C
#Touch_bck
Xmit_lp

.•mask for back switch
;loop until back switch pressed

LDA
STA
LDA
STA
JSR

#05h
TEMP2
#FDh
TEMPI
Xmit_TI

.■send "S’ to I.R. xmiter
J
I send conroand I.R, to TI
;

LDA
AND
BNE

Port_C
#Touch_bck
dumb

jget I/O
/wait for switch
;waic for back to be pressed

dumber: LDA
AND
BEQ
JMP

Port_C
#Touch_fmt
Next_l
Xmit_lp

»get I/O
;ck switch

Next_l: LDA
JSR
LDA
AND
BEQ
JMP

#2
Diag_macro
Port_C
•OCh
Next_l
New_top

jhi beep for start of test
;go send motor/speech
iget I/O
ck for front and back switches made
;if both not lo then bail out else start drag

dumb:

; Full cast starts here
Diag2c: LDA
Port_D
AND
•Bali_invert
Diag2d
BNE

;send it

(get I/O
(wait for switch
(onward if key pressed

Page 3

A-1JS

Diag7 .asm

JMP

Diag2a

;loop back Co Cop i£ none

LDA
JSR

*01
Diag_raacro

;hi beep for scare of CesC
;go send motor/speech

Diag2d:

; FULL TEST MODE
DiagFl:
LDA
STA

/wait for no cilc Co scare full diag
»Dwait_tilt
;set delay Co be sure no CllCs
TEMPI
;

DiagFla:
LDA
AND
BNE
dNE

Port_D
*3
DiagFl
TEMPI
DiagFla

LDA
JSR

#2
Diag_macro

:c

,-pass beep
;go send motcr/speech

i

DiagF2

/test Cilt 45 deg
LDA
AND
CMP
BEQ
LDA
JSR

PorC_C
*00001100b
#0CH
DiagF22
*3
Diag_macro

LDA
AND
BEQ

K.iC_B
#2
DiagF23

LDA
JSR

/
/

fail beep

#3
Diag_macro

/
/

fail beep

LDA
AND
BEQ

Port_D
»Ball_side
DiagF2

.-get I -0
;ck for cilc switch (hi « cilted)
,-wait for cilc

LDA
AND
BNE

Port_D
»Ball_invert
DiagF2a

;get I/O
jck if invert sw made
/jump to error if so

LDA
AND
CMP
BEQ

Port_C
#0Ch
»0Ch
DiagF2b

;get I/O
;get front U back
/must be hi else error
;if hi then pass

LDA
JSR
JMP

#3
Die jjnacro
DiagF2

.-fail beep
;go send motor/speech
.-loop till no error

LDA
JSR

12
Diag_macro

.-pass beep
;go send motor/speech

DiagF22:

DiagF23:

DiagF2a:

DiagF2b:

DiagF2c:

,-wait for no tilt before continuing

Page 4

A-119

Diag7.asm

/DANGER
;
/
/
1

DiagF3i
;
;
/

LDA
AND
BEQ

Port_C
#Touch_bck
DiagF3b

LDA
AND
BNE

Port_D
#Ball_side
DiagF2c

LDA
AND
BEQ
JMP

Port_C
#Touch_f mt
DiagF3
DiagF23

;get I/O
;ck for tilt switch (hi « tilted)
/wait for no tilt

/get I/O
zck switch
/ no other switch can be made here else error
/ allow multiple checks

LDA
AND
BEQ
JMP

;test back switch
Port_C
/get I/O
#Touch_bck
/wait for switch
release
/loop if hi (touch is not pressed)
DiagF23

LDA
AND
BEQ

Port_C
#Touch_fmt
DiagF3a

/get I/O
zck switch
/no other switch can be made here else error

LDA
AND
BEQ

Port_D
*C3
DiagF3b

/get I/O
zck for tilt and invert
lit either hi then error else continue

LDA
JSR
JMP

#3
Die g_rnacro
DiagF3

/fail beep
/go send motor/spt -ch
/loop till nc error

LDA
JSR

•2
Diag_macro

/pass beep
zgo send motor/speech

LDA
AND
BEQ

Port_C
»Touch_fmt
DiagF4

/get I/O
wait for front to clear
zck switch
/if pressed then wait for release

release/

DiagF3az

DiagF3b:

DiagF4:

/

Send motor forward until

front switch pressed

LDA
ORA
ORA
STA
LDA
ORA
AND
STA

Stat_2
#Motor_fwd
•Motor_actv
Stat_2
Stat_3
•Motor_off
#Motcr_fwds
Stat_3

/get system
•set « motor fwd (inc)
/set motor in motion
/update system
/get current status
/turn both motors off
/move motor in fwd dir
lupdate

DiagF4alt
LDA
AND
BEQ
JMP

Port_C
#Touch_fmt
DiagF4a2
DiagF4al

z get I/O
w. t for front
/ck swit
/got it
zloop ti.l found

;

Send motor reverse until front switch pressed

Page 5

A-120

Diag7.asm

DiagF4a2:
LDA
AND
BEQ

Port_C
#?ouch_fmt
DiagF4a?

;gec I/O
waic for fronC Co clear
;ck awicch
>if preaaed Chen waic for releaae

LDA
AND
ORA
STA
LDA
ORA
AND
STA

Sea- _2
#Motor_rev
#Mocor_accv
SCaC_2
Stat_3
»Motor_off
#Motor_revs
Stat_3

.-get ayacem
;clear fwd flag
;aec mo cor in mocion
jupdace system
;gec current status
••turn both motors off
move motor in rev dir

DiagF4a3:
LDA
AND
BEQ
JMP

Porc_C
•Touch_fmc
DiagF4a4
DiagF4a3

.•get I/O
waic for front
;ck switc'
;got it
■•loop till found

I

i

Send motor end to end and scop on cal sw,

DiagF4a4:
LDA
ORA
STA
LDA
AND
STA

;
(

SCaC_3
#Motor_off
Scac_3
SCaC_2
#Mocor_inactv
SCaC_2

else error

.-get currenc sCaCus
[Cum boch motors off
.-update
;gec system
/clear aceiv flag
.-update system

LDA
JSR
LDA
JSR
LDA
AND
BNE
LDA
JSR
JMP

#5
Diag_macro
#33
Half_delay
Porc_C
•Mocor_cal
DiarF4b
#2
Diag_macro
DiagFS

LDA
JSR

>3
Diag_macro

LDA
AND
BNE

;Bend moCor Co mouth open for feed sw test
Port_C
.-get I/O
•Touch_fmc
.-wait for switch
DiagFS
,- loop

LDA
JSR

#6
Diag_macro

.-start -notor test
;go
.-set delay for motor tc stop
* half sec delay
.-get I/O
;lo when hit
,-no position switch found
.-pass beep
;go send it
.- done

DiagF4b:

DiagFS:

(fail beep
.-go send it

.-feed position
.-send it

DiagF6i
; ck for feed aw, all ocher sw » error
; Remember Co ceac inverc before seccing feed aw cesc,
LDA
STA
LDA
AND
CMP
BNE

#00
DAC2
Porc_C
#0Ch
#0Ch
DiagF6a

else conflicc

.-cle*- teed sw enable
.-get I/O
,-ck for front and back switches made
;ck both are clear
.-wait till are

Page 6

A-121

Diag7.asm

LDA
AND
BNL
JMP

Port_p
*03
DiagF i
DiagF6b

;get I/O
(ck f . tile and -nvert
■if »ither hi then wait till clear
:jun
when all clear

LDA
JSR
JMP

#3
Diag_macro
DiagF6

.•fail beep when any ocher switch made
■•send it
i loop

DiagF6a:

DiagF6b:
/mod diag6 ;

inc random number seeds until feed switch down

INC
LDA
STA

Seed_l
TMA_LSB
Seed_2

.-create random based on switches
.•get timer A also (should be unknown)
.save it

LDA
STA
LDA
AND
BEQ
LDA
STA
LDA
JSR

•FFh
DAC2
Port _D
#Ball_invert
DiagF6
*00
DAC2
#7
Diag_macro

/turn DAC2 on to enaule feed switch
/out
.get I/O
;ck if feed switch closed
/loop until switch closed

; end mod

DiagF7:

.■clear feed sw enable
.■pass beep
;go send motor/speech

;Light sensor test

;rocd Co condensate for new light sense routine
;
t

;
;
i

LDA
STA
LDA
ORA
STA
JSR

*00
Light_tiroer
Stat_3
#LC_re££
Stat_3
aet_lighc

.•clear light timer to force new reff cycle
:set it
,-get system
.•make this pass a new light reff
;update
;go get light level, establish 1st level

LDA
AND
STA

Stat_4
*Nt_do_lt_dim
Stat_4

.-clear indicating change > reff level
I update system

JSR
LDA
STA

OeC_light
TEMPI
Light_re£f

;go get light level Bangle
jget new count
.-update system

JSR
LDA
AND
BEQ
LDA
JSR

Qet_light
Stat_4
•Do_lght_dim
DiagF7a
•8
Diag_macro

»go get again and test for lower level
;get system
/check if went dinner
/loop if no change
/pass beep and motor motion
/send it

LDA
STA
LDA
ORA

.-Sound sensor test
*00
/clear sound timer to force new reff cycle
Sound_timer
.set
Stat_l
.•get system again
»Snd_re££
/make this pass a new sound reff

Diag.7a:

DiagFB:

Page 7

A-12+

Diag7.asm

STA
JSR
LDA
AND
STA

Stat_l
Oet_sound
Stat_4
•Nt_do_snd
Stat_4

.-update
;go get light level,

JSR
LDA
ANJ
BEQ
LDA.
JSR

Oet_sound
Stat_4
•Do and
DiagFBa
•9
Diag_jnacro

jgo get again and test for lower level
/get system
.-check if went louder
.-loop if no change
.-pass beep and motor motion
.-send it

establish 1st level

/
.-clear indicating change > reff level
.-update system

DiagFBa:

/
DiagF9:

;wait for I.R.
LDX

DiagF9al:
LDA
JSR
DEX
BN’E

•10

data received
.-.-Tracker change, orginal is 100

#1
Half delay
DiagF9al

JSR
BCC
CMP
BNE
LDA
JSR
JMP

D_IR_test
DiagF9
#A5H
DiagF9a
•1
Diag_macrc
DiagFlO

.-go ck for data
,-,-loop until data receive
.-is it the expected data
.-jump if wrong data
/pass beep and motor motion
/send it
z done

LDA
JSR

•3
Diag_macro

,-fail beep and motor motion
,- send it

LDA
JSR

.-all tests complete,
• 10
;
Half_delay
t

LDA
JSR

• 10
Diag_macro

DiagF9a:

DiagFlO:

send to sleep node

,-put furby in sleep postion
.-send it

, Clear RAM to 00H
; we dont clear Seed_l or Seed..2 since they are randomized at startup.

LDA
LDX

•00H
•D7h

i data for fill
; start at ram location

STA
DEX
CPX
BNE

00,X

; base 00. offset x
l next ram location
; check for end
l branch, not finished

Clear:

• 7FH
Clear

,- Random voice selection here
LDA

•80h

;get random/sequential split

Page 8

A-123

D-ag7.esm

STA

IN_DAT

.-save for random routine

LDX
LDA
JSR

•00
•lOh
Ran_»eq

,-moke sure only gives random
;get number of random selections
igo get random selection

TAX
LDA
STA

Voice_toble,X
Rvoice

jget new voice
;set new voice pitch

On power up or reset. Furby nust go select a new name ,,, ahw how cute.
JSR
AND
STA

Random
•lFh
Name

1

LDA
STA
STA

•FFh
' 'ungry_counter
.ck_o-unter

,- insure not hungry or sick
.-max not hungry
.-Max not sick

.-get 32 possible
.-set new name pointer

Clear training or all sensors
LDA

#00

STA
STA

"ai.p_ID
Tenp_ID2

STA
STA

Tilt_leamed
Tilt_lm_cnt

STA
STA

Feed_leamed
Feed_lm_cnt

STA
STA

Light_learned
Light _lm_cnt

STA
STA

Dark_leamed
D»rk_lm_cnt

STA
STA

Front_learned
Front_l m_cnt

STA
STA

Sound_learned
Sound_lm_cnt

STA
STA

Wake_leamed
Wake_lm_cnt

STA
STA

Invert_learned
Ir.vert_lm_cnt

JMP

OoToSleep

.-write ee memory YO •

Page 9

A-124

;

Furby27.inc ;;

change twinkle egg song to one pass

in macro

Lowered voice+10,voice+9 to voice»8
Wayne1s mods:
Furby5b.inc = add voice selection table
Dave'e
added feed (mouth open)
170,171,173,174,175,182,183,190,191,194
mod foi ir
NOW 24 NAMES
TABLES

MACRO

SAY

FRONT

2-64
65-83
84
85-101
102
103-145
146-169
170-201
202-238
239-275
276-292
293-307

1-61
b2-78

FORTUNE
o-too-mah
HANGOUT
delay
FEED
WAKE
HUNGER
INVERT
BACK
SICK
LIGHT
DARK
SOUND
TILT
IR
FURBY SAYS

Diagnostic
Names

79-106
l1'-’
108-123
124-156
157-166
169-192
193-236
237-250
251-265
266-289

308-331
332-351
290-309
352-392
310-350
393-429
351-390
50 TICKLE,196
430-434
392 NO LIGHT,
435,436
115,116
437,436
95,96,97 98,99,100
439
440-450
400-410
117,118
451,452
399,395,110
453
399,395,396
454
455
456
457
458
459
460
461
462

463
464
465
466
467
NEW EASTER EGGS
468
469
470
471
472

399,395,112
399,395,397
395,395,114
399,395,117
399,395,398
399,335.120
399
399,395,131
399,395,143
399,395,145
399,395,152
399,395,166
399,395,175
399,395,177

PET.71 SOUND,391

LIGHT,196 F

393 LOUD SOUND
*• hide and seek sounds
•
hide and seek reuse
1 iurby says win sound
t

1
•1
J
e
•

•
;
i
j
;
i
*
;
i
i
;
s
t

hide and seek sounds
(more)
me koko
me sieme
(very)
(good)
roe e-day
(please)
me do-moh
(done)
me toh-dye
(no)
me boo
me toh-loo
(like)
me ay-tay
(hungry)
delay 1.3 seconds
me way-loh
(sleep)
(up)
me u-tye
(light)
me ay-loh
(me)
me kah
(big)
me dah
me boh-bay
(worry)
(down)
me nah-bah

DODLE DO, ME LOVE YOU
SING A SONG
BURB ATTACK
1 furby says win sound
46
1 furby says lose sound

473

1

474
475

1
;

153,123
394
1 411
| 412

me done (leaving any game)
LISTEN ME
HIDE ME (hide and seek)
aaah.aaah,aaah feed dmh

>
>
J
:

;

;

MORE NAMES
476
477
478
479
480
481
482
483
484

1
1
1
!
1
1
1
1
1

399,395,186
399,395,194
399,395,201
399,195,208
359,375,224
399,3.5,228

me
me
me
me

i
)
t
•

*
e
f

39S,395,398,152
399,395,152,166
399,395,224.152

me
me
me
me
me

•
•
•

*
#•

loo-loo
ah-may
noo-loo
may-may

(joke)
(pet)
(happy)
(love)
may-lah
(hug)
dah-noh--lah (big dance)
toh-loo-■ka
(like me)
ka-da
(me big)
may-lah--ka
(hug me)

1

;not used

476-511

|1413-510

;

TRAP FOLLOW MACROS FOR NAME

;

SENSOR

I

;
;

HANGOUT 97
WAKE-UP 149
BACK 248

;
;

LIGHT BRIGHT 305
IR 393.404.414,421

;
;
;
;

GAMES
FORTUNE 69,77
HIDE AND SEEK 475
FURBY SAYS 474

I

end trap macros for name

;
,•
;

reused ;

reused ; reused ;
72,380
|
15
115

;
;DANCE
;not used

;

407,416

reused

1395
367,376

reused
;
i

furby says win sounds
LAUGH

; me (for use with names)
; reused for dance easter egg

396-399

Sensor tables

; Each sensor has 4 speech/motor tables based on age 1-4,
each.

of 16 entries

;
•

These tables r.re 16 bit entries,
*••• ‘001 is illegal ****

;
;

This number calls the MACRO tables to get specific speech and moto:
tables. MACRO tables chain together multiple motor and speech tables.
The first 8 entries of speech is random selections and
the second 8 entries is sequential.

;

;

the user enters as a decimal

1-511

one of three voice pitci. selections, randomly load table and
table is randomly called on power up to select a new voice.
THis gives a number added to voice 3 to create which voice will be

A-127

used.
Voice_table:
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB
DB

S_voicel
S_voice2
S_voice3
S_ oicel
S_voice2
S_voice3
S_voicel
S_voice2
S_voice3
S_voicel
S_voice2
S_voice3
S_voicel
S_voice2
S_voice3
S_voicel

; Bal 1 tilt sensor table
;DO TILT
Tilt_ SI:

Tilt.,S2:

Tilt..S3:

*8
#9
*10
*11
*12
*13
*14
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

1
1
1
I
1
1
1
1
1
1
1
1
1
1
1
1

•1
*2
*3
*4
15
•6
*7

AGE
AGE
AGE
AGE
AGE
AGE
AGE

2
2
2
2
2
2
2

•8
*9
*10
*11
*12
*13
*14
*15
*16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

2
2
2
2
2
2
2
2
2

*1

AGE 3
AGE 3

352
353
354
352
355
356
357

•1
*2
»3
•4
#5
*6
*7

E
DW
DW
DW
DW
DW
DW
DW

358
359
360
361
362
363
352
364
365

DW
DW
DW
DW
DW
DW
DW
DW
DW

366
367
366
355
368
357
369
370
359

DW
DW
DW
DW
DW
DW
DW

360
371
372
373
374
355
37 c

DW
DW

36c
355

DW
dw
DW
DM
DW
DW
DW
DW

12

A-J28

Tilt_S4:

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

376
377
378
379
380
381
382
383
384
385
365
375
363
386

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

366
355
387
377
388
389
380
381
382
383
390
385
391
375
384
392

;
;
;
•
•
•
;
;
i

•
t

:

•
;
l

;
;
;
•
;
;
;

;
•

13
14
•5
16
•7
18
•9
110
111
112
113
114
• 15
116

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

3
3
3
3
3
3
3
3
3
3
3
3
3
3

■1
•2
13
14
15
17
18
•9
• 10
• 11
• 12
• 13
• 24
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4

#1
12
13
■4
•5
•6
•7
18
•9
• 10
• 11
• 12
• 13
• 14
115
116

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

16

SickSl:
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

276
280
283
286
288
288
289
290
291
292
288
288
289
290
291
292

DW
DW
DW
DW
DW
DW
DW
DW

277
280
284
286
288
288
289
290

Sick_S2:
AGE 2
; *1
*GE 2
; »2
AGE 2
; *3
AGE 2
; 14
AGE 2
1 »5
; 16 AGE 2
AGE 2
; »7
; *s AGE 2

A-129

DW
DW
DW
DW
DW
DW
DW
DW

291
292
286
288
289
290
291
292

•9
»10
111
112
•13
114
•15
•16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AC*

2
2
2
2
2
2
'
2

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

276
281
285
287
288
288
289
290
291
292
288
288
289
290
291
292

•1
•2
•3
•4
•5
•6
•7
•8
•9
• 10
■ 11
• 12
• 13
• 14
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

3
3
3
3
3
3
3
3
3
3
3
3
3
3
2
3

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

279
282
285
287
288
288
289
290
291
292
288
288
289
290
291
292

•1
•2
•3
•4
•5
•6
•7
18
•9
• 10
• 11
• 12
113
■ 14
• 15
• 16

Sick_S3:

Sick_S4:

; SWITCH FOR DO SOUND1 js
Sour.cLSl
DW
332
DW
333
DW
334
DW
335
DW
336
DW
337
DW
338
DW
339
DW
332
DW
333
DW
334

•1
•2
■3

AGE 4
AGE 4
«3E 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4

AGE
AGE
AGE
• 4 AGE
• 5 AGE
• 6 AGE
•7
AGE
18 AGE
•9
AGE
no AGE
• li AGE

1
1
1
1
1
1
1
1
1
1
1

A-130

DW
DW
DW
DW
DW

335
336
337
338
339

• 12
• 13
114
• 15
• 16

AGE
AGE
AGE
AGE
AGE

Sound_S2: DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

332
333
340
341
342
337
343
344
332
333
340
341
342
337
343
344

•1
•2
13
•4
•5
16
•7
•8
•9
• 10
• 11
• 12
*13
• 14
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

Sound_S3:

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

332
333
345
346
342
337
347
339
332
333
345
346
342
337
347
339

#1
*2
•3
•4
•5
•6
•7
•8
•9
*10
• 11
• 12
• 13
• 14
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

Sound_S4: DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

348
333
349
346
342
350
347
351
348
333
349
346
342
350
347
351

•1
•2
13
•4
•5
•6
*7
•8
•9
• 10
*11
• 12
*13
• 14
• 15
116

AGE 4
AGE 4
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

1
1

1
1

1
2
2
2
2
2
2

2
2
2
2
2
2
2
2

2
2
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3

A-131

DO HUNGER

Hunger_Sl:
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

no
1"3
176
180
182
173
165
189
193
194
173
195
189
193
194
199

•1
#2
*3
•4
*5
#6
*7
•8
*9
•10
*11
»12
*13
*14
*15
*16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AOF
AGE

1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

171
174
177
181
183
174
186
190
193
194
174
196
190
193
194
200

fcl
*2
*3
*4
#5
#6
*7
*8
*9
*10
*11
•12
*13
*14
»lr
•16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

172
174
178
181
184
175
187
191
193
173
175
197
191
193
173
200

*1
*2
*3
14
*5
*6
*7
*8
*9
*10
*11
*12
*13
*14
*15
*16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3

DW
DW

171
175

Hunger_S2:

Hunger_S3:
I

;
;
;
;
;
;
;
;
;
;

;
;
;
I

;

Hunger_S4:
; *1
; *2

AGE 4
AGE 4

A-132

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

179
181
184
175
188
192
194
193
174
198
192
193
194
201

; Fortune teller game
,-GEORGE 07/04/98
Fortyes_Sl:
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

; *3
; *4
; *5
1
*6
}
*7
. *8
; *9
*10
; *11
; *12
; *13
; *14
; *15
; *16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

4
4
4
4
4
4
4
4
4
4
4
4
4
4

MACRO 65-83,SAY 62-78

065
066
067
068
069
070
071
072
073
074
075
076
077
078
079
080

»1
*2
*3
*4
*5
#6
*7
*8
*9
*10
*11
*12
*13
*14
*15
*16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
x»GE
AGE

1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

081
082
083
065
066
067
068
069
070
071
072
073
074
075
076
077

*1
*2
*3
*4
*5
*6
*7
*8
*9
*10
•11
*12
•n
*14
*15
*16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2

Fortyes_S2;
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

;END FORTUNE
;END GEORGE 07/04/98
;

A-133

;touch £ront sensor table
;GEORGE 07/03/98 MACRO 2-64,SAY 1-61
Tfrnt_Sl: DW
002
tl
DW
003
•2
DW
004
•3
DW
005
(4
DW
006
•5
DW
007
*6
DW
0^8
•7
DW
0 9
18
DW
10
*9
DW
11
«10
DW
« 12
*11
DW
013
*12
DW
014
*13
DW
015
*14
DW
016
#15
DW
017
#16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

#1
•2
#3
*4
#5
#6
#7
18
#9
• 10
• 11
#12
• 13
#14
#15
#16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

2
2
2
2
2
->

•1

3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
4
4
4
4
4
4
4

T£rnt_S2: DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

018
019
020
021
022
023
024
025
026
027
026
029
030
031
032
033

T£rnt_S3: DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

034
035
036
037
038
039
040
041
002
042
043
044
045
046
047
048

#3
•4
#5
#6
#7
025
#9
#10
• 11
• 12
• 13
• 14
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
•8
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

T£mt_S4: DW
DW
DW
DW
DW
DW
DW

049
050
051
052
053
054
055

•1
•2
13
•4
•5
•6
•7

AGE
AGE
AGE
AGE
AGE
AGE
AGE

.

1

2
2
2
2
2
2
2
2
2
2

AGE

A-134

an

056
057
058
an
059
CM
060
CM
061
DW
062
an
063
0/1
064
■•END GEORGE 07/03/98

(8
•9
• 10
*11
• 12
• 13
• 14
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

117
103
104
105
106
107
108
109
110
111
112
113
114
111
115
116

11
•2
•3
•4
*5
•6
*7
•8
*9
*10
*11
• 12
*13
• 14
*15
*16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

118
119
120
121
122
123
124
125
126
127
128
113
114
111
129
116

•1
•2
•3
•4
*5
•6
•7
•8
•9
*10
• 11
• 12
• 13
114
• 15
• 16

AGE
AGE
AGE
AGE
AC
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2

DW
CM

I

; feed sense table
; DO FEED (Do 1INVERT)
.•GEORGE 07/05/98
Feed_Sl:
DW
CM
DW
DW
DW
DW
DW
DW
DW
DW
DW

0/1
DW
DW
DW

on
Feed_S2:

an
DW
DW
DW
DW

an
an
an
DW
DW
DW
DW
DW
DW
CM
DW
Feed_S3
DW

an
an
an
an

118
130
131
132
122

■1 AGE 3
•2
AGE 3
•3
AGE 3
•4
AGE 3
•5
AGE 3

A-135

CM

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

107
133
134
110
111
135
113
114
111
135
116

«6
#7
#a
•9
#10
■ 11
#12
■ 13
114
#15
■ 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

3
3
3
3
3
3
3
3
3
3
3

•1

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

4
4
4
4
4
4
4
4
4
4
4
4

■4
#5
■6
#7
■8
#9
#10
#11
• 12
• 13
#14
#15
#16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AOE
AGE

1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

#1
#2
■3
■4
■5
16
•7
18
#9
• 10

AGE 2
AGE 2
AGE 2
AGE i
AGE 2
AGE 2
AGE 2
AGE 2
AGE 2
AGE 2

Feed_S4:
DW
145
DW
136
137
DW
DW
138
DW
139
DW
140
DW
141
DW
142
DW
110
DW
111
DW
143
DW
113
DW
114
DW
111
Dir)
144
DW
116
END GEORGE 07/C5/98
touch front sensor table
; DONE SG
; DO WAKE
Wakeup_Sl:
DW
146
149
DW
DW
150
DW
154
CM
158
DW
159
DW
163
DW
166
CM
146
CM
149
CM
150
CM
154
CM
158
DW
159
DW
163
DW
166
Wakeup_S2: DW
DW
DW
Dir)
DW
DW
CM
CM
CM

DW

147
149
151
155
158
160
163
167
147
149

*2

■3
*4
■5
■6
■7
■8
■9
#10
#11
#12
#13
• 14
#15
#16

■1
■2
#3

)

4
4
4

A-136

DW
DW
EW
DW
DW
DW
dw
DW
cw
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

151

• 11
• 12
*13
*14
115
*16

AGE
AGE
AGE
AGE
AGE

;

«l
*2
•3
*4
*5
*6
*7
*8
*9
*10
*11
*12
*13
*1/
»: j
*16

AGE
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGF 3
AGE 3
AGE 3
AGE 3
AGE 3

;

*1
*2
*3
•4
*5
*6
•7

AGE
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AwE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4

155
158
160
163
167
148
149
152
156
158
161
164
168
148
149
152
15l
158
161
164
168
148
14_153
157
158
162
165
169
148
149
153
157
158
162
162
169

*8
•9
*10
*1.
*12
*13
*14
*15
*'.6

AGE 2
2
2
2
2
2

;Ball tilt sensor taole
; DO TILT (HANGING 01"")
; START HANGOUT MACRC 15-101,SAY 79-106
;GEORGE 07/04/98

I

f

DO HANGOUT
DO BORED

Bored_Sl!
W
DW
DW
D-J
DW
DW
DW
DW
Ds'
DW

,-bored time out
085
1
AGE 1
086
*2
AGE
087
•3
AGE
088
*4
AGE
089
*5
AGE
090
•6
AGE
091
*7
AGE
092
*8
AGE
093
•9
AGE
094
*10 AGE

1
1
1
1
1
1
1
1
1

.-sleep
;dobedo
,-yawn

A-137

DW
DW
DW
DW
DW
DW

095
095
096
091
097
098

;
;
j
;
;
;

#11
#12
#13
#14
#15
#16

AGE
AGE
AGE
AGE
AGE
AGE

1
1
1
1
1
1

DW
DW
DW
DW
DW
DW
DW
DW
DW
Dir;
DW
DW
DW
DW
DW
DW

085
086
087
088
089
099
091
092
093
094
095
095
096
091
097
098

; *1
; #2
1 #3
; #4
; #5
j #6
; #7
; #8
; #9
; #10
; #11
; #12
; #13
; #14
; #15
; »16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
ACE
AGE
AGE
AGE
AGE
AGE
AGE

2
2
2
2
2
2
2
2
2
2
2
2
2
1 ; sleep was 96 droh
2
2

Bored_S3: EM
DW

; #1
; #2
; #3

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

085
086
087
088
101
100
091
092
093
094
095
095
096
091
097
098

3
3
3
3
3
3
3
3
3
3
3
3
3
1 ;s1eep was 96 droh
3
3

Bored_S4: DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

085
086
087
088
101
100
091
092
093
094
095
095
096
091
097
098

;
;

4
4
4
4

Bored_S2

EW

; END HANGOUT
;END OEORGE 07/04/98

;

#7

;
;
;

#8
#9
#10
#11
#12
#13
#14
#15
#16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

#1
#2
#3
#4
#b
16
#7
18
#9
#10
#11
#12
(13
#14
#15
#16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

;

#4

: #5
; #6

;

;
;
;
;
;

;
;
;

j
;
j
;
;
;
;
;
;
;
;

;sigh
;sigh
; haa
; sleep wat.
;heey
iphone

96 droh

4

4
4
4

4
4
4
4
4
1 ;sleep was 96 droll
4 FIXED DMH WAS 96
4

,-GEORGE 07/07/98
; INVERT
;Ball invert sensor table

;
lnvrt_si: dw
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
dw
DW

202
203
206
208
212
213
217
219
220
224
228
232
234
232
234
235

•1
12
■3
•4
(5
16
•7
*8
•9
• 10
111
• 12
113
114
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

Invrt_S2: DW
EW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

202
203
207
209
212
214
217
219
221
225
229
232
234
232
234
236

•1
•2
•3
•4
•5
•6
•7
18
•9
• 10
• 11
• 12
113
• 14
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2

Invrt_S3: DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
EW
DW

202
204
207
210
212
215
218
219
222
226
230
232
234
232
234
237

lnvrt_S4: DW
EW
DW
DW

202
205
207
211

}

AGE 3
•1
12
AGE 3
•3
AGE 3
14
AGE 3
• 5 AGE 3
kO AGE 3
•7
At . 3
• 8 AG 2 3
•9
AGE 3
• 10 AGE 3
• 11 AGE 3
112 AGE 3
• 13 AGE 3
114 AGE 3
• 15 AGE 3
• 16 AGE 3
•1
•2
•3
•4

AGE
AGE
AGE
AGE

4
4
4
4

A-J39

V*
11

DW
DW
DW
DW
L.1

DW
DW
DW
DW
DW

212
216
218
219
223
227
231
233
231
233
234
238

•5
16
•7
(8
19
• 10
• 11
• 12
• 13
• 14
*15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

4
4
4
4
4
4
4
4
4
4
4
4

»1
*2
»3
*4
*5
*6
*7
*8
»9
*11
»12
«13
*14
»15
»16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

;GEORGE 07/07/98
; BACK
.•touch back sensor table
Tback_S1: DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

239
240
244
248
249
248
253
256
258
239
248
261
263
266
269
272

J
;
;
;
;
;
;
;
j
;
;
;
;
;
;
;

Tback_S2: DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
EW
CW
DW
DW
DW

239
241
245
248
250
248
253
257
259
239
248
262
264
267
270
273

1

;
;
;
i
j
;
;
;
;
;
;
;
;
;
;

'1
«2
*3
*4
*5
16
*7
*8
*9
(10
*11
(12
»13
(14
*15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2

Tback_S3: DW
DW
DW
DW
DW
DW
DW
DW
DW

239
242
246
248
251
248
254
257
260

;
;
j
;
J
;
;
;
;

*1
«2
*3
*4
*5
*6
*7
*8
*9

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

3
3
3
3
3
3
3
3
3

A-140

DW
DW
DW
DW
DW
DW
DW

239
248
261
265
268
271
274

#10
• 11
• 12
• 13
• 14
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE

3
3
3
3
3
3
3

Tback_S4: DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

239
243
247
248
252
248
255
257
260
239
248
262
265
268
271
275

•1
•2
•3
•4
•5
•6
•7
•8
•9
110
• 11
*12
• 13
• 14
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4

;END GEOROE 07/07/9S

; I. R. receive cable
; DO IR
IR_S1:

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

393
393
393
393
394
395
396
396
291
399
399
400
401
401
402
403

•1
•2
•3
14
•5
•6
•7
•8
19
• 10
• 11
• 12
• 13
• 14
• 15
116

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

IR_S2:

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

404
404
404
405
405
406
407
407
291
409
409

11
•2
•3
•4
•5
16
•7
•8
•9
; *10
; 111

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

2
2
2
2
2
2
2
2
2
2
2

A-141

IR_S3:

IR_S4:

DW
DW
DW
DW
DW

400
411
411
412
413

;
;
;
;
;

*12
*13
114
*15
*16

AGE
AGE
AGE
AGE
AGE

2
2
2

EW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

414
414
414
414
414
415
416
416
291
406
418
428
419
419
420
403

1

;
;
;
;
;
;
;
;
;
;
;
;
;
;
;

*1
*2
*3
*4
*5
*6
*7
*8
*9
*10
*11
*12
*13
*14
*15
#16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

421
421
421
421
421
422
423
423
291
425
426
427
428
428
429
413

;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;

*1
*2
*3
*4
*5
#6
*7
#8
#9
#10
#11
#12
#13
#14
#15
#16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
3

.•light sense table
;DO LIGHT
Light_Sl:
DW
DW
DW
DW
DM

EW
DW
DW
DW
DW
DW
DW
DW
DW

293
305
294
295
296
297
298
299
293
305
294
295
296
297

2

2

bright sense)

*1

1

•

; 003
;
;
I
;

*3
#4
*5
*6
! *7
; *8
; *9

AGE 1
•2 A
AGE 1
AGE 1
AGE 1
AGE 1
AGE 1
AGE 1
AGE 1

; 003

110 AOE 1

i

;
;
;
;

#11
*12
*13
*14

AGE
AGE
AOE
AGE

1
1
1
1

A-ifi

DW
DW

298
299

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

293
305
294
300
296
301
298
299
293
305
294
295
296
301
298
299

DW
DW
DW
dw
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

302
305
294
303
296
304
298
299
302
305
294
303
296
304
298
299

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

302
305
294
306
296
307
298
299
302
305
294
306
296
307
298
299

; *15 AGE 1
; *16 AGE 1

Light_S2:
;
; 003

; 003

*1

AGE 2
AGE 2
; *2
; *3 AGE 2
AGE 2
; *4
; *5 AGE 2
J *6 AGE 2
; *7 AGE 2
; *8 AGE 2
: »9
AGE 2
; *10 AGE 2
3 *11 AGE 2
; *12 AGE 2
; *13 AGE 2
; *14 AGE 2
; *15 AGE 2
; *16 AGE 2

Light_S3:
;

*1

;
;
;
;
;
;
;

*3
*4
*5
*6
*7
*8
*9

;
;
;
;
;
;

*11
*12
*13
*14
*15
*16

;

*1

;
;
}
;
;
;
;

*3
*4
*5
*6
*7
*8
19

; 003

; 003

AGE 3
AGE 3
; *2
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
; *10 AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3
AGE 3

Light_S4:

1•

; 003

;003
; *11
; *12
; *13
3 *14
; *15
; *16

AGE 4
AGE 4
; *2
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
; *10 AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4
AGE 4

(•
;light sense table (DARK SENSE)
; DO DARK

A-143

; DO LIGHT DARKER
Dark_Sl:
EW
308
DW
309
DW
310
DW
311
DW
312
DW
313
DW
314
DW
315
DW
308
DW
309
DW
310
DW
311
DW
312
DW
313
DR'
314
DW
315

*1
12
13
*4
•5
«6
•7
18
•9
• 10
• 11
• 12
• 13
• 14
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

1
1
1
1
1
1
1
1
«
1
1
1
1
1
1
1

Dark_S2:
DW
DW
DR)
DW
DW
DW
DW
DW
DR)
DW
DW
DW
DW
DW
DW
DW

316
317
318
311
319
313
320
315
316
317
318
311
319
313
320
315

•1
•2
•3
•4
•5
•6
•7
•8
•9
• 10
• 11
112
• 13
• 14
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2

Dark_S3:

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

321
322
323
311
319
313
324
325
321
322
323
311
319
313
324
325

•1
•2
13
•4
15
•6
•7
18
•9
• 10
• 11
• 12
*13
• 14
• 15
• 16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3

Dark_S4:

DW
DW
DW
DW
DW
DR)
DW

326
327
328
311
329
313
330

•1
•2
•3
•4
*5
•6
•7

AGE
AGE
AGE
AGE
AGE
AGE
AGE

4
4
4
4
4
4
4

’

A-144

DW
DW
DW
DW
DW
DW
DW
DW
DW

331
326
327
326
311
329
313
330
331

;
;
;
;
;
1

1
1

;

18
*9
*10
#11
#12
#13
#14
#15
#16

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

4
4
4
4
4
4
4
4
4

; Hide and Seek game Cable
Peek_Sls

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

Peek_S2:

Peek_S3:

000

} »0
#1
#2
•3
«4
#5
#6
#7
#8
•9
#10
#11
#12
#13
#14
#15

000
000
000
000
000
000
000
000
000
000
000
000
000
000
000

DW
000
DW
000
DW
000
DW
000
DW
000
DW
000
DW
000
DW
000
DW
000
DW
000
DW
000
DW
000
DW
000
DW
000
DW
000
DW
000

DW
000
DW
000
DW 000
DW 000
DW 000
DW
000
DW 000
DW
000
DW
000
DW
000
DW 000

1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

;
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

#0
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2

AGE 2

;
AGE
AGE
#3
AGE
#4
AGE
#5
AGE
AGE
#6
#7
AGE
#8 AGE
#9 AGE
#10 AGE

»0
3
3
3
3
3
3
3
3
3
3

AGE 3

;
;
;

#1
#2
#3
#4

;
;
;

#5
#6
#7

;

#8

;
;

#9
#10

;
;
;
;
;

AGE 1

AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE
AGE

#11
<12

#13
#14
#15

•1
#2

A-145

DW
DW
DW
DW
DW
Peek_S4:

000
000
000
000
000

DW
000
DW 000
DW 000
DW 000
DW 000
DW 000
DW 000
DW 000
DW 000
DW 000
DW 000
DW

UUU

DW 000
DW 000
DW 000
DW
000

Macro_grpl:

*11
*12
*13
*14
*15

AGE
AGF
AGE
AGE
AGE
.

•1
•2
*3
*4
*5

AGE
AGE
AGE
AGE
AGE
*6
AGE
*7
AGE
*8
AGE
*9
AGE
*10 AGE
" A*

• «*•

3
3
3
3
3
(0
4
4
4
4
4
4
4
4
4
4
4

*12 AGE 4
*13 AGE 4
*14 AGE 4
; *15 AGE 4

;pcints into macro tables

DW
DW
DW
DW
DW

Tbll_Macro0
Tbll_Macrol.Tbll_Macro2,Tbll_Macro3,Tbll_Macro4,Tbll_Macro5
Tbll_Macro6,Tbll_Macro7,Tbll_Macro8,Tbll_Macro9,Tbll_Macro10
Tbll_Macroll,Tbll_Macrol2.7bll_Macrcl3,Tbll_Hacrol4,Tbll_Macrol5
Tbll_Macrol6,Tbll_Macrol7,Tbll_Macrol8,Tbll_Macrol9,Tbll_Macro20

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

Tbl1_Macro21,Tbll_Macro22,Tbll_Macro2 3,Tbll_Macro24,Tbll_Hacro2 5
Tbll_Macro26,Tbll_Macro27.Tbll_Kacro28.Tbll_Macro29,Tbll_Macro30
Tbll_Macro31,Tbll_Macro32.Tbll_Hacro33,Tbll_Macro34,Tbll_Macro35
Tbll_Macro36,Tbll_Macro37,Tbll_Macro38,Tbll_Macro39.Tbll_Macrc4 0
Tbll_Macro41,Tbll_Macro42,Tbll_Macro43,Tbll_Macro44.Tbll_Macro45
Tbll_Macro46,Tbll_Macro47.Tbll_Macro48,Tbll_Macro49,Tbll_Macrc50
Tbll_Macro51,Tbll_Mac-o52,Tbll_Macro53,Tbll_Macro54,Tbll_Macro55
Tbll_Macro56.Tbll_Mac.o57,Tbll_Hacro58.Tbll_Macro59,Tbll_Macro60
Tbll_Macro61,Tbll_Macro62,Tbll_Hacro63,Tbll_Macro64,Tbll_Hacro65
Tbl1_Macro66,Tbll_Macro67,Tbll_Macro68,Tbll_Macro69.Tbll_Macro70
Tbll_Macro71,Tbll_Macro72,Tbll_Macro73.Tbll_Macro74.Tbll_Macro75
Tbll_Macro76,Tbll_Macro77,Tbll_Macro7B.Tbll_Macro79.Tbll_Macro80

DW
DW

Tbll_Macro81.Tbll_Macro82,Tbll_Macro83,Tbll_Macro84,Tbll_Macro85
Tbll_Macro86,Tbll_Macro87,Tbll_Macro88,Tbll_Macro89,Tbll_Macro90

DW
DW

Tbll_Macro91,Tbll_Macro92,Tbll_Macro9 3,Tbll_Macro94,Tbll_Macro95
Tbll_Macro96, Tbll_Hacro97 , Tbll_Macro98,Tbll_Macro99

DW

Tbll_MacrolOO,Tbl]_Macrol01.Tbll_Macrol02.Tbll_Macrol03,Tbll_Macro

104
DW

Tbll_Macrol05,Tbll_Macrol06,Tbll_Macrol07,Tbll_Macrol08,Tbll_Macro

109
DW

Tbll_MacrollO,Tbll_Macrolll,Tbll_Macroll2.Tbll_Macroll3.Tbll_Macro

114
DW

Tbll_Macrol15,Tbll_Macrol16.Tbll_Macrol17.Tbll_Macroll8,Tbll_Macro

119
DW

Tbll_Macrol20,Tbll_Macrol21,Tbll_Hacrol22,Tbll_Macrol23.Tbll_Macro

A-146

124
DW

Tbll Macrol25,Tbll_Macrol26.Tbll_Macrol27

Macro_grp2:
DW
DW
133
DW
138
DW
143
DW
148
DW
153
DW
158
DW
163
DW
168
DW
173
DW
178
DW
183
DW
188
DW
193
DW
198
DW
203
DW
208
DW
213
DW
218
DW
223
DW
228
DW
233
DW
238
DW
243
DW
248
DW
253
DW

/points into macro tables

Tbl2_Macrol28
Tbl2_Macrol29,Tbl2_Macrol30,Tbl2_Macrol31,Tbl2_f

rol32.Tbl2 Macro

Tbl2_Macrol34,Tbl2_Macrol35,Tbl2_Macrol3 6,Tbl2_Kacrol37, Tbl2_Macro
Tbl2_Macrol39,Tbl2_Macrol40,Tbl2_Macrol41,Tbl2 Macrol42,Tbl2_Macro
Tbl2_M«crol44,Tbl2_Hacrol45.Tbl2_Macrol46,Tbl2_Macrol47,Tbl2_Macro
Tbl2_Macrol49.Tbl2_Macrol50.Tbl2_MacrolSl.Tbl2_Macrol52.Tbl2_Macro
Tbl2_Macrol54.Tbl2_Macrol55,Tbl2_Macrol56,Tbl2_Macrol57,Tbl2 Macro
Tbl2_Macrol59,Tbl2_Macrol60,Tbl2_Macrol61.Tbl2_Macrol62,Tbl2_Macro
Tbl2_Macrol64,Tbl2_Macrol65,Tbl2_Macrol66,Tbl2_Macrol67,Tbl2_Macro
Tbl2_Macrol69,Tbl2_Macrol70,Tbl2_Macrol71.Tbl2_Macrol72.Tbl2 Macro
Tbl2_Macrol74,Tbl2_Macrol75,Tbl2_Macrol76,Tbl2_Macrol77,Tfcl2_Kacrc
Tbl2_Macrol79. Tbl2_Kacrol80. Tbl2_Macrol81,Tbl2_Kacrcl82. Tbl2_Hacrc
Tbl2_Macrol84.Tbl2_MacrolS5,Tbl2_Macrol86,Tbl2_Macrol87,Tbl2_Macro
Tbl2_Macrol89,Tbl2_Macrol90.Tbl2_Macrol91,Tbl2_Macrol92.Tbl2 Macro
Tbl2_Macrol94,Tbl2_Macrol95.Tbl2_Macrol96,Tbl2_Macrol97,Tbl2_Macro
Tbl2_Macrol99,Tbl2_Macro200,Tbl2_Macro201,Tbl2_Macro202.Tbl2_Macro
Tbl2_Macro204.Tbl2_Macro205.Tbl2_Macro206.Tbl2_Macro207.Tbl2_Macro
Tbl2_Maero2 0 9,Tbl2_Macro210,Tbl2_Macro211,Tbl2_Macro212.Tbl2_Kacro
Tbl2_Macro214,Tbl2_Kacro215,Tbl2_Macro216,Tbl2_Macro217,Tbl2_Macrc
Tbl2_Macro219,Tbl2_Macro220.Tbl2_Macro221. Tbl2_Macro222,Tbl2_Macro
Tbl2_Macro224,Tbl2_Macro22S,Tbl2_Macro226.Tbl2_Macro227,Tbl2_Macro
Tbl2_Macro229,Tbl2_Macro230.Tbl2_Macro231,Tbl2_Macro232,Tbl2 Macro
Tbl2_Macro234.Tbl2_Macro235,Tbl2_Macro236.Tbl2_Macro237,Tbl2 Macro
Tbl2_Macro239.Tbl2_Macro240,Tbl2_Macro241,Tbl2_Macro242.Tbl2 Macro
Tbl2_Macro244,Tbl2_Macro245,Tbl2_Macro246.Tbl2_Kacro247,Tbl2_Macro
Tbl2_Macro249,Tbl2_Macro250,Tbl2_Macro251,Tbl2_Macro252,Tbl2_Macro
Tbl2_Macro254,Tbl2_Macro255

Macro_grp3:

; points into macro tables

A-147

DW
Tbl3_Hacro256
DW
Tbl3_Macro257,Tbl3_Macro258,Tbl3_Macro259,Tbl3_Macro260,Tbl3_Macro
261
DW
Tbl3_Hacro262,Tbl3_Macro263.Tbl3_Macro2t-4.Tbl3_Mccro26S.Tbl3_Macro
266
DW
Tbl3_Macro267,Tbl3_Macro268,Tbl3_Macro269.Tbl3_Macro270,Tbl3_Hacro
271
DW
Tbl3_Macro272,Tbl3_Macro273,Tbl3_Macro274,Tbl3_Macro275,Tbl3_Macro
276
DW
Tbl3_Macro277,Tbl3_Macro278,Tbl3_Macro279,Tbl3_Macro280,Tbl3_Macro
281
DW
Tbl J_Macro282 , Tbl3_)'acro283 . Tbl3_Macro284 , Tbl3_Macro285 , Tbl3_Macro
286
DW
Tbl3_Macro287. Tbl3_Macro288, Tbl3_Macro289, Tbl 3_tfacro290, Tbl3_Macro
291
DW
Tbl3_Macro292,Tbl3_Macro293,Tbl3J1acro294,Tbl3 Macro295,Tbl3_Macro
296
DW
Tbl3_Macro297.Tbl3_Macro298.Tbl3_Macro299,Tbl3_Macro300,Tbl3_Macro
301
DW
Tbl3_Hacro302,Tbl3_Macro303,Tbl3_Macro304,Tbl3_Macro305,Tbl3_Macro
306
DW
Tbl3_Kacro307,Tbi3_Macro308.Tbl3_Macro309,Tbl3_Macro310,Tbl3_Kacro
311
DW
Tbl3_Macro312,Tbl3_Hacro313.Tbl3_Macro314.Tbl3_Hacro315.Tbl3_Macro
316
DW
Tbl3_Macro317,Tbl3_Macro318.Tbl3_Macro319,Tbl3_Macro320,Tbl3_Macro
321
DW
Tbl3_Macro322,Tbl3_Macro323.Tbl3_Macro324,Tbl3_Macro325,Tbl3_Macrc
326
DW
Tbl3_Macro327,Tbl3_Macro32S,Tbl3_Macro329,Tbl3_Macro330,Tbl3_Macro
331
DW
Tbl3_Macro332.Tbl3_Macro333.Tbl3_Macro334.Tbl3_Macro335,Tbl3_Macro
336
DW
Tbl3_Macro337,Tbl3_Macro338.Tbl3_Macro339.Tbl3_Macro340,Tbl3_Macro
341
DW
Tbl3_Macro342,Tbl3_Macro343,Tbl3_Macro344,Tbl3_Macro345,Tbl3_Macro
346
DW
Tbl3_Macro347.Tbl3_Macro348,Tbl3_Macro349,Tbl3_Macro350.Tbl3_Macro
351
DW
Tbl3_Macro352,Tbl3_Macro353,Tbl3_Macro354.Tbl3_Macro355.Tbl3_Macro
356
DW
Tbl3_Macro357,Tbl3_Kacro358,Tbl3_Macro359,Tbl3_Macro360,Tbl3_Macro
361
DW
Tbl3_Macro362,Tbl3_Macro3 63.Tbl3_Macro3 64,Tbl3_Macro3 65,Tbl3_Macro
366
DW
Tbl3_Macro367,Tbl3_Macro368,Tbl3_Macro369,Tbl3_Macro370,Tbl3_Kactw
371
DW
Tbl3_J4acro372,Tbl3_Macro373.Tbl3_Macro374,Tbl3_Macro375.Tbl3_.'aci
376
DW
Tbl3_Macro377,Tbl3_Macro378.Tbl3_Macro379.Tbl3_Macro380,Tbl3_Macro
381
DW
Tbl3_Macro382,Tbl3_Macro383
;
Macro_grp4 :
;points liito macro tables
DW
DW
389
DW
394

Tbl4_Macro384
Tbl4_Hacro385,Tbl4_Macro386,Tbl4_Macro387,Tbl4_Macro388,Tbl4_Macro
Tbl4_Macro390,Tbl4_Macro391,Tbl4_Macro392,Tbl4_Macro393,Tbl4_Macro

DW
399

Tbl4_Macro395,Tbl4_Macro396,Tbl4_Macro397,Tbl4_Macro398,Tbl4 Macro

DW
404

Tbl4_Macro400,Tbl4_Macro401,Tbl4_Macro402,Tbl4_Macro403.Tbl4_Macro

Of!

Tbl4_Macro405, Tbl4_Macro406. Tbl,_Macro407 , Tbl4_Macro408, Tbl4J4acro

409
DS-.’

Tbl4_Macro410 . Tbl4_Macro4U . Tbl4_Macro412, Tbl4_Macro413 , Tbl4_Macro

DW
419
DW
424
DW
429

Tbl4_Macro415,Tbl4_Macro416.Tbl4_Macro417,Tbl4_Macro418,Tbl4_Macro
Tbl4_Macro420.Tbl4_Macro421,Tbl4_Macro422,Tbl4_Macro423.Tbl4_Macro
Tbl4_Macro425,Tbl4_Macro426.Tbl4_Macro427,Tbl4 Macro428,Tbl4_Macro

DW
434
DW
439
DW
444
DW
449
DW
454

Tbl4_Macro430.Tbl4_Macro431,Tbl4_Macro432,Tbl4_Macro433.Tbl4_Macro

DW
459

Tbl4_Macro455,Tbi4_Macro456.Tbl4_Macro457.Tbl4_Macro458.Tbl4 Macro

CM

Tbl4_Macro4 60.Tbl4_Macro461.Tbl4_Macro4 62,Tbl4_Macro4 63,Tbl4_Macro

Tbl4_Macro435,Tbl4_Macro436,Tbl4_Macro437,Tfc14_Macro438,Tbl4 Macro
Tbl4_Macro440,Tbl4_Macro441,Tbl4_Macro442,Tbl4 Macro443,Tbl4 Macro
Tbl4_Macro445.Tbl4_Macro446.Tbl4_Macro447,Tbl4_Macro448,Tbl4 Macro
Tbl4_Macro450,Tbl4_Macrc451,Tbl4_Macro452,Tbl4_Macro453,Tbl4 Macro

464
DW
469
DW
474
DW
479
DW
484
DW
489
DW
494
DW
499
DW
504
DW
509
DW

Tbl4_Macro465,Tbl4_Macro466.Tbl4_Macro467,Tbl4_Macro468.Tbl4_Macro
Tbl4_Macro470,Tbl4_Macro471,Tbl4_Macro472.Tbl4_Macro473,Tbl4_Macro
Tbl4_Macro475,Tbl4_Macro476.Tbl4_Macrc477.Tbl4_Macro478.Tbl4_Macro
Tbl4_Macro480.Tbl4_Macro481,Tbl4_Macro482.Tbl4 Macro483.Tbl4_Mocro
Tbl4_Macro465,Tbl4_Macro486.Tbl4_Macro487.Tbl4_Macro488,Tbl4 Macro
Tbl4_Macro490,Tbl4_Macro491,Tbl4_Macro492.Tbl4_Macro493,Tbl4_Macro
Tbl4_Macro495,Tbl4_Macro496,Tbl4_Macro497,Tbl4_Macro498 Tbl4_Macro
Tbl4_Macro500,Tbl4_Macro501,Tbl4_Macro502,Tbl4_Macro503,Tbl4_Macro
Tbl4_Macro505,Tbl4_Macro506,Tbl4_Macro507,Tbl4 Macro508,Tbl4 Macro
Tbl4_Macro510,Tbl4_Macro511

J
J

; MACRO TABLES
;
;
;
;

The sensor cables point into the Macro table. This table in turn
gets speech and motor Cable data.
This can be an entry of 1-511 and effectively chains motor and
speech tables together to reuse previous speech motor segments.

A-149

;
;

The first group of numbers i3 the speech/motor table value.
The last line is the terminator of 00. (00 so 'DB1 takes 1 less byte)

;

ex:

1 « will call

the saysent 1 and the motor table 1.

Tbll_Macro0:
DW
DW
;
i
;
;
l
1

00

511
; end

FOR NAME TESTING DMH
WAKE
DW
124
DW
125
DW
126

DW
DW
DW

1
i

399
395
224
152

DW
DW

00

;02

;
;
;

delay
ME
MAY-LAH-KA

end

(MIDDLE)

;
;
;

put
DW
DW
DS’f

sounds and motions together
5
(first sound and motion, in this case *5"
3
(next sound and motion, in this case ’3‘)
00
( end of sequence)

1
Tbll_Macrol:
DW
DW

01
00

; end

;GEORGE 07/03/98
Tbll_Macro2:
DW
001
DW
00

;FRONT SEQ1AGE1
;end

Tbll_Macro3:
DW
DW

002
00

;FRONT SEQ2AGE1
; end

Tbll_Macro4:
DW
DW
DW

003
004
00

;FRONT SEQ3AGE1

Tbll_Macro5:
DW
DW
DW

003
005
00

jFRONT SEQ4AGE1

006
00

;FRONT SEQ5AGE1
; end

;end

; end

;
Tbll_Macro6:
DW
EW

A-150

Tbll_Macro7:
DW
DW
DW

006
007
00

Tbll_MacroB:
DW
DW
DW

008
003
00

Tbll_Macro9:
DW
DW
DW

009
003
00

; end

Tbll_MacrolO:
DW
DW

010
00

S end

Tbll_Macroll:
DW
DW
DW

Oil
Cvl
00

; end

012
001
00

, end

Tbll_Macrol2:
DW
DW
DW

;FRONTSEQ6AGE1
;end

;FRONT SEQ7AGE1
;end

;FRONTSEQ8AGE1

;FRONT SEQ9agel

;frontseqlOagel

;seqli FRONT AGE1 ADD SAY001

Tbll_Macrol3
DW
DW
DW

001
013
00

Tbll_Macrol4:
DW
DW
DW

014
003
00

; end

I
Tbll_Macrol5:
DW
DW

015
00

;end

Tbll_Macrol6:
DW
DW

016
00

jend

Tbll_Macrol7:
DW
DW
DW
DW
DW

001
017
018
001
00

;end

Tbll_Hacrol8:
DW
DW

019
00

; end

*
Tbll_Macrol9:
DW

001

*
;seqi2 FRONT AGE1 ADD SAY001
; end

;seql3 FRONT AGE1 ADD SAY003

;seql4 FRONT AGE1

;seql5 FRONT AGE1

;seql6 FRONT AGE1 BETWEEN 2(20)

;FRONT SEQ1AGE2

A-151

EM
EM

020
00

.•FRONT SEQ2 AGE2
; and

•

Tbll__Macro20:
EM
EM
EM

010
021
00

;SEQ3AGE2 FRONT ADD SEQ9AGE1
;«nd

;
Tbll_Macro21:
EM
DW
EM

022
023
00

;end

Tbll_Macro22:
DW
DW

024
00

; SEQ5 AGE2 FRONT
; end

Tbll_Macro23:
DW
EM

025
00

; SEQ6 AGE2
; end

026
027

; SEQ 7 AGE2 FRONT PARTI

Tbll_Macro24:
EM
DW
DW

00

; SEQ4 AGE2

FRONT

FRONT

; end

Tbll_Macro25:
DW
DW
DW
DW
EM

026
026
028
003
00

;end

Tbll_Macro26:
DW
DW

029
00

; end

)
Tbll_Macro27:
DW
DW
EM

030
029
00

;SEQ 10 FRONT AGE2
; end

Tbll_Macro28:
DW
DW
EM

022
031
00

;SEQ 11 FRONT AGE2
; end

Tbll_Nacro29:
DW
DW
DW

001
032
00

;SEQ 12 FRONT AGE 2
; end

; SEC 8 AGE2

FRONT

;SEQ 9 FRONT

i

033

;end

I

Tbll_>lacro31:
DW

1

;aeql3 FRONT AGE1&2 ADD SAY003

s

014
003
00

r-*

Tbll_Macro30:
DW
DW
DW

AGE2

A-152

CM

00

;end

i

Tbll_Macro32:
DW
DW
EM

034
001
00

jend

Tbll_Mac ->33:
DW
DW
EM

001
035
00

; end

001
036
00

; ent'

Tbll_Macro34:
DW
CM
CM

j SEQ15 FRONT AGE2

;SEQ16 FRONT AGE2

;SEQ1 FRONT AGE3

;
Tbll_Macro35:
DW
DW
DW

003
037

;SEQ2 FRONT AGE3

00

; end

Tbll_Macro36:
DW
EM
DW

010
038
00

; end

Tbll_Macro37:
DW
DW
DW

015
039
00

; end

Tbll_Macro38:
DW
DW
DW

015
023
00

jend

040
00

jend

Tbll_Macro39:
DW
CM

; SEQ3 FRCSJT AGE 3

;SEQ4 FRONT AGE3

;SEQ5 FRONT AGE3

;SEQ6 FROOT AGE3

Tbll_Macro40:
DW
DW
DW

041
003
00

;end

Tbll_Macro41:
DW
DW
DW

042
003
00

; end

Tbll_Macro42:
DW
DW
DW

043
001
00

; end

044
00

; end

;SEta7 FRONT AGE3

;SEQ8 FRONT AGE3

,-SEQlO FRONT AGE3

Tbll_Macro43:
DW
DW

; St-Ql 1 FRONT AGE3

;

A-H3

Tbll_Macro44:
DW
DW
DW
Tbll_Kacro45:
DW
DW
DW
DW

045
001
00

;SEQ12 FRONT AGE3
;end

001
046
047
00

,-RASBERHY HE HE HE
;end

(HEEY,TICKLE ME)

;SEQ13 fRONT AGE3

(NANNY,NANNY)

ADD20

ADD20

;
Tbll_Macro4 6:
DW
DW
DW
DW

003
028
003
00

.-SEQ14 FRONT AGE3
; and

Tbll_Macro47:
DW
DW
DW
Tbll_Macro40:
DW
DW
DW
DW

;SEC15 FRONT AGE3

034
001
00

;end

001
048
049
00

; end

;SECT6 FRONT AGE3

Tbll_Macro49:
DW
DW

044

;
Tbll_Mncro50:
DW
DW
DW
DW

001
050

;

051
00

; end

Tbll_Macro51:
DW
DW
DW
DW
DW
Tbll_Macro52:
EW
DW
DW
DW
DW
DW

00

003
052
050
053
00

;SEQ1

FRONT AGE4

;end

SEQ2

FRONT ACE4

;SEC3

(VOU)

;EE03

(ME)

FRONT AGE4
FRONT AGE4

jend

026
053
054
050
001
00

;3EQ4

FRONT AGE4

;end

1

Tbll_Macro53:
DW
DW
DW
DW

007
055
056
00

;

SEQ5 FRONT AGE4

;end

Tbll_Macro54:

A-154

DW
DW

026
053

DW
DW
DW

054
052
018
00

; end

001
046
055
00

;SEQ7 FRONT AGE4
;end

DW
Tbll_Macro55:
DW
DW
DW
DW
Tbll_Macro5 6:
DW
DW
DW
DW
DW
DW
DW
Tbll_Macro57:
DW
DW

;SEQ6 FRONT AGE4

026
057
050
051
058
003
00

;SEQ8 FRONT AGE4
; end

042,001
00

;SEQ9 FRONT AGE4
; end

Tbll_Macro58:
DW
DW
DW

059
050
00

;end

Tbll_Macro59:
DW
DW
DW

044
003
00

;SEQ11 FRONT AGE4
; end

Tbll_Macro60:
DW
DW

001
00

;SEQ12
; end

001
046
047
00

SEQ13 FRONT AGE4
;end

Tbll_Macro62:
DW
DW
DW

026
060
00

;SE014 FRONT AGE4
; end

Tbll_Macro63:
DW
DW
DW

061
003
00

SEQ15 FRONT AGE4
;end

Tbll_Nacro61:
DW
DW
DW
DW

Tbll_Macro64:
DW
DW
DW

;SEQ10 FRONT AGE4

007
051
00

;SEQ16 FRONT AGE4
;end

A-155

•END GEORGE 07/03/98

;GEORGE 07/04/98
;START FORTUNE

;
Tbll_Macro65:
DW
DW
DW
00

062
051 ;72
;end

[FORTUNE 1

l

Tbll_Macro66:
DW
DW
DW
DW
00

003
063
003
[end

Tbll_Macro67:
DW
DW
DW

090
064
063

DW

00

;end

Tbll_Macro68:
DW
DW
DW
00

065
063
;end

Tbll_Macro69:
;
DW
•
DW
DW
DW
DW
DW
00

067
068
053
066
063
; end

[FORTUNE 2

[94
[FORTUNE 3

;
[FORTUNE 4

;

MODIFIED FOR NAME DMH
;FORTUNE

[FORTUNE 5

;
Tbll_Macro70:
DW
DW
DW

069
070
00

Tbll_Macro71:
DW
DW
DW
DW
DW
DW

[FORTUNE 6
,-end

067
[FORTUNE 7

00

068
071
073
072
; end

Tbll_Macro72:
DW
DW
00

074
;end

[FORTUNE 8

Tbll_Macro73:
DW
DW
DW
00

074
063
;end

[FORTUNE 9

;
Tbll_Macro74:

DW
DW

069
00

; end

TblX_Macro7 5:
DW
DW
DW
00

064
069
; end

Tbll_Macro76:
DW
DW
DW
DW
00

073
064
069
;end

Tbll_Macro77:
i
DW
;
DW
DW
DW
DW
DW
00

067
068
053
066
069
; end

Tbll_Macro78:
DW
DW
DW
DW
DW

00

Tbll_Macro79:
DW
DW
DW
Tbll_Macro80:
DW

;FORTUNE 10

;FORTUNE 11

.•FORTUNE 12

; MODIFIED TO WORK WITH NAME DMH

.•FORTUNE 13

071
073
069
075
; end

076
077
00

.•FORTUNE 14

•
; FORTUNE 15
; end

00

076
069
; end

Tbll_Macro81:
DW
DW
00

078
; end

.•FORTUNE 17 SEQ1 AOE2

Tbll_Macro82:
DW
DW
DW
00

078
063
;end

.■FORTUNE 18

SEQ2 AOE2

Tbll_Macro83:
DW

078

.•FORTUNE 19

SEQ2 AGE2

DW
DW

EW
DW

00

.•FORTUNE 16

069
;end

Tbll_Macro84
067
DW
DW
068
DW
00
;END GEOROE 137/04/98
; END FORTUNE

;SPECIAL -O TWO MA"
1

;

A-157

JSTART HANGOUT
;GEORGE 07/04/98
Tbll_Macro8S:
DW
079
DW
080
DW
079
DW
080
DW
00
j end
Tbll_Macro86:
DW
DW
DW
00

081
081
;end

;SEQ1 HANGING

;SEQ2 HANGING

Tbll_Macro87:

;

DW
DW
DW
DW
DW
00

082
083
083
084 ;SEQ3 HANGING
; end

(YA DA DA OMPAH

I
Tbll_Macro88:
DW
DW
DW
DW
DW
00

085
085
086
087
;SEQ4 HANGING (LA LA)
;end

Tbll_Macro89:
DW
DW
DW
00

088
; SEQ5 HANGING
;end

Tbll_Macro90:
DW
DW
DW

089
089
090

DW
DW
DW

00

Tbll_Macro91:
DW
DW
DW
DW
DW

00

Tbll_Macro92:
DW
DW
DW
DW

00

I
Tbll_Macro93:
DW
DW

00

bRUMM BABABUHI

oe7

;SEQ6 HANGING

091
092
;end

093

;SEQ7 HANGING

(SOFTER)

093
093
094
;end

095
095
055

,-WAS 76

;SE&8 HANGING

;end

096

;SEQ9 HANGING

;end

l

A-158

Tbll_Macro94:
DW
DW
00

;SEQ10 HANGING

; end

098

o
o

S

Tbll_Macro95:
DW

097

;end

Tbll_Macro9 6:
DW
DW
00

099
; end

;SEQ11 AND SEC12 HANGING

; SEQ13 HANGING

(SIGH)

(HAA)

Tbll_Macro97:
DW
DW

00

Tbll_Macro98:
DW
DW
DW
DW
DW
DW
Tbll_Macro99:
DW
DW
DW
DW
DW
DW
00

100
; end

;SEQ14 SEQ15 HANGING

101
102
101
101
001
00

; SEQ16

hANGINO

IP

;SEQ6 HANGING AGE2

;SEQ6 HANGING AGE2

Of!

089
089
090

DW
DW
DW

105
104
103

DW

00

; end

Tbll_Macrol01:
DW
DW
DW
00
;END HANGOUT

087
106
; end

;SEQ5 AGE3 4

107

.•Fortune pause

Tbll_Macrol02:
DW
DW

00

ONE)

; 20
; end

089
089
090
091
103
; end

Tbll_Macrol00:
DW
DW

(hEEY)

; end

;END GEORGE 07/04/98
;GEORGE 07/05/98
;FEED TABLE
Tbll_Macrol03:
DW
DW
DW
DW

00

108
110
109
; end

; SEQ2 FEED AGE1

A-1S9

;
Tbll_Macrol04:
DW
DW
DW
DW
DW
00
Tbll_Macrol0 5:
DW
DW
DW
DW
DW
00
Tbll_Macrol06:
DW
DW
DW
DW
DW
DW
00
Tbll_Macrol07:
DW
DW
DW
DW
00
Tbll_Macrol08:
DW

;SEQ3 FEED AGE1

108
110

;SEQ4 FEED AGE1

113
109
;end

108
108
078
110
109

;SEQ6 FEED AGE1
; 109

108
115
116
117

;SEQ7 FEED AGE1

076
117
120
118
; end

g

Tbll_Macrol09:
DW
DW
DW
DW
DW
00

Tbll_Macrolll:
DW
DW
DW
00
Tbll_Macroll2:
DW
DW
DW
DW

; 127

108
105
114
;end

110
; end

)
Tbll_MacrollO:
DW
DW
DW
20
DW
00

;SEQ5 FEED AGE1

; end

o
o

DW
DW
DW
DW

108
111
112
109
;end

;125

;SEQ8 FEED AGE1

108
115
; SEQ9 FEED AGE1
;end

108
109
;end

;SEQ10 FEED AGE1

108

;SEQ11 FEED AGE1
; 125

076
117
119

A-160

DW

00

Tbll_Macroll3:
DW
DW
DW
DW
00
Tbll_Macroll4:
DW
DW
DW
DW
00
Tbll_Macroll5:
DW
DW
DW
DW
DW
Tbll_Macroll6:
DW
DW
DW
DW
00
Tbll_Macroll7:
DW
DW
DW
DW
00

; end

108
108

;SEQ12 FEED AGE1

109
;end

108
115
001
; end

;SEQ13 REUSE 10 FOR14

108
076
117
119

;SEQ15 FEED AGE1
; 125

FEED AGE1

; 20

00

108
108
109
; end

;SEQ1 FEED AGE1

l)

;WIERD SHIT SEE 101
108
120
109
; end
• end-AGE!

Tbll_Macrol18:
DW
DW
00

108
121
109
,-end

Tbll_Macroll9:
DW
DW
DW
DW
00

108
051
109
; end

DW
DW

Tbll_Macrol20 s
DW
DW
DW
DW
DW

00

Tbll_Macrol21:
DW
DW
DW
DW
DW

00

Tbll_Macrol22:

108
073
112
109
; end

;SEQ1 FEED AGE2

;72
;SEQ2 FEED AGE2

; 122
;SEQ3 FEED AGE2

108
051
113
109
; end

;72

,
;SEQ4 FEED AGE2

•

A-161

DW
DW
DW
DW
EM
DW

106
106
078
051
00

Tbll_Macrol23:
EM
DW
DW
DW
00

108
105
114
; end

108
115
116
069
110
; end

Tbll_Macrol25:
EM
DW
DW
DW
DW
00

076
057
120
118
; end

DW
DW
DW

00

Tbll_Macrol27:
DW
DW
DW
00
J
;

108
115
001
; end

108
109

; 109
; SEQ6

; 118

FEED AGE2

;SEQ7 FEED AGE2

; 125
; 78
; SEQ8

; SEQ9

--

--GE2

FEED AGE2

; 20

;SEQ10 FEED AGE2

;end

Macro_grp2 was here

Tbl2_Macrol28:
EM
DW
DW
DW
DW
00
;
;

;SEQ5 FEED AGE2

109
;end

Tbll_Macrol24:
DW
DW
DW
DW
DW
DW
00

Tbll_Macrol26:
DW

; 127
;72

108
076
069
119
;end

125
118
SEQ11

FEED AGE2

Kaero_grp2 was here

Tbl2_Macrol29:
DW
DW
DW
DW
DiV
00

108
076
069
119
; end

125

lie
SEQ15

FEED AGE2

;

A-162

Tbl2_Macrol30:
DW
DW

108
110

DW
DW

00

Tbl2_Macrol31:
DW
DW
DW
DW
DW

109
jend

108
111

00

072 ;143
109
tend

Tbl2_Macrol32:
DW
DW
DW
DW
DW
00

108
110
058 ;144
109
.-end

Tbl2_Macrol33:
DW
DW
DW
DW

108
115
lib
117

DW
DW

00

Tbl2_Macrol34:
DW
DW
DW
DW
DW

00

;SEQ2 FEED AGE3

;SEQ3 FEED AGE3

; SEQ4 FEED AGE3

051
;end

;72

076
117

;125

121
118
;end

;SEQ7 FEED AGE3

;SEQ8 FEED AGE3

Tbl2_Macrol35:
DW
DW
DW
DW
DW

00

108
076
117
122
;end

Tbl2_Macrol36:
DW
IA\’
DW
DW
00

108
051
109
;end

; 125
;SEQ11 FEED AGE3

; 72

Tbl2_Macrol37:
DW
DW
DW
DW
DW

00

Tbl2_Macrol38:
DW
DW
DW
DW

108
073
072
109
;end

108
051
058
109

; 122
;121

;72
;144

A-163

DW

00

I
Tbl2_Macrol39:
DW

.-end

00

108
108
078
051
109
.-end

I
Tbl2„Macrol40:
DW
DW
DW
DW
00

108
105
123
; end

DW
DW
DW
DW
DW

1
Tbl2_Macro’U:
DW
DW
DW
DW
DW
DW
00

108
115
116
057

Tbl2_Maerol42:
DW
DW
DW
DW

076
069
121

DW

00

Tbl2_Macrol43:
DW
DW
DW
DW
DW

00

Tbl2_Macrol44:
DW
DW
DW
DW
DW
00
Tbl2_Macrol45:
EM
EM
DW
DW
00

051
; end

; 127
;72

; SEQ 6
; 109

; 78
s72

; 125
; 118

118
; end

108
125
057
122
.-end

; 78

108
125
057

; 78

122
; end

108
121
109
,-end

;END FEED
;END GEORGE 07/05/98
JWAKE
.-GEORGE 07/06/98
Tbl2_Macrol46:
;SG DONE
DW
124
;02
DW
125
DW
126
DW
00
; end

A-164

Tbl2_Macrol47:
DW
DW
DW
DW

00

Tbl2_Macrol48:
DW
DW
DW
DW
00

;SG DONE
124
125
127
;end
;SG DONE
124
128
127
;end

•
Tbl2_Macrol49:
DW
DW
DW
DW
00

;SG DONE
124
129
055
;•0c
; end

Tbl2_Macrol50:
DW
DW
DW
DW
DW
00

;SG DONE
124
130
131
132
; end

Tbl2_Macrol51:
DW
DW
DW
DW
DW
00

;SG DONE
124
130

Tbl2_Macrol52:
DW
DW
DW
DW
DW
00

;SG DONE
124
130
133
132
; end

Tbl2_Macrol53:
DW
DW
DW
DW
DW
00

124
130
133
123
; end

Tbl2_Macrol54:
DW
DW
DW
DW
DW

00

0
Tbl2_Macrol55:
DW
DW
DW
DW
DW
00

131
123
! end

;*12

; SG DONE

;"12

;SG DONE
124
134
135
131
; end
; SG DONE
124
134
136
131
; end

A-16S

Tbl2_Macrol56:
DW
DW
DW
DW
DW
00

;SG DONE
124
134
135
133
;end

#
Tbl2_Macrol57:
DW
DW
DW
DW
DW
DW
00

; SG DONE
124
134
136
137
133
; end

Tbl2_Macrol58:
DW
DW
DW
DW
00

; SG DONE
124
138
139
; end

Tbl2_Macrol59:
DW
DW
00

;SG DONE
124
140
141
.-end

Tb1 "’_Macrol60:
DW
DW
DW

;SG DONE
124
142
143

;

DW
DW

;

DW
DW

00

141
; and

Tbl2_Macrol61:
DW
DW
DW
DW
,DW
DW
00

;SG DONE
124
144
145
146
141
;end

Tbl2_Macrol62:
DW
DW
DW
DW
00

fSG DONE
124
147

J
Tbl2_Macrol63:
DW
DW
EM

00

2
Tbl2_Mncrol64:
DW
DW
DW
DW
DW

141
; end
;SG DONE
124
148
; enu
;SG DONE
124
053
;29
149
150
00
; end

A-166

Tbl2_Macrol65:
DW
DW
DW

00

;SG DONE
124
151
i end

Tbl2_Macrol66:
DW
DW
DW
DW
DW
DW
00

;SG DONE
124
152
131
153
154
;end

Tbl2_Macrol67:
DW
DW
DW
DW
EM
DW
00

;SG DONE
124
152
155
153
154
; end

Tbl2_Macrol68:
DW
DW
; DW
DW
DW
DW
DW
00

;SG DO!4E
124
152
153
131
156
154
: end

Tbl2_Kacrol69:
DW
DW
DW

;EG DONE
124
053
;”38
155

DW
156
CM
154
DW
00
; end
;END WAKE 07/06/98
;END GEORGE
•GEORGE 0./06/98
;HUNGER
Tbl2_Macrol70:
DW
DW
DW
DW

00

;SG D-NE
159
165
412
; end

Tbl2_Macrol71:
160

DW
DW

165
412
; end

00

Tbl2_Macrol72:
DW
DW

00

Tbl2_>!acrol73s

; DMH

;SG DONE

DW

DW

;HUNGER

; DMH

;SG DONE
160
; end
;SG DONE

A-167

DW
DW
DW
DW
DW

168

00

159
165
412
; end

;DMH

I

Tbl2_Macrol74:

DW
DW
DW

;SG DONE
168
160
165

DW
DW

00

i2_Macrol75:
DW
DW
DW
DW
00
Tbl2_Macrol7 6:
DW
DW
DW
DW
00
Tbl2_Macrol77:
DW
DW
DW
DW
00

412
;end

;DMH

; SG DONE
168
160
412
;DMH
; end
;SG ..ONE
163
158
159
; end
; SO DONE
163
158
160
; end

Tbl2_Macrol78:
DW
DW
DW
DW
00

;SG DONE
163
157
159
;end

Tbl2_Macrol79:
DW
DW
DW

;SG DONE
163
157
160
; end

DW

00

;
Tbl2_Macrol80:
DW
DW
DW
DW

DW

00

Tbl2_Macrol81:
DW
DW
DW
DW
DW
00
Tbl2_Macrol82:
DW

;SG DONE
163
168
159
163
; end
;SG DONE
163
168
160
163

;SG DONE
163

A-168

DW
DW
DW
DW
DW
DW
EW

00

163
168
161
159
165
412
; end

; DMH

Tbl2_Macrol83:
DW
DW
DW
DW
DW
DW
DW
DW
00

jSG DONE
163
163
168
161
160
165
412
;DMH
; end

Tbl2_Macrol84:
DW
DW
DW
DW
DW
DW
00

;SG DONE
163
163
168
162
160
; end

Tbl2_Macro185:
DW
DW
DW
DW
00

; SG DONE
168
161
159
; end

Tbl2_Mocrol86:
DW
DW
DW
DW
00

;SG DONE
168
161
160
;end

Tbl2_Macrol87:
dw
dw
DW
DW
00

;SG DONE
168
162
159
;end

I

Tbl2_Macrol88:
DU
DW
DW

iSG DONE

00

168
162
160
; end

Tbl2_Macrol89:
DW
DW
DW
DW
00

168
166
159
;end

DW

I
Tbl2_Macrol90:
DW
DW
DW

;SG DONE

; SG DONE
168
167
159

A-169

; DMH

Tbl2_Macrol9B:
DW
DW
DW
DW
00

;SO DONE
168
162
160
; end

;
Tbl2_Macrol99:
DW
DW
DW
DW
DW

;SC DONE
164
168
161
159
165

A-170

DW

00

Tbl2_Macro200:
DW
DW
DW
DW
DW
DW
00
1
Tbl2_Macro201:
DW
DW
DW
DW
DW
DW

00

;end
; SG DONE
164
168

; f 840

162
159
165
j end
;SG DONE
164
168
162
160
165
;end

; 40

;END HUNGER
;END GEORGE 07/06/98

;INVERT
;GEORGE 07/07/98
Tbl2_Macro202:
; SG DONE
DW
164
; 64
DW
00
; end
Tbl2_Macro203:
DW
DW
DW
00

; SG DONE
164
; 64
169
; end

Tbl2_Macro204:
DW
DW
DW
DW’
DW

164
lo8
174
166

;SG DONE
; 64
; 40

00

175
; end

Tbl2_Macro205:
DW
DW
DW
00

164
176
;end

Tbl2_Macro206:
DW
DW
DW
00

;SG DONE
188
177
; end

Tbl2_Macro207:

00

;SG DONE
188
178
; end

Tbl2_Macro208:
DW
DW
DW

;SG DONE
170
177
177

DW

DW
DW
DW

; INVERT

;SG DONE
; 64

A-171

00

DW

;end

Tbl2_Macro209:
DW
CM
EM
DW
00

; SO DONE
170
178
177
; end

Tbl2_Macro210:
DW

;SG DONE
170
177

DW
DW
DW

00

178
; end

Tbl2_Macro2 11:
DW
DW
DW
DW
00

;SG DONE
170
178
178
;end

Tbl2_Macro2 12:
DW
DW
DW
00

; SG DONE
171
163
;63
; end

Tbl2_Macro213:
DW
DW
DW
DW

;SG DONE
171

DW
DW

00

166
179
180
165
; end

;40

;65

Tbl2_Macro214:
DW
DW
DW
DW
DW
EM
00

;SG DONE
171

Tbl2_Macro215:
DW
DW
DW
DW
DW
CM
00

;SG DONE
171
168

Tbl2_Macro216:
DW
DW
DW
EM
CM

00

Tbl2_Macro217:
CM
CM
DW

168
181
180
165
; end

179
182
165
; end

;40

;65

;65

; SG DONE
171
168
181

;40

182
; end
; SG DONE
164
;64
175
164
;64

A-172

DW

00

.-end

Tbl2_Macro218:
DW
DW
DW
DW
00

;SG DONE
164
; 64
183
164
;64
;end

Tbl2_Macro219:
DW
DW
DW
DW
00

;SO DONE
164
;64
170
170
; end

Tbl2_Macro220:
DW
DW
DW
:w
00

;SG DONE
171
179
180
; end

Tbl2_Hacro221:
DW
DW
DW
DW
00

;SG DONE
171
181
180
; end

Tbl2_Macro222:
DW
DW
DW
DW
DW
00

; S3 DONE
171

Tbl2_Macro223:
DW

;SG DONE
171

TV-’

DW
DW

00

179
184
163
; end

;63

181
185
; end

Tbl2_Macro2 24 :
DW
DW
DW
DW
00

;SG DONE
164
;64
179
186
; end

Tbl2_Mairo225:
DW
DW
DW
DW
00

;SG DONE
164
;64
181
186
; end

Tbl2_Macro22o:
DW

;SG DONE
164
; 64
181
185
;end

DW
DW
DW

00

Tbl2_Macro227:
DW
DW

;SG DONE
164
;64
181

A-173

DK
DW
DW

00

Tbl2_Mocro22B:
DW
DW
DW
DW
00

184
163
; and

; 63

;SG DONE
164
;64
179
187
; end

i

Tbl2_Macro229:
DW
DW
DW
DW

00

Ttl2_Macro230:
DW
DW
DW
DW

00

,-SG DONE
164
;64
181
187
; end
;SG DONE
172
158
178
; end

Tbl2_Macro231:
DW
DW
DW
DW
00

;SG DONE
164
;64
181
189
; end

Tbl2_Macro2 3 2:
DW
DW
DW
00

; SG DONE
172
175
; end

Tbl2_Macro233:
DW
DW
DW
00

172
183
; end

Tbl2_Macro2 34 :
DW
DW
DW
DW
00

;SG DONE

;SG DONE
172
172
164
; end

;64

i

Tbl2_Macro235:
CM
DW
00

;SG DONE
173
;end

Tbl2_Macro236:
DW

,-SG DONE
190

DW

00

; end

Tbl2 Macro237:
DW
DW
00

191
; end

•

;SG DONE

#
Tbl2__Macro238:
; SG DONE
DW
192
DW
; end
00
;FND GEORGE 07/07/98

A-174

;END INVERT
;QEOROE 07/07/98
; BACK
Tbl2_Macro239:
,-BACKSG
DW
193
DW
193
DM
00
; end
Tbl2_Macro240:
DW
DW
DW
DW
00

193
194
195
.-end

Tbl2_Macro241:
DW
DW
DW
DW
00

193
196
195
; end

Tbl2_Macro242:
DW
DW
DW
DW
00

193
194
197
;end

Tbl2_Macro243:
DW
DW
DW
DW
00

193
196
197
; end

Tbl2_Macro244:
DW
DW
DW
DW
DW
00

198
199
200
201
;end

Tbl2_Macro2 4 5:
DW
DW

198
199

DW
DW
DW

00

Tbl2_Macro246:
DW
DW
DW
DW
DW

;SGDONE

;SGDONE

;SGDONE

,S

;SGDONE

202
201
.-end
;SGDONE
198
199

Tbl2_Macro247:

DW

;148
; end

;212

;SGDONE
198
199
202
184

00

ONE

jSGDONE

200
184
00

DW
DW
DW
DW

;SGDONr

;148

;212

.-end

A-175

Tbl2_Macro248:
DW
DW
DW
00

198
198
;end

)
Tbl2_Macro249:
DW
DW
DW
DW
00

198
203
204
i end

Tbl2_Macro25J:
DW
DW
DW
DW
DW
DW
00

198
205
206
207
204
; end

Tbl2_Macro251:
DW
DW
DW
DW
DW
DW
00

198
205
208
233
204
;end

Tbl2_Macro2 52:
DW

198

DW
DW
DW
DW
DW

00

;SGDONE

;SGDONE

; SGDONE

;SGDONE

;SGDONE
205
206
233
204
; end

Tbl2_Macro253:
DW
DW
DW
DW

198
209
210
00

;SGDONE

Tbl2_Macro254:
DW
DW
DW
DW
DW
DW
00

198
209
211
212
213
jend

; end
;SGDONE

;
Tbl2_Macro255:
DW
DW
DW
DW
00

198
209
214
; end

.-SGDONE

Tbl3_Macro2 56:
DW
DW
DW

198
215
216

;SGDONE

A-176

DW
DW

217
00

Tbl3_Macro257:
DW
DW
DW
DW
DW

00

Tbl3_Macro258:
DW
DW
DW
DW
DW
DW
DW
00
Tbl3_Macrc259:
DW
DW
DW
DW
DW
DW
DW

;SGDONE
198
215
216
218
; end
;SGDONE
219
220
209
217
199
234
; end
;SGDONE
219

220
209
205
217
234
00

Tbl3_Kacro260:
DW
DW
DW
DW
DW
DW
DW
00
Tbl3_Macro261:
DW
DW
DW

; end

00

Tbl3_Macro2€2:
DW
DW
DW
DW
00

;SGDONE
219

220
209
205
218
234
; end
; SGDONE

221
222
; end
;SGDONE
221
223

222
; end

Tbl3_Macro263:
DW
DW
DW
DW
00

198
224
199
; end

Tbl3_Macro264:
DW

198

DW
DW
DW

00

;end

;SGDONE

; SGDONE
224
205
; end

;

A-177

Tbl3_Macro265:
DW
DW
DW
DW
00

198
225
205
; end

Tbl3_Macro266:
DW
DW
DW
00

226
201
;end

;SGDONE

; SGDONE

I
Tbl3_Macro267:
DW
DW
DW
DW
DW
DW

00

Tbl3_Macro268:
DW
DW
DW
DW
DW
DW

; SGDONE
198
227
227
228
229
;end
;SGDONE
198
227

00

227
230
229
; end

Tbl3_Macro269:
DW
DW
DW
DW
00

198
194
19»
;«.d

Tbl3_Macro2 0:
DW
DW

198
19.

DW
DW

00

;SGDONE

;SGDONE

205
;end

Tbl3_Macro271:
DW
DW
DW
DW

00

Tbl3_Macro272:
DW
DW
DW
DW
DW

; SGDONE
198
196
205
,-end
;SGDONE
198
235
231
199

00

;end

Tbl3 _Macro273:
DW
DW
DW
DW
DW
00

198
235
231
205
;end

; SGDONE

;
Tbl3_Macro274:

;SGDONF

A-178

DW
DW
DW
DW
DW

00

198
235
232
205
send

I
Tbl3_Macro275s
;SGDONE
DW
198
DW
236
DW
232
DW
205
DW
00
send
;END GEORGE 07/07/98
;END BACK
;GEORGE 07/08/98
; SICK

Tbl3_Macro276:
DW
DW
DW
DW
DW

OP

Tbl3_Macro277:
DW
DW
DW
DW
DW

00

Tbl3_Macro278 s
DW
dw
DW
DW
DW

00

Tbl3_Macro279:
DW
DIM
DW
DW
DW
70

;SJ DONE
237
le&
117
238
; end

sSI'-KS

;135
; 41

;40

;SG DONE
237
168
239
238
S end

s135

;SG DONE
237
168
si 35
117
s 41
240
S end

;40

;40

;SG DONE
237
53
; 45
239
240
send

l

Tbl3_Macro280:
DW
DW
DW
00

;SG DONE
237
241
send

Tbl3_Macro281:
DW

;SG DONE
237

DW
DW

00

I
Tbl3_Macro282:
DIM
DW

242
send
;SG DONE
237
243

A-179

DW
DW

00

Tbl3_Macro283:
DW
EM
EM
DW

00

;
Tbl3_Macro284:
EM
DW
DW
EM

00

244
;end
; SG DONE
250
1X7
;41
245
send
; SG DONE
250
239
245
send

;
Tbl3_Macro285!
DW
EM
DW
DW

S SG DONE
250
239
182
s51
00
send

Tbl3_Macro286:
DW
EM
EM

S SG DONE
237

EM

00

Tbl3_Macro287:
DW
DW
EM
DW

00

Tbl3_Macro288:
DW
DW

00

)
Tbl3_Macro289:
DW
DW
DW
DW
00

;
Tbl3_Macro290:
DW
DW
DW

;
Tbl3_Nacro291:
DW
DW
DW
00
;
Tbl3_Macro292:
DW
DW
EM

00

246
250

; end
;SG DONE
237
247
250

send
; SG DONE
237

; end
S SG DONE
237
248
250

;SO OONE
237
249
00
;end
;SG DONE
250
250
send
sSO DONE
250
248
s end

SEND SICK
;END GEORGE 07/08/98

A-180

;GEORGE 07/08/98
;LIGHT
Tbl3_Macro293:
DW
DW

251
00

;Tbll_Macro294:
;
DW
I
DW

.-end

263
00

end

Tbl3_Macro294:
DW
DW

252
00

; end

Tbl3_Macro295:
DW
DW

253
00

;end

Ttl3_Macro296:
DW
DW

254
00

send

Tbl3_Macro297:
DW
DW

255
00

send

Tbl3_Macro298:
DW
DW
00

256
send

Tbl3_Macro299:
DW
DW

257
00

Tbl3_Macro300:
DW
DW
00

258
; end

Tbl3_Macro301:
DW
DW
00

259
s end

Tbl3_Macro302:
DW
DW
00

260
s end

Tbl3_Macro303:
DW

261

DW

00

s end

Tbl3_Macro304:
DW
DW
00

262
s end

Tbl3_Macro305 s
DW
DW
00

263
s end

l
Tbl3_Macro306:
DW

264

RB

RB

RB

RB

RB

RB

send

A-181

DW

00

;end

;
Tbl3_JMacro307:
DW
265
DW
00
; end
;END GEORGE 07/08/98
;END LIGHT
;GEORGE 07/08/98
; DARK
Tbl3_Macro308:
DW
DW
00

266
; end

Tbl3_Macro309!
DW
DW
00

267
i end

Tbl3_Macro310:
DW
DW
00

268
; end

Tbl3_Macrc3U:
DW
DW
00

269
; end

Tbl3_Macro312:
DW
DW
00

270
; end

Tbl3_Macro313:
DW
DW
00
TbI3_Macro314:
DW
DW
00

271
; end

272
;end

Tbl3_Macro315:
DW
DW
00

273

TbI3_Macro316:
DW
DW

274

;end

00

Tbl3_Macro317i
DW
DW
00

275
;end

Tbl3_Macrc318:
DW
DW
00

276
;end

;end

;
Tbl3_Jlacro319:
DW
DW
00

277
;end

I

Tbl3_Macro320:
DW

278

A-182

DW

00

; end

Tbl3_Macro321:
DW
DW
00

279
;end

TbX3_Macro322:
DW
DW
00

280
jend

Tbl3_Macio323:
DW
DW
00

281
;end

Tbl3_Macro324:
DW
DW
00

282

Tbl3_Macro325:
DW
DW
00

283
; end

Tbl3_Hacro326:
DW
DW
00

284
; end

Tbl3_Macro327:
DW
DW
00

285
;end

Tbl3_Macro328:
DW
00

286
; end

Tbl3_Macro329:
DW
DW
00

287
:end

Tbl3_Macro330:
DW

288

DW

DW

00

; er.d

_Macro331:
DW
DW
00

289
; end

;
Tb

;END DARK
(END GEORGE 07/08/98
(GEORGE 07/08/98
(SOUND
Tbl3_MacroJ32:
DW
DW

00

Tbl3_Macro333:
DW
DW

00

290

(Sl-Al/S9-A1/S1-A2 SOUND js

(end

291

(S2-A1/S10-A1/S2-A2 SOUND js

,• end

Tbl3_»acro334:

A-183

DW
DW

00

292
;end

;S3-A1/S11-A1 SOUND js

293
.-end

;S4-A1/S12-A1 SOUND js

;
Tbl3_Macro335:
DW
DW

00

Tbl3_Macro3 3 6:
DW

310

EW

294
.-end

;S5-A1/S13-A1 SOUND

295
; end

;S6-A1/S14-A1 SOUND js

DW

00

(with say/m2)

js

Tbl3_Mncro337i
DW
DW

00

Tbl3_Macro338:
DW

310

DW

296
;end

;S7-A1/S15-A1 SOUND

297
;end

;S8-A1/S16-A1 SOUND js

298
;end

;S3-A2 SOUND js

299
;end

;S4-A2 SOUND js

DW

00

(with say/m2)

js

Tbl3_Macro339:
DW
DW

00

Tbl3_Macro340:
DW
DW

00

Tbl3_Macro341:
DW
DW

00

Tbl3_Macro342:
DW
DW
DW

00

*.
310
300
;end

;S5-A2 SOUND

(with say/m2)

js

301
;end

;S7-A2 SOUND

(with say/m2)

js

302
;end

;S8-A2 SOUND js

303
/end

;S3-A3 SOUND js

;
Tbl3_Macro343:
DW
DW
DW

00

310

I
Tbl3_Macro344:
DW
DW

00

;
Tbl3_Macro345:
DW
DW

,o

;
Tbl3_Macro346:
DW
DW

304
00

;S4-A3 SOUND js
; end

;
Tbl3_Macro347:
DW

310

DW
DW

00

305
,-end

;S7 A3 SOUND (with say/m2)

js

1

A-184

Tbl3_Macro348:
DW
DW
00

306
; end

;S1-A4 SOUND js

I
Tbl3_Macro349:
DW
DW
00

307
; end

;S3-A4 SOUND js

I
Tbl3_Hacro350:
DW
DW
00

308
.-end

;S6-A4 SOUND js

Tbl3_Macro3Sl:
CW
DW
00

309
; end

;S8-A4 SOUND js

END GEOROE 07/08/98
END SOUND

; TILT
*.
;GEORGE 07/09/93
Tbl3_Macro352:
DW
310
DW
00
; end
Tbl3_Macro353:
DW
DW
00

;S1 A1 TILT/S4 A1 TILT js

311
.-end

:S2 A1 TILT js

312
; end

;S3 A1 TILT js

00

Tbl3_Macro355:
DW
DW
00

313
j end

;S5 A1 TILT js

314
; end

;S6 A1 TILT js

315
; end

;S7 A1 TILT js

00

Tbl3_Macro358i
DW
DW
DW
00

313
316
; end

;S8 A1 TILT js

Tbl3_Macro359:
DW
DW
00

317
; end

;S9 A1 TILT js

Tbl3_Macro360s
DW
DW
00

318
; end

;S10 A1 TILT js

Tbl3_Macro354:
DW
DW

;
Tbl3_Macro3S6:
DW
DW
00
Tbl3_Macro357:
DW
DW

;

;

Tbl3_Macro36l!

A-18S

DW
DW
DW

;S11 A1 TILT js

00

310
319
; end

Tbl3_Macro362:
DW
DW
00

320
; end

;S12 A1 TILT js

321
; end

.S13 A1 TILT j«

Tbl3_Macro364:
DW
DW
00

322
;end

;SI5 A1 TILT js

Tbl3_Macro365 s
DW
DW
00

323
; end

;S16 A1 TILT js

324
; end

;S1 A1 TILT js

00

Tbl3_Macro367:
DW
DW
DW
00

324
325
;end

Tbl3_Macro368:
DW
DW
00

326
.-end

Tbl3_Macro369:
DW
DW
DW
00

313
327
; end

;S7 A2 TILT js

313
328
; end

;Sb

310
329
; end

;S11 A2 TILT js

330

;S12 A2 TILT js

I

Tbl3_Macro363:
DW
CW
00
i

I
Tbl3_Macro366:
DW
DW
I

;S2 A1 TILT js

;S5 A2 TILT js

I

Tbl3_Macro370:
DW
DW
DW
00

A2 TILT js

;
Tbl3_J4acro371:
DW
DW
EW

00

Tbl3_Macro372:
DW
DW

00

Tb±.:_Macro373:
DW
DW
DW
00

i

end

313
331
; end

;SI3 A2 TILT js

;
Tbl3_Macro374:
DW
DW
00

332
;end

;S12 A2 TILT js

A-186

Tbl3_Macro375:
DW
DW
00

333
;end

Tbl3_Macro376:
DW
DW
00

334
; end

Tbl3_Macro377:
DW
DW
DW
00

334
335
; end

Tbl3_Macro378:
DW
DW
00

336
send

Tbl3_Macro379:
DW
DW
DW

00

Tbl3_Macro380:
DW
DW

313
337
;end

313

00

338
; end

Tbl3_Macro381:
DW
DW
00

339
;end

Tbl3_Macro3£2:
DW
DW
DW
00

317
340
;end

Tbl3_Macro383:
DW
DW
00

341
;end

Tbl4_Macro384:
DW
DW
DW
DW
00

310
329
342
;end

Tbl4_Macro385:
DW
DW
DW
00

313
343
; end

Tbl4_Macro386:
DW
DW
DW
00

313
344
;end

J
Tbl4_Macro387:
DW
DW

334
345

DW

A-187

DW

00

;end

Tbl4_Macro388:
DW
DW
00

346
;end

;

;
Tbl4_Macro389:
DW
DW
DW
00

313
347
; end

Tbl4_Macro390:
DW
DW
DW
00

310
348
;end

Tbl4_Macro391:
DW
DW

313
349

DW

00

; end

Tbl4_Macro392:
DW
313
DW
350
DW
00
;er.d
;END TILT
;END GEORGE 07/09/98
; IR
;GEORGE 07/09/98
Tbl4_Macro393:
DW
351
DW
00
;end

;
Tbl4_Macro394:
DW
DW

00

1
Tbl4_Macro395:
DW
DW
DW

352

seq5,

IR agel

;end

353

00

354
,• end

J
Tbl4_Macro396:
DW
DW
DW
00

356
355
;end

seq6,

IR agel

;seq7

ir agel

;
Tbl4_Macro397s
DW
DW

00

357
;end

;seqS ir agel

358

;seq9 ir agel

l

Tbl4_Macro398:
DW
DW

00

; end

Tbl4_Hacro399:
DW
DW
00

359
; end

;
;seq

10,360 ir agel

A-188

Tbl4_Macro400:
DW
DW
00
Tbl4_Macro401:
DW
DW
00

360
; end

;seql2 ir agel,age2,age,3

361

;seql3,14 ir agel

: end

;
Tbl4_Macro402:
DW
00

362
;end

Tbl4_Macro403:
DW
DW
00

363
; end

;seql6 ir agel

Tbl4_Macro404:
DW
DW
00

364
; end

;seql.2,3 ir age2

Tbl4_Macro405:
DW
DW
00

365
; end

;seq4.5 ir age2

Tbl4_Macro406:
DW
DW
00

366
; end

;seq6 ir age2

DW

Tbl4_Macro407:
DW

;seql5

ir agel

367
.-end

;seq7,8 ir age 2

00

Tbl4_Macro408:
DW
DW
00

368
; end

;seq9

Tbl4_Macro409:
DW
DW
00

369
; end

;seqlO

Tbl4_Macro410:
DW
DW
00

370
;end

;seqll ir age2

371

;seql3,14 ir age2

DW

Tbl4_Macro411:
DW
DW
00

ir age2

ir age2

;end

Tbl4_Macro412:
DW
DW
00

372
; end

Tbl4_Hacro413:
DW
DW
00

373
;end

;seql6 ir age2

Tbl4_Macro414:
DW
DW
00

374
;end

;seql,2,3,4.5 ir age3

;seql5

ir age2

A-m

Tbl4_Macro415:
DW
DW
00

375
; end

;seq6 ir age3

Tbl4_Macro416:
DW
DW
00

376
; end

;seq7,8

Tbl4_Macro417:
DW
DW
00

377
; end

;seq9 ir age3

378
; end

;seqll

379
; end

;seql3,14

00

Tbl4_Macro420:
DW
DW
00

380
; end

;seql5 ir age3

TbX4_Macro421:
DW
DW
00

381
;end

;seql,2,3,4.5 ir age4

Tbl4_Macro422:
DW
DW
00

382
; end

;seq6

Tbl4J4acro423 :
DW
DW
00

383
; end

;seq7.8 ir age4

Tbl4_Macro424:
DW
DW
00

384
; end

;seq9

385
; end

;seqlO ir age4

386

;8oqll ir age4

Tbl4_Macro418:
DW
DW

00

Tbl4_Kacro419:
DW
DW

ir age3

ir age3

ir age3

ir age4

*

ir age4

1

Tbl4_Macro425:
DW
DW

00

Tbl4_Macro426:
DW
DW

00

;end

Tbl4_Macro427:
DW
DW

00

Tbl4_Macro428:
DW
DW
DW
DW

00

387
;end

389
388
389
;end

;seql2 ir age4

;seql4 ir age4

Tbl4_Macro429:

A-190

DW
DW
DW
00
;END GEORGE
;END IR

389
390
; ond

;seqlS ir age4

; START FURBY SAYS DHH
Tbl4_Macro430:
DW
50
; TICKLE
DW
00
; end
Tbl4_Macro431:
DW
196
DW
00

; PET
; end

Tbl4_Macro432:
DW
71
DW
00

; SOUND
; end

Tbl4_Macro433:
DW
391
DW
00

; LIGHT
;end

Tbl4_Macro434:
DW
198
DW
00

; soft purr
; end

Tbl4_Macro435:
DW
DW

392
00

Tbl4_Macro43 6:
DW
393
CW
00

; no light
; end

; loud sound
; end

Tbl4_Macro437:
115
00

; burp
;end

(hide and seek)

Tbl4_Macro438 :
DW
116
DW
00

; sigh
;end

(hide and

DW
DW

Tbl4_Macro439:
dw
dw
dw
;

;

win sound

: eek)

(dnh)

376
376
367

DW
00
;end
END FURBY SAYS DHH

;
; start diagnostic tables
Tbl4_Macro440:
DW
400
DW
00
;end

;

start diagnostic beeps

;

press key beep

I

Tbl4_Macro441:
DW
401
DW
00

; end

A-191

Tbl4_Macro442:
DW
402
DW
00

; end

Tbl4_Macro443:
DW
403
DW
00

; end

Tbl4_Macro444:
DW
404
DW
00
Tbl4_Macro445:
DW
405
DW
00

;

;

fail beep

00

00

00

Tbl4_Macro449:
DW
409
DW
00
Tbl4_Macro450:
DW
410
DW
00

;

motor cal

;

feedl

;

feed2

;

light

;

sound

;

go to sleep

tone

; end

;end

Tbl4_Macro448:
DW
408
DW

speaker test

; end

Tbl4_Macro447:
DW
407
DW

;
; end

Tbl4_Macro446:
DW
406
DW

pass beep

; end

; end

;end

; end of diagnostic tables dish
I
Tbl4_Macro451:
DW
DW
00

117
;end

;

HIDE AND SEEK SOUND DHM

Tbl4_Macro452:
DW
DW
00

118
; end

;

HIDE AIrt) SEEK SOUND DHM

Tbl4_Macro453:
DW
DW
DW
DW
00

399
395
110
; end

;

delay

;
;

ME DHM
NAME -KOKO- DMH

Tbl4_Macro454:
DW
DW
DW
DW
00

399
395
396
;end

delay
ME DHM
NAME -MEME- DMK

;
Tbl4_Macro455:

A-192

DW
DW
DW
00
Tbl4_Macro456:
DW
DW
DW
EW
Tbl4_Macro457:
DW
EW
DW
DW
00
Tbl4_Macio458:
DW
DW
DW
DW
00

399
395
112
;end

delay
ME
NAME *E-DAY" DMH

399
395
391
00

j delay
; ME
; NAME "DO-MOH" DMH
; end

399
395
114
; end

;

delay

;
;

ME
NAME -TO-TYE- DMH

399
395
117

;
;
;

delay
ME
NAME "BOO* DHM

; end

Tbl4_Macro459:
DW
DW
DW
DW
00

399
395
398
; end

delay
ME
NAME -TOH-LOO- DHM

Tbl4_Macro460:
DW
DW
DW
00
DW

399
395
120
; end

delay
ME
NAME -A-TAY- DHM

Tbl4_Macro461:
DW
DW
DW
DW
00

399
395
131
; end

;

delay

;
;

ME
NAME -WAY-LOH-

;

delay

;
;

ME
NAME -U-TYE-

j

delay

;
;

ME
NAME -A-LOH- DMH

00

399
395
145
; end

Tbl4_Macro464:
DW
DW
DW
DW
00

399
395
152
; end

;

delay

;
;

ME
NAME -KA- DMH

Tbl4_Macro465:
DW

399

;

delay

Tbl4_Macro462:
DW
399
DW
395
DW
143
DW
00
Tbl4_Macro463:
DW
DW
DW
DW

DMH

A-193

DW

395
166

an
an

oo

;

; ME
;

NANF -DAH- DMH

nd

;
Tbl4_Macro466:
DW

an
an
an

oo

Tbl4_Macro467:
DW

an
an

oo

Tbl4_Macro468:
DW
Or!

an
an

oo

3*9
3. .
175
;end

; delay
; ME
: NAME 'BOH-BAY' DMH

399
395
177

; delay
; ME
; NAME -NAH-BAH- DMH

; end

129
129
151
; end

Tbl4_Macro469:
DW

a-:
;
;
;
;

EW
DW
DW
DW
DW

00

love

;

SING A SONG DMH

;

B'JKB A1TACK DMH

;

WIN SOUND DMH

;

ME DONE

;

LISTEN ME

115
115
115
115
115
115
15

DW
DW
DW
DW
DW

an
an
00

115
; end

*
Tbl4_Macro471:
DW
DW
DW
DW
00

313
336
376
; end

DW

dodle do,

219
220
219
220
219
220
; end

Tbl4_Ma ro470:

an

;

I

Tbl4_Macro472:
DW
46
DW
00

; end

rbl4_Macro473:
DW
DW
DW
00

53
123
;end

Tbl4_Macro474:
DW
394

(DMH)

(DMHI

A-194

DW
DW

53
00

Tbl4_Macro475:
DW
411
DW
00
Tbl<_rtacro476:
DW
DW
DW
DW

; end

;end

399
395
186

delay
ME
NAME -LOO-LOO" DKH

00

; end

Tbl4_Macro477:
CM
DW
DW
DW
00

399
395
194
; end

delay
ME
NAME ’AH-MAV

Tbl4_Macro47B:
DW
DW
DW
DW
00

399
395
201
; end

delay
ML
NAME -MOO-LOO* DMH

delay

00

399
395
208
,-ena

Tbl4_Macro480:
DW
DW
DW
DW
00

399
395
224
; end

delay
ME
NAME -MAY-LAH' DMH

399
395
228
; end

delay
ME
DAH-NOH-LAH

399
395
398

delay

Tbl4_Macro479:
DW
DW
DW
DW

Tbl4_Macro481:
DW
DW
DW
DW

00

Tbl4_Macro482:
DW
DW
DW
DW

ME
ME 'MAY-MAY

H

ME
NAME "TJH-LOO-KAH-

00

152
; end

I
Tbl4_Macro483:
DW
DW
DW
DW
DW
00

399
395
152
166
; end

;
;
;

delay
ME
KA-DA

399
395

;

delay

;

ME

DW

DMH

DMH

;
Tbl4_Macro484:
EM
DW

A-195

DW
DW
DW

00

224
152
; end

.

MAY-LAH-KA

»bl4_Macro485:
DW
4
DW

00

;ana

J
Tbl4_Macro486:
DW
4
DW

00

;end

Tbl4_Macro487:
DW
DW
00

j end

Tbl4_Macro488:
DW
4
DW
CO

;end

Tbl4_Macro489:
DW
4
DW

00

;end

Tbl4_Kacro490:
DW
4
DW

00

;end

Tbl4_Macro49’ :
DW
4
DW
00

;end

Tbl4_Macro492:
DW
4
DW
00

;end

Tbl4_M icro493:
DW
4
DW

00

;end

Tbl4_Macro494:
DW
4
DW
00

;end

Tbl4_Macro495:
DW
4
DW

00

; end

Tbl4_Macro496:
DW
4
DW

00

;end

Tbl4_Macro497:
Dl-.’
4
DW

00

;end

Tbl4_Macro498:
DW
4
DW

00

;end

;

A-196

Tbl4_Macro499:
DW
4
DW
00

;end

Tbl4_Macro500:
DW
4
DW
00

;end

Tbl4_Macro501:
EW
4
DW
00

;end

Tbl4_Macro502:
DW
4
DW
00

; end

Tbl4_Macro503:
DW
4
DW
00

;end

Tbl4_Macro504:
DW
4
DW
00

;end

Tbl4_Macro505:
DW
4
DW
00

;end

Tbl4_Macro506:
DW
4
DW
00

; end

Tbl4_M«cro507:
DW
4
DW
00

; end

Tbl4_Macro508:
DW
4
DW
00

; end

Tbl4_Macro509:
DW
4
DW
00

;end

Tbl4_Macro510:
DW
4
DW
00

; end

Tbl4_Macro511:
DW
4
DW

00

; end

;
;.*.*.

;******.*..

;*.••••••••.......

....

f...*.*.

;;;;;;;

SAYSENT pointer tables

(128 max per table - 255 tables max)

Spch_grpl:
DW
Tbll_say000
DW
Tbll_say001,Tbll_sayC02.Tbll_say003.Tbll_say004,Tbll_say005
DW
Tbll_say00i.Tbll_say007,Tbll_say008.Tbll_say009.Tbll_say010
DW
Tbll_say011.Tbll_say012,Tbll_say013.Tbll_say014.Tbll_say015
DW
Tbll_say016.Tbll_sayO17.Tbll_say018.Tbll_sayOIf.Tbll_say‘ 20
DW
Tbll_say021.Tbll_say022.Tbll_say023.Tbll_say024.Tbll_sayC25
DW
Tbll_say026,Tb1l_sayC27,Tbl1_say02 6,Tbll_say0 29.Tbll_say0 3 0
DW
Tbll_say031.Tbll_say032.Tbll_say033,Tbll_say034.Tbll_say035
DW
Tbll_say03 6,Tbll_say0 37,Tbll_say0 3 8,Tbll_say03 9.Tbll_say04 0
DW
Tbll_say041,Tbl1_say042.Tbl-_sayC 4 3,Tbll_say044.Tbll_say045
DW
Tbll_say046,Tbll_say047.Tbll_say048.Tbll_say049,Tbll_say050
DW
Tbll_say051,Tt l_say052.Tbll_say053,Tbll_say054,Tbll_say055
DW
Tbll_say056,Tbll_say

-7,Tbll_say058,Tbll_say059,Tbll_say060

DW
Tbll_say061,Tbll_sa. O02,Tbll_sayO63,'T

_say064 , Tbll_say065

DW
Tbll_say06 6,Tb11_say0 67,Tbll_say0 68,Tbll_say0 6 9,Tbll_say07 0
DW
Tbll_say071,Tbll_say072,Tbll_say073,Tbll_say074,Tbll_say075
DW
Tbll_say076,Tbll_say077,Tbll_say078,Tbll_say079,Tbll_say080
DW
Tbll_say081,Tbll_say082,Tbll_say063,Tbll_say084.Tbll_say085
DW
Tbll_say086,Tbll_say087,Tbll_say088.Tbll_say089,Tbll_say09Q
DW
Tbll_say0 91,Tbll_say09 2.Tbl1_say09 3,Tbll_say0 9 4,Tbll_say0 9 5
DW
Tbll_say096,Tbll_say097,Tbll_say098,Tbll_say099
Tbll

DW
saylOO,Tbll_sayl01,Tbll_oayl02,Tbll_sayl03,Tbll_sayl04
DW
Tbll_sayl05. Tbll_sayl06, Tbll_sayl07 , Tbll_sayl08 , Tbll_sayl09
DW
Tbll_say i 10, Tbll_say 111, Tbll_sayl 12 . Tbll_say 113 , Tbl l_say 114
DW
Tbll_8ayl15,Tbll_sayll6,Tbll_sayll7,Tbll_sayll8,Tbll_sayll9
DW
Tbll_sayl20.Tbll_sayl21,Tbll_sayii2.Tbll_sayl2J,Tbll_sayl24
DW

Tbll_sayl25,Tbl1_sayl26,Tbll_sayl27

A-198

Spch_grp2!
DW
DW
DW
DW
DW
EM
DW

Tbl2_sayl28
Tbl2_sayl29,Tbl2_«ayl30.Tbl2_sayl31.Tbl2_sayl32,Tbl2_sayl33
Tbl2_aayl34,Tbl2_sayl35,Tbl2_sayl36,Tbl2_sayl37,Tbl2_sayl38
Tbl2_sayl39.Tbl2_»a/140,Tbl2_sayl41.Tbl2_sayl42.Tbl2_sayl43
Tbl2_sayl44,Tbl2_sayl45.Tbl2_sayl46.Tbl2_sayl47.Tbl2_sayl43
Tbl2_sayl49.Tbl2_sayl50,Tbl2_sayl51,Tbl2_sayl52,Tbl2_sayl53
Tbl2_sayl54.Tbl2_sayl55,Tbl2_sayl56.Tbl2_sayl57.Tbl2_sayl58

DW
DW
DW
DW
EM
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

Tbl2_sayl59,Tbl2_sayl60,Tbl2_sayl61,Tbl2_say’e2,Tbl2_sayl63
Tbl2_sayl64.Tbl2_sayl65,Tbl2_sayl66,Tbl2_s«_ .b?,Tbl2_sayl68
Tbl2_sayl69,Tbl2_sayl70,Tbl2_say;71,Tbl2_sayl72,Tbl2_sayl73
Tbl2_aayl74,Tbl2_sayl75,Tbl2_sayl76,Tbl2_aayl77,Tbl2_sayl78
Tbl2_aayl79 . Tbl2_sayl80, Tbl2_sayl81, Tbl2_sayl82, Tbl2_sayl83
Tbl2_sayl84.Tbl2_Bayl85,Tbl2_sayl86,Tbl2_sayl87.Tbl2_sayl88
Tbl2_sayl89,Tbl2_sayl90,Tbl2_sayl91.Tbl2_sayl92,Tbl2_sayl93
Tbl2_sayl94,Tbl2_sayl95,Tbl2_sayl96,Tbl2_sayl97,Tbl2_sayl98
Tbl2_sayl99,Tbl2_say200.Tbl2_say201,Tbl2_say202,Tbl2_say203
Tbl2_say204,Tbl2_say205,Tbl2_say206,Tbl2_say207,Tbl2_say208
Tbl2_say209,Tbl2_say210.Tbl2_say211,Tbl2_say212.Tbl2_say213
Tbl2_say214 , Tbl2_say215. Tbl2_say216, Tbl2_say21-; . Tbl2_say218
Tbl2_say219,Tbl2_say220,Tbl2_say221,Tbl2_say222.Tbl2_say223
Tbl2_say224.Tbl2_say225,Tbl2_say226,Tbl2_say227,Tbl2_say228
Tbl2_say229,Tbl2_say230,Tbl2_say231.Tbl2_say232,Tbl2_say23 3
Tbl2_say234,Tbl2_say235,Tbl2_say236,Tbl2_say237,Tbl2_say238
Tbl2_say239.Tbl2_say24C.Tbl2_say241,Tbl2_say242,Tbl2_soy243
Tbl2_say244 , Tbl2_s?.y245. Tbl2_say246, Tbl2_sav247 , Tbl2_say24 8
Tbl2_say249,Tbl2_say250,Tbl2_say251.Tbl2_say252,Tbl2_soy253

DW

Tbl2_say254,Tbl2_»ay255

Spch_grp3:
DW
DW
DW
DW

Tbl3_say256
Tbl3_say257,Tbl3_Bay258,Tbl3_say259,Tbl3_say260,Tbi3_say261
Tbl3_say262,Tbl3_say263.Tbl3_say264.Tbl3_say265.Tbl3_say266
Tbl3_say267,Tbl3_say268.Tbl3_say269,Tbl3_say270,Tbl3_say271

D».
DW

Tbl3_say272, Tbl3_say273. Tbl3_say274 , Tbl3_say275. Tbl 3_say276
Tbl3_8ay277,Tbl3_say278,Tbl3_say279,Tbl?_say280,Tbli
ay281

DW
DW

Tbl3_say282,Tbl3_say283.Tbl3_say284,Tbl3_say285,Tbl3. ay2£6
Tbl3 say287.Tbl3_say288,Tbl3_say289,Tbl3_say290,Tbl3_say291

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

Tbl3_say292,Tbl3_say293.Tbl3_say294,Tbl3_say295.Tbl3_say296
Tbl3_say297,Tbl3_say298,Tbl3_say299,Ttl3_say300.Tbl3_say301
Tbl3_say302 . Tbl3_say303 , Tbl3_say304, Tbl3_say30,i, Tbl3_aay306
Tbl3_say307,Tbl3_say308,Tbl3_say309,Tbl3_8ay310,rbl3_Bay3U
Tbl3_say312,Tbl3_say313,Tbl3_aay314,Tbl3_8ay315,Tbl3_say316
Tbl3_say317,Tbl3_aay318,Tbl3_say319,Tbl3_say320.Tbl3_say321
Tbl3_say322,Tbl3_say323,Tbl3_say324,Tbl3_say325,T.13_say326
Tbl3_say327,Tbl3_say328,Tbl? Bay329,Tbl3_say330.Tbl3_Ba 331
Tbl3_aay332,Tbl3_say333.Tbl
,ay334.Tbl3_say335,Tbl3_say336
Tbl3_say337,Tbl3_say338,Tbl
say339,Tbl3_say340,Tbl3_say341
Tbl3 Bay342,Tbl3_«ay343,Tbl _aay344.Tbl3_say345,Tbl3_say346
Tbl3_say347,Tbl3_say348.Tbl3_say349.Tbl3_say350,Tbl3_say351

DW
DW

Tbl3_say3 52,Tbl3_say3 53,Tbl3_say3 54,Tbl3_say3 5 5,Tbl3_say3 5 6
Tbl3_say357,Tbl3_8ay358.Tbl3_say359,Tbl3_say360,Tbl3_say361

DW
DW

Tbl3_say3 62,Tbl3_say3 63.Tbl3_say3 64,Tbl3_say3 65.Tbl3_say316
Tbl3_say367,Tbl3_Bay368.Tbl3_say369.Tbl3_say370,Tbl3_Bay3-71

DW
DW

Tbl3 say372,Tbl3_say373.Tbl3_say374,Tbl3_say375.Tbl3_say376
Tbl3_say377,Tbl3_say378.Tbl3_say379.Tbl3_say380.Tbl3_say381

A-199

DW

Tbl3_sayi32,Tbl3_say383

;
;
Spch_grp4:
DW
DW
DW
DW
DW
DW
DW
DW

DW
D.
D4
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DV

Tbl4_say384
Tbl4_say385.Tbl4_say386,Tbl4_say387,Tbl4_say388,Tbl4_say389
Tbl4_aay390,Tbl4_say391,Tbl4_Bay392,Tbl4_say393,Tbl4_Bay394
Tbl4_say395,Tbl4_aay396.Tbl4_say397,Tbl4_say398.Tbl4_say399
Tbl4_say400,Tbl4_Bay401,Tbl4_say402,Tbl4_say403,Tbl4_say404
Tbl4_say405,Tbl 4_Bay406,Tbl4_say407,Tbl4_aay408.Tbl4_aay409
Tbl4_say410,Tbl4_say411,Tbl4_say412,Tbl4_say413,Tbl4_say414
Tbl4_say415,Tbl4_8ay416,Tbl4_say417,Tbl4_say418.Tbl4_aay419
Tbl 4_say "'O. Tbl4_say421. Tbl4_say422 . Tbl4_say423. Tbl4_say424
Tbl4_say-.25, Tbl4_say426, Tbl 4_say427, Tbl4_say428, Tbl4_aay429
Tbl4_say430, Tbl4_say431,Tbl4_say432,Tbl4_say433 , Tbl4_say434
Tbl4_say435, Tbl4_say436, Tbl4_aay437 , ”bl4_say4 38, Tbl4_say439
Tbl4_say440,Tbl4_aay441,Tbl4_say442,TDl4_say443.Tbl4_say444
Tbl4_say445,Tbl4_say446.Tbl4_say447,Tbl4_say448.Tbl4_say449
Tbl4_Bay450.Tbl4_aay4Sl.Tbl _eay452,Tbl4_say4S3.Tbl4_say454
Tbl4_say455,Tbl4_say456,Tbl4_say457.Tbl4_say458,Tbl4_say459
Tbl4_say4 60,Tbl4_say461,Tbl4_say462.Tbl4_say463,Tbl4_say464
Tbl4_say465,Tbl4_say466,Tbl4_say467.Tbl4_say468,Tbl4_say469
Tbl4_aay470,Tbl4_say471.Tbl4_say472,Tbl4_say473,Tol4_say474
Tbl4_soy475.Tbl4_say476.Tbl4_say477.Tbl4_say478.Tbl4_say479
Tbl4_say48C.Tbl4_say481,Tbl4_say482.Tbl4_say483.Tbl4_say484
Tbl4_say485,Tbl4_say486.Tbl4_say487,Tbl4_say488,Tbl4_say489
Tbl4_say490,Tbl4_say491.Tbl4_-ay492,Tbl4_say493,Tbl4_say494
Tbl4_sa/495.Tbl4_say496,Tbl4_say497,Tbl4_say498,Tbl4_say499
Tbl4_s»y500.Tbl4_say501,Tbl4_say502,Tbl4_say503,7bl4_say504
Tbi4_say505,Tbl4_say506,Tbl4_say507.Tbl4_say508,"bl4_say509
Tbl4_say510,Tbl4_say511

; ALL SPEECH SAYSENT START HERE ;;;;;;;;;
;j Saysent groups for Tbl 1

The first line of each group is the speech speed command.
This is a number from 40 - 55 whrre 46 is stand
d speed

;
;
;
;
;
;
I

The next line is PITCH control which works as
Actual numeric value for TI pitch control

follows:

bit 7 set ■ subtract value from current course value
clr « add value to current course value
bit 6 set = select music pitch table
clr = select normal speech pitch table
bit 0-5 value to change course value (no change = 0)

;

8Fh

;

81h
00

;

•'hi voice
(8£ is very squeeeeeke) (SF= 143)
;one step higher than normal
use range 81-8F
;normal voice

01

;one step lower than normal
;lo voice ( very low)
use range 01-’’F

2£h

«

(129-143)

(01-47)

;
; A math routine in 'say_0’ converts the value £or ♦ or ; i£ <80 then subtracts from 80 to get the minus version of
; ie. if number is 70 then TI gets 10 (which is -10)
I

If number is 80 or > 80 then get sent

00

literal as positive.

NOTEi MAX POSITIVE IS 8B
MAX NEGATIVE is 2F ( 80h - 2Fh or 51h>
8Bh is hi voice
(8f is very squeeeeeke)
2Fh lo voice ( very low)

j
;

When entering changes, ’Voice1 holds the current pitch for Furby
and it is modified by adding or subtracting a pitch change :::

.

ex:

Voice*8

;

ex:

Voice-10

;
I

The next group of entries are the speech words.
Th® last line is the terminator of ’FF’

1

increases the pitch from the current voice by 8
decreases the pitch from the current voice by 10

(BOTTOM)

J
;
;
;

1 is very fast
46 is average
255 is very slow

!
;
;

DB
DB

46
123

(speed of speech)
(do sound 1231

;
;

DB
DB

43
FFH

(do sound 43)

I
l
;

PITCH PROGRAMMING RANGE:
Voice»8 (highest)
Voice-20 (lowest)

i:
Tbll_say0i J:
DB
DB
DB
DB

46
Voice
163
FFH

;GEORGE 07/03/98
Tbll_say001:
DB
46
; s] eech speed
DB
Voice* 8
DB
149,162 . -.02,164,149
DB
FF A
; end

;dON START

SEQ1 AGE1

; DONE 1FRONT SEQ1

Tbll_say002:

A-201

DB
DB
DB
DB
Tbll_say003:
DB
DB
DB
DB
Tbll_say004:
DB
DB
DB
DB
Tbll_say005:
DB
DB
DB
DB
Tbll_say006:
DB
DB
DB
DB

52
Voice»8
117,59
FFH

;speech speed
;system pitch setting
;DONE 1FRONT SEQ2 agel
; end

46
Voice- 4
118

;speech speed
;system pitch setting

FFH

; end

46
Voice

;speech speed
.-system pitch setting

,-lfront seq3 - seq4-partl-SEQ7PART2

62.22, 85
FFH
; end

50
Voice*8
58,39
FFH

;speech speed
;system pitch setting
;1front seq4 part 2
; end

46
;speech speed
Voice
.-pitch control
162,16 2,99,117
FFH

jlfront seq3 part2

;seq5 agel

front

part of

; end

Tbll_say007:
DB
DB
DB
DB

55
Voice- 8
156
FFH

;speech speed
;system pitch setting
;seq6 agel front bach part
; erd

Tbll_sayOOS:
DB
DB
DB
DB
Tbll_say009:
DB
DB
DB
DB

46
Voice

;speech speed
.-pitch control
162,162 ,59,10,39
FFH
; end

;SEQ7 FROJ4T AGE1 ADD SAY 003

46
r speech speed
Voi _e
system pitch setting
99 99,145
FFH
; end

iSEQ8 FRONT AoEl

Tbll_say010:
DB
DB
DB
DB

46
Voice
98
FFH

;speech speed
.-system pitch setting
;seq9 FRONT AGE1
; end

Tbll_say011:
DB
30
,-speech sp>eed
DB
Voice*8
;system pitch setting
DB
96,165,165,165,129,149
DB
FFH
;end

;seql0 FRONT A3E1 ADD

Tbll_say012:

A-202

DB
DB
DB
DB

50
;speech speed
Voice
;system pitch
136,165,162,45
FFH
; end

•-•-ing
. eqll FRONT AGE1 ADD SAY20

Tbll_say013:
DB

58
;speech speed
Voice
;system pitc' setting
DB
DB
1:8.136, 117
SAY20 ON FRONTPART
F*\
;end
DB
Tbll_say014:
DB
DB
DB
ADD SAY22
DB
Tbll_s«y015:
DB
DB
DB
DB
Tbll_say016:
DB
DB
DB
DB

60
Voice*8
145,162

;*F

FFH

; end

titch :et

;seql2 FRONT AGE1 ADD

ing
;seql3 FRONI AGE1

speech speed
;system pitch setting
;seql4 FRONT AGE1

4t
Voice*8
156
FFH

; end

46
Voice*7

;speech speed
;system pitch setting

119,58
FFH

; end

;seql5 FF

T AGE!

Tbll_say017:
DB
DB
DB
DB
Tbll_say018:
DB
DB
DB
DB
Tbll_say019:
DB
DB
DB
DB
Tbll_say020:
DB
DB
DB
DB
Tbll_say021:
DB
DB
DB
DB

46
Voice
37
FFH

;speech speed
:system pitch setting
;seql6 FRONT AGE1 BETWEEN 2(FAY20)ADDSAY37

46
Voice

;speech speed
;system pitch setting
;SEQ16 FRONT AGE1
; end

123
FFH

; end

46
Voice
118
FFH

;speech speed
;system pitch setting
;SEQ1 FRONT AGE2 REPEAT 22

46
Voice*7
77,35

;speech speed
.■system pitch setting

FFH

46
Voice
39,39
FFH

;end

;SEQ2 FRONT ADD
;end

20 TO FRONT

;speech speed
.•system pitch setting
; SEQ3AGE2 FRONT AID TEJ9AGE1
;end

Tbll_say022:
DB
DB
DB
DB
Tbll_say023t
DB
DB
DB
DB
Tbll_say024:
DB
DB
DB
DB
Tbll_say025:
DB
DB
DB
DB

56
Voice*7
156
FFH

;speech speed
;system pitch setting
;SEQ4 AGE2 FRONT
,-end

46
; speech speed
.-system pitch setting
Voice*7
.-SEQ4 AGE2 FRONT
8,162.22
; end
FFH

;speech speed
46
Voice*7
;system pitch setting
117,81,27
,-SEQS AGE2 FRONT
FFH

,- end

46
;speech speed
.-system pitch setting
Voic
; SEQ6 AGE2 FRONT
95.35,4c;. 164.77
FFH
; end

Tbll_say026:
DB
DB
DB
DB

46
Vcice*6
99
FFH

;speech speed
;system pitch setting
;SEQ 7 AGE2 FRONT PART 1
; end

Tbll_say027:
DB
DB
DB
DB
Tbll_say02r:
DB
DB
DB
DB
Tbll_say0?9:
DB
DB
DB
DB
Tbll_say030:
DB
DB
DB
DB
Tbll_sayv31:
DB
DB
DB
DB

;speech speed
46
Voice-*"
.-system pitch setting
60,39.117
;SEQ 7 AGE2 FRONT PART 2
; end
FFH

46
Voice
145
FFH

;speech speed
;system pitch setting
;SEQ 8 AGE2 FRONT say45(2)^2:
; end

;speech speed
46
;system pitch setting
Vcice*5
149.162.162,164.149
.-FRONT SEQ9 AGF2
F. H

,-end

.-speech speed
;system pitch setting
;SEQ10 FRONT AGE 2 A
96,163. 163,129
,-end
FFH

60
Voice*7

60
Voice*8
39,63
FFH

;speech speed
,-system pitch setting
;SEQ11 FRONT AGE 2
; end

Tbll_say032:
DB
DB
DB
DB
Tbll_say033:
DB
DB
DB
DB

46
Voice*7
128,117

;speech speej
;system pitch setting
;SE012 FRONT AGE 2 ADD 20

FFH

;end

56
rspeech speed
Voice*7
;system j
ch setting
99,55,162.28
.-SEQ14 FRONT AGE2
FFH
;end

i

Tbll_say034:
DB
DB
DB
DB
Tbll_say035:
DB
DB
DB
BEGGINING
DB
Tbll_say036:
DP
DB
DB
DB
Tbll_say037:
DB
DB
DB
DB
Tbil_say038:
DB
DB
DB
DB
Tbll_say039:
DB
DB
DB
DB

46
Voice*6
136,34

;speech spec 1
;system pitch setting
; SEQ15 fRONT AC,_2 ADD 20

FFH

;end

56
;speech speed
Vcice*6
;system pitch setting
;SEQ16 FRONT AGE2 ADD:
35.162,48,162.93,133
FFH

;end

50
Voice*3

;speech speed
;system pitch setting
;SEQl

162,1
FFH

FRONT AGE3

;end

46
speech speed
.•system p;tch setting
Voice
81,77 52
;SEC2 FRONT AGE3
FFH
; end

46
Voice*8
1,1
FFH

;speech speed
;system pitch setting
; SEQ3 FRONT AGE3 ADD29
; end

;speech speed
50
Voice*6
.•system pitch setting
162,14,27
;SEQ4 FRONT A3E4 ADD41
FFH

,- end

)

ERROR
Tbll_say040:
DB
DB
DB
DB

46
Voice

;speech speed
.■system pitch setting

FFH

; end

;

A-205

Tbll_say040:
DB
DB
DB
DB

46

,-speech speed

Voice

,-system pitch setting
99.35,47,58
;SEQ6 FRONT AGE3
FFH
;end

Tbll_say041:
DB
C

46

;speech speed
;system pitch setting
99,60,77,23
;SEQ7 FRONT AGE3 ADD 22
FFH
; end

Voice

DB
DB
Tbll_say 42:
DB
DB
DB
DB

46
Voice
99,145
FFH

;speech speed
S«y cem pitch settinc
;BEQ8 FRONT AGE3 ADD 22
; end

ERROR
Tbll_say044 :
DB
DB
DB
DB

46
;speech speed
Voice
;system pitch setting
4
GO TO 22
FFH
; end

Tbli_say043:
DB
DB
DB

30
Voice*8

DB

FFH

; end

50
Voice*4
145
FFH

;speech speed
;system pitch setting
;SEQ11 FRONT AGE3
; end

46
Voice
119,77
FFH

;speech speed
;system pitch setting
:SEQ12 FRONT AGE3
; end

46
Voice
128
FFH

;speech speed
;>.,stem pitch setting

46
Voice
136,117

;speech speed
;syst m pitch setting

;speech speed
.•system pitch setting
96,165.165,165.129.149

;seql0 FRONT AGE3 ADD

SAY20

"bll_say044:
DB
DB
DB
DB
Tbll_say045:
DB
DB
DB
DB

(HEEY,TICKLE KEI

ALD2C

Tbll_say046:
DB
DB
DB
DB

;SE013

£RONT AGE3

(NANNY,NANNY1

add::

; end

Tbll_say047;
DB
DB
DB
DB

FFH

;SEC
; end

3

fRONT AGE3

46

;speech speed

(RASBERRY* hE HE HE )

ADD2C

Tbll_say048:
DB

A-206

DB
DB
DB
Tbll_say049:
DB
DB
DB
DB
Tbll_say050:
DB
DB
DB
DB
Tbll_say051:
DB
DB
DB
DB
Tbll_say052:
DB
DB
DB
DB
Tbll_say053:
DB
DB
DB
DB

Voice
;system pitch setting
35,162,47
.-SEQ16 kAH LOVE FRONT AGE3 ADD 20
FFH

iend

56
;speech speed
Voice*6
;system pitch setting
81,133
;SEQ16 (U-NYE QUICK KISS)
FFH

}

46
Voice
77
FFH

;speech speed
;system pitch setting
SEQ2 (TICKLE) FRONT AGE4

46
Voice*6

.■speech speed
;system pitch setting
;SEQ2 (AGAIN) FRONT AGE4

1
FFH

46
Voice
93
FFH

46
Voice
52
FFH

FRONT AGE1 ADD20

end

;end

; end

;speech speed
.•system pitch setting
;SEQ3 (YOU) FRONT AGE4
; end

;speech speed
;system pitch setting
;SfcQ3 (HE) FRONT AGE4
;end

Tbll_say054:
DB
DB
DB
DB

46
Voice
47

;speech speed
.•system pitch setting
;SEQ4 (LOVE! FRONT AGE4

FFH

;end

Tbll_say055:
DB
DB
DB
DB

46
Voice*8
117

.•speech speed
.•system pitch setting
;SEQ5 (HE HE HI, FRONT AGE4

FFH

i

46
Voice
8,27

;speech speed
; system pitch
etting
jSEQS (BIG FUN) FRONT AGE4 ADD26

FFH

;end

46
Voice

;c . eech speed
;system pitch setting
;SEQ6 (NO) FRONT
AGE4

end

;
Tbll_say056:
DB
DB
DB
DB
;
Tbll_say057:
DB
DB
DB
DB
Tbll_say058:
DB

60
FFH

46

; end

.•speech speed

A-207

DB
DB
DB

Voice
68
FFH

;system pitch setting
;SEQ8 (PLEASE) FRONT
;end

46
Voice-*8
119

;speech speed
;system pitch setting
;SE39 (HEEYI FRONT AGE4 ADD71

FFH

; enc

Tbll_say060:
DB
DB
DB
DB

46
Voice
66
FFH

;speech speed
;system pitch setting
;SEQ14 (PARTY) FRONT AOE4
;end

Tbll_say061:
DB
DB
DB

46
Voice
108

;speech speed
;system pitch setting
;SEQ15 (WA WA WA ) fRONT AGE4 ADD 22

Tbll_say059:
DB
DB
DB
DB

DB
FFH
;END GEORGE 07/03/98

;end

GEORGE 07/04/98
START SAY FORTUNE
Tbll_say062:
DB
46
DB
Voice-6
DB
3
; end
DB
FFH

speech speed
system pitch setting
FORTUNE TELL (ASK)

Tbll_say063:
46
Voice

DB
DB
DB
DB

92
; end

FFH

Tbll_say0t>4:
DB
DB
DB
DB

46
Voice
8
FFH

speech speed
system pitch setting
FORTUNE TELL (YES)

speech spevd
system pitch setting
FORTUNE TELL (BIG)

; end

Tbll_say065:
46
DB
Vcice»6
DB
84,8
DB
;end
DB
FFH

spet u speed
•system pitch setting
•FORTUNE TELL (VERY,BIG)

1

Tbll_say066:
DB

100
Voice

DB
DB
DB

FFH

Tbll_aay067:
DB
DB
DB
DB

162,70
; end

. 0
Voice-4
157,162,157
; end
FFH

speech speed
system pitch setting
.•FORTUNE TELL (SEE YES)

;speech speed
; system pitch setting
.-Fortune tell (SLOW WHINE)

A-208

Tbll_say068:
DB
DB
DB
DB

46
Voice
64
FFH
;end

Tbll_say069
DB
DB
DB
DB
Tbll_say070
DB
DB
DB
DB

46
Voice*5
60
FFH

46
Voice»7
90

speech speed
syi tern pitch letting
FORTUNE TELL (02WHA)

speech speed
system pitch setting
FORTUNE TELL
(NO)
;end

speech speed
system pitch setting
FORTUNE (WORRY)

j end

FFH

Tbll_say071
DB
DB
DB
Dd

46
Voice*"
73
FFH

Tbll_say072
DB
DB
DB
DB
Tbll_say073
DB
DB
DB
DB
Tbll_say074
DB
DB
DB
DB
Tbll_say075
DB
DB
DB
DB

speecn speed
system pitch setting
FORTUNE (SOUND)

; end

46
Voice
28
FFH
; end

speech speed
system pitch setting
FORTUNE (GOOD)

4c
Voice
84
FFH
.-end

speech speed
system pitch setting
FORTIT IE (VERY)

50
Voice-8
159
;end
FFH

speech speed
system pitch setting
FORTUNE (WHOOPEE)

46
Voice-5
28
;end
FFH

speech speed
system pitch setting
FORTUNE (GOOD)

56
Voice*7

speech speed
■system pitch setting
•FORTUNE (RASPBERRY)

Tbll_8ay076
DB
DB
DB
DB
J
Tbll_say077
DB
DB
DB
DB

FFH

136
; end

50
Voice
FFH

129
; end

speech sper-d
■system pitch setting
•FORTUNE (oH oH)

A-209

Tbll_say078:
DB
DB
DB
DB

50
Voice-7

{speech speed
{system pitch setting
.-FORTUNE (MAY BEE)

49
FFH

;end

;END SAY FORTUNE
;END GEORGE 07/04/98
,-START HANGOUT
,-GEORGE 07/04/98
Tbll_say079
56
DB
TB
Voice-8
DB
110
DUM) AGE1
DB
FFH
end

{speech speed
;system pitch setting
,-SEQl HANGING (DE DE DE ,DUK

DUM DUM

Tbll_say080
DB
DB
DB
DB

60
Voice-8
109
FFH
; end

Tbll_say081:
DB
DB
DB
DB

56
Voice-8
116
FFH

;speech speed
{system pitch setting
SEQ1 HANGING! DUM DUM DUM)

DB

;end

Tbll_say084:
DB
DB
DB
DB

FFH

; end

bRUMM BABABUM)

{end

60
;speech speed
Voice-5 .-system pitch setting
126,163 ;SEQ4 HANGING (LA LA)
FFH

Tbll_say086:
DB
Db
Db
DB

jspeech speed
;system pitch setting
sSEQ3 HANGING (OMPAH
bRUMM)

46
.-speech speed
Voice-8 ;system pitch setting
115
:SEQ3 HANGING (YA DA DA OMPAH

Tbll_soy085:
DB
DB
DB
DB

;speech speed
;system pitch setting
:SEC3 HANGING (YA DA DA

53
Voice-5
162.114.162,114
FFH

ADD 83

.-speech speed
;system pitch setting
;SEQ2 HANGING (BEEDO)

Tbll_say082:
DB
46
Voice-7
DB
113
DB
DB
FFH
;end
Tbll_say083:
DB
DB
DB

AGE1;

;end

56
Voice-5
127
FFH

,-speech speed
system pitch setting
;SEQ4 HANGING (LA LAI

;end

A-210

Tbll_say087:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
101
;SEQ5 HANGING (HUMMMMMM)
DB

FFH

; end

;
Tbll_say088.
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
11
;SEQ5 HANGING (BO DAH WA LOI
DB

FFH

;end

Tbll_say089:
DB
46
DB
Voice*!
DB
143,163
DB
FFH
;end

.■speech speed
;system pitch setting
:SE6 HANGING (SNORE)

Tbll_say090:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
148
;SEQ6 HANGING (SHOUT)
DB

FFH

;end

Tbll_say091:
DB
46
;speech speed
DB
Voice ;sys em pitch setting
DB
63,^5
;SEQ6 HANGING IOK.KAK)
DB

FFH

; end

Tbll_say092:
;speech speed
46
DB
Voice ;system pitch setting
DB
;SEQ6 HANGING (U-TYE)
DB
82
; end
FFH
DB
lbll_say093
DB
DB
DB
DB
Tbll_say094
DB
DB
DB
DB

60
Voice*8
FFH

46
Vcice-4
144
;end
FFH

Tbll_say095:
DB
DB
DB
DB

144
; end

46
Voice
124,162
FFH

;speech spt ed
.•system [. c :'t setting
; SEC’ HANGING lSOFTER)

;speech speed
.•system pitch setting
;SEQ7 HANGING (SOFTER)

;speech speed
;system pitch setting
;SEQ8 hANGING (kITTY KITTY)

!end

Tbll_say096:
56
Voice
112

DB
DB
DB
DB

FFH

;end

;system pitch setting
;3EQ9 HANGING (DO BE DOBE DO)

Tbll_say097
DB
DB
DB
DB

60
;speech speed
Voice»7
;system pitch setting
161,164.164,161
;SEQ10 HANGING
FFH
;end

Tbll_say098:
DB
100
DB
Voice*6
DB
140
DB
FFH
iend
Tbll_say099:
DB
46
DB
Voice»8
DB
100
DB
FFH
; end

(YAWN)

;speech speed
;system pitch setting
;SEQ11 AND SEQ12 HANGING (SIGH)

.-speech speed
{system pitch sorting
; SEQ13 SEQ14 HANGING (HAA)

Tbll_sayl00:
DB
DB
DB
DB

46
;speech speed
Voice ;system pitch setting
119
; SEC 14 HANGING (HEEY)
FFH
;end

Tbll_sayl01:
DB
46
;speech speed
DB
Voice {system pitch setting
DB
132,165,132
,-SEQ16 HANGING
DB
FFH
;end

(PHONE)

Tbll_sayli1:
DB
46
,• speech speed
DB
Voice i system, pitch setting
DB
165,165,165,165
.-SEQ16 HANGING
DB

FFH

ADD20

(PAUSE)

ADD20

;end

Tbll_sayl03:
DB
DB
DB
DB

46
Voice*5
83
FFH
{end

,* speech speed
,-system pitch setting
{SEQ6 HANGING (UP)

Tbll_sayl04 :
DB
46
{speech speed
DB
Voice ;system pitch setting
DB
52
{SEQ6 HANGING AGE3
DB
FFH
,- end

(ME)

Tbll_sayl05:
DB
DB
DB
DB

46
{speech speed
Voice .• system pitch setting
63
{SEQ6 HANGING AGE3
FFH
,- end

(OK)

Tbll_sayl06:
DB
DB

46
.-speech speed
Voice ;system pitch setting

DB
DB

13
FFH

;SEQ5 HANGING AGE3 AND 4
{end

A-212

;END HANGOUT

Tbll_8ayl07:
DB
DB
DB
DB

46
Voice
165,165
FFH
; end

;speech speed
.•system pitch setting
.•Fortune delay

;END GEORGE 07/04/98
;START FEED
;GEORGE 07/05/98
__START fEED
(

; spch_grp2 was here
;; Saysent groups for Tbl 2

;STARTS AT 128
Tbll_sayl08:
DB
100
;speech speed
DB
Voice ;system pitch setting
DB
166
; SEQ1 FEED AGE1 IUUKMM)
DB

FFH

NOT USED
Tbl2_sayl29:
DB
DB
;
DB
DB

;end

46
;speech speed
Voice»8
;system pitch setting
;SEQ1 FEED AGE1 (AY-TAY)
FFH

;end

Tbll_sayl09:
DB
100
;speech speed
DB
Voice ;system pitch setting
DB
167.167
;SEQ1 FEED AGE1
DB

FFH

(AAAAH)

; end

Tbll_snyll0:
DB
56
DB
Voice*3
DB
39
;SEQ2
DB
FFH
;end

;speech speed
.•system pitch setting
FEED AGE1 IKOH-KOH)
t

Tbll_saylll:
DB
DB
DB
B

56
Voice*7
55
FFH

;speech speed
.•system pitch setting
;SEQ2 FEED AGE1 (MEE HEE)

;end

Tbll_sayll2:
;speech speed
DB
50
DB
Voice ;syst m pitch setting
;SEQ2 FEED AGE1
DB
25
DB
FFH
•end

(E-DAY)

Tbll_sayll3:
DB
58
;speech speed
DB
Voice*7
;system pitch setting
DB
23
;SEQ2 FEED AGE1 (DO MOH)
DB
FFH
;end
Tbll_sayll4:
DB
58
;speech speed
DB
Voice .•system pitch setting
79
DB
;TOH-DYE
;end
DB
FFH
Tbll_sayll5•
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
97
;BURP
DB
FFH
;end
Tbll_sayll6:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
140
; SIGH
DB
FFH
; end
Tbll_sayll7:
DB
DB
DB
DB

46

;speech speed

Voice ;system pitch setting
10
; BOO
; end
FFH

Tbll_sayll8
;speech speed
DB
46
DB
Voice .system pitch setting
DB
85
; WAH
end
DB
FFH
Tbll_sayll9
DB
DB
DB
DB

;speech speed
60
Voice*8
.-system pitch setting
80
■TOH-LOO
; end
FFH

Tbll_sayl20
DB
DB
DB
DB

46
Voice*8
7
; end
FFH

Tbll_sayl21
DB
DB
DB
DB

46
;speech speed
Voice ;system pitch setting
;SEQ1 FEED AGE2 HUNGRY
33
FFH

; end

; 143 SAME AS TBL1_SAV072
; i’bl2_sayl43:
46
;
DB
Voice
;
DB
28
;
DB
;

DB

;speech speed
.•system pitch setting

FFH

.•speech speed
.•system pitch Betting
;SEQ2 FEED AGE3 (GOOD)
; end

A-214

;144 SAME AS TBL1_SAY058
,-Tbl2_sayl44:
;
DB
46
;
DB
Voice*7
1
DB
68
;
DB
FFH

;speech speed
;system pitch setting
;SEQ2 FEED AQE3 PLEASE
,- end

::
Tbll_sayl22:
DB
46
DB
Voice-2
DB
43
DB
FFH
;end

;speech speed
;system pitch setting
;SEQ2 FEED AGE3 LIKE

;Tbl2_sayll8:
;
DB
;
DB
;
DB
;
DB

6G
;speech speed
Voice-8
;system pitch setting
161.164,161
;SEQ10 HANGING (YAWN)
FFH
;end

;Tbl2_sayll9:
{
DB
I
DB
;
DB
;
DB

60
;speech speed
55
.-speech speed
Voice»3
;systetr. pitch setting
165,165.144.165.144,165,144,165,144

;

DB

Voice

.-system pitch setting

;

DB
DB

144
FFH

:end

Tbll_sayl23:
DB
46
;speech speed
DB
Voice .-system, pitch setting
DB
20
;seq4 feed done
DB
FFH
; end
;END GEORGE 07/05/98
;END FEED
1
1
; WAKE
;GEORGE 07/06/98

;START AT 2
Tbll_sayl24:
DB
70
DB
Voice*6
DB
165,161
DB
FFH
;end
{PASS
Tbl l_say 12 5 :
DB
DB

55
Voice-2

DB
DB
; PASS
Tbll_sayl26:
DB
DB

FFH

;SG DONE
{speech speed
,-pitch control

SO DONE
.-speech speed
,-pitch control

162,63,35
,- end

55

;SG DONE
{speech speed

Voice ;system pitch setting

A-215

DB
DB

82
FFH

; end

; PASS
Tbll_sayl27:
DB
DB
DB
DB

;SG DONE
55
;speech speed
Voice ;system pitch setting
164,83
FFH
; end

Tbl2 sayl28:
;SG DONE
DB
55
;speech speed
DB
Voice ;system pitch setting
DB
DB

FFH

63,52
; end

;SG DONE
Tbl2_sayl29 :
;speech speed
DB
40
DB
Voice ;system pitch setting
DB
163,139
; end
DB
FFH
;TBL1_SAY5S
;SG DONE
;Tbll_say8:
46
;speech speed
;
DB
•system pitch setting
;
DB
Voice*8
117
;
DB
; end
;
DB
FFH
Tbl2_sayl30:
DB
55
Voice-2
LB
DB
63
; end
DB
FFH
Tbl2_sayl31:
DB
Lr>

B
DB

; SG DONE
,- speech speed
;system pitch setting

;SG DONE
46
;speech speed
Voice ; system pitch setting
86
; end
FFH

; SG DONE
Tbl2_sayl32:
46
;speech speed
DB
DB
Voice ;system pitch setting
79
DB
; end
DB
FFH
;TBL1_SAY12 3
;SG DONE
;Tbll_sayl2:
;speech speed
46
;
DB
;system pitch setting
Voice
;
DB
;
;

DB
DB

20
FFH

; end

1

; SG DONE
Tbl2_sayl33 :
46
;speech speed
DB
DB
Voice ;system pitch setting
DB
DB
Tbl2_sayl34:
DB
DB

72
FFH

;end

55
Voice*3

;SG DONE
jspeech speed
;system pitch setting

A-216

DB
DB

FFH

158
;end

Tbl2_sayl35:
,-SG DONE
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
35
TB
FFH
;end

;
Tbl2_s«/136:

,SG DONE

DB
DB
DB
DB

46
Voice-5
52
FFH

Tbl2_sayl37:
DB
DB
DB
DB

,-end

Tbl2_~ayl38:

DB

;SG DONE
45
; speech spee'
Voice-8
.-system pit rh setting
137.137,137,138
FFH
,- end

Tbl2_sayl39:
DB
DB

,-SG DONE
60
;speech speed
Voice .-system pitch setting

DB
DB
Tbl2_s_

FFH
140:
DB
DB
DB
DB

149
;end

40
Voice-3
16

Tbl2_sayl41:
DB
DB
DB
DB

;end

;S3 D014E
55
;speech speed
Voice-8
;system pitch setting
8
FFH

DB
DB
DB

;speech speed
.-system pitch setting

FFH

;SG DONE
.-speech speed
.-system pitch setting

FFH

;end

20
Voice-5

;SG DONE
.-speech speed
system pitch setting

161
; end

Tbl2_sayl42:
DB
46
DB
Voice-9
DB
74
DB
FFH
;end

;SG DONE
;speech speed
;system pitch setting

Tbl2_sayl43:
DB
80
DB
Voice-4
DB
82
DB
FFH
;end

,-SG DONE
,-speech speed
;system pitch setting

Tbl2_sayl44:
;SG DONE
DB
46
;speech speed
DB
Voice ;system pitch setting

A-217

DB
DB

14
FFH

;end

Tbl2_sayl45:
;SG DONE
DB
46
;speech speed
DB
Voice ;pitch control
DB
6
DB
FFH
; end
Tbl2_sayl46:
;SG DONE
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
83
DB
FFH
;end
Tbl2_say!47:
DB
DB
DB
DB

;SG DONE
70
;speech speed
Voice ;pitch control
76
FFH
;end

Tbl2_sayl48:
;SG DONE
DB
60
;speech speed
DB
Voice ;system patch setting
DB
37
DB
FFH
; end
;TBL1_SAY53
;Tbll_say29:
;SG DONE
;
DB
46
.-speech speed
;
DE
Voice
;system pitch setting
;
;

DB
DB

52
FFH

Tbl2_sayl49:
DB
DB

30
Vcice*5

DB
DB

;end
;SG DONE
;speech speed
.-system pitch setting

47
FFH

;end

Tbl2_sayl50:
DB
6C
DB
Voice 3
DB
81
DB
FFH
;end

;SG DONE
;speech speed
;system pitch setting

Tbl2_saylSl:
DB
DB

;SG DONE
;speech speed
;system pitch setting

55
Voice-7

DB
DB

53
FFH

Tbl2_sayl52:
DB
DB

;SG DONE
40
;speech speed
Voice-10
;system pitch setting

DB
DB
Tt

say153:
DB
DB

;end

35
FFH

; end
;SG DONE
46
;speech speed
Voice-10
jsystem pitch setting

A-218

DB
DB

39
FFH

Tbl2_sayl54:
DB
DB
DB
DB

; end
:SG DONE
55
ispeech speed
Voice*3
;system pitch setting
165,165,144,165,144.165,144.165,165,165.165,144

FFH

;end

Tbl2_sayl55:
;SG DONE
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
DB

72
FFH

Tbl2_sayl56:
DB
DB
DB
DB

;end
;SG DONE
;speech speed

60

Voice .-system pitch setting
1
FFH
;end

TBL1_SAY53
Tbll_say38:
DB
DB
DB
DB

46
Voice

; SG DONE
,- speech speed
!system pitch setting

52
FFH

; end

END GEORGE 07/06/98
END WAKE

;GEORGE 07/06/98
;HUNGER
Tbl2_sayl57:
DB
65
DB
Voice»8
DB
DB

;SG DONE
;HUNGER
.-speech speed
;system pitch setting

68
FFH

,-end

Tbl2_sayl58:
;SG DONE
DB
7C
,-speech speed
DB
Voice .-system pitch setting
DB
DB

23
FFH

Tbi2_sayl59:
DB
DB

40
Voice-7

DB
DB

{end

7
FFH

Tbl2..sayl60:
DB
DB

;SG DONE
,-speech speed
;system pitch setting

,- end

55

;SG DONE
{speech speed

Voice .-system pitch setting
DB
DB

Tbl2_sayl61:
DB

33
FFH

{end

75

;SG DONE
,-speech speed

A-219

DB
DB
DB

oice ;system pitch setting
55
FFH
;end

Tbl2_sayl62:
;SG DONE
DB
40
;speech speed
DB
Voice-15
;system pitch setting
84
DB
; end
DB
FFH
Tbl2_sayl63:
DB
65
DB
Voice»8
157
DB
DB
FFH
; end
Tbl2_sayl64
DB
DB
Do
DB
Tbl2_sayl65
DB
DB
DB
DB
Tbl2„sayl66
DB
DB
DB
DB

;SG DONE
;speech speed
;system pitch setting

;SG DONE
55
Vcice»6
119
FFH
; end

65
Vcice»8
es
FFH
.-end

;speech speed
;system pitch setting

;SG DONE
;speech speed
;system pitch setting

;SG DONE
;speech speed
55
Voice ;system pitch setting
14
FFH
; end

Tbl2_sayl67
;SG DONE
DB
40
;speech speed
DB
Voice ;system pitch setting
8
DB
DB
FFH
; end
Tbl2_sayl68:

;SG DONE

;SAME AS SAY135 WITH DIFFERENT MOTOR

POS.
DB
DB

46
;speech speed
Voice ;system pitch setting

DB
DB

35
FFH

;end

;END GEORGE 07/06/98
;END HUNGER

;GEORGE 07/07/98
;INVERT
;WAS68
Tbl2_sayl69:
;SG DONE
;INVERT
DB
85
;speech speed
DB
Voice ;system pitch setting
DB

36
Do

FFH

;end

A-220

Tbl2_sayl70:
;SG DONE
DB
55
;speech speed
DB
Voice+8
;system pitch setting
DB
94
DB
FFH
;end

;
Tb12_sayl71:
DB
70
DB
Voice*8
DB
158
DB
FFH
;end
Tbl2_sayl72:
DB
DB

55
Voice*8

DB
DB

FFH

Tbl2_sayl73:
DB
DB

;SG DONE
speech speed
,-sy; am pitch setting

;SG DONE
;speech speed
;system pitch netting

97
FFH

Tbl2_sayl74:
DB
DB

;end

50
Voice+5

DB
DB

i

148
;end

100
Voice»8

DB
DB

;SG TONE
;spe.-ch speed
;system pitch setting

;SG DONE
;speech speed
.-system pitch setting

8
FFH

Tbl2_sayl75:
DI
DB

;SG DONE
55
~
;speech speed
Voice-5
.-system pitch setting

DB
DB

;end

9
FFH

Tbl2_sayl76:
DB
DB

,-SG DONE
50
;speech speed
Voice-10
;system pitch setting

DB
DB

;end

54
FFH

,- end

;
Tbl2_sayl77:
DB
DB

;SG DONE
70
;speech speed
Voice-6
;system pitch setting

DB
DB

57
FFH

,- end

I
Tbl2_sayl78:
;SO DONE
DB
■'4
; speech speed
DB
Voice ;system pitch setting
DB
DB

24
FFH

I
Tbl2_sayl79:
DB
DB

55
Voice-5

DB
DB

,- end
;8G DONE
;speech speed
;system pitch setting

10
FFH

;end

A-221

Tbl2_sayl80:
DB
DB
DB
DB

;SG DONE
65
Voice-5
80
; end
FFH

Tbl2_sayl31:
DB

55
Voice-10

DB
DB
DB

speech speed
.•system pitch setting

;SG DONE
speech speed
;system pitch setting

60
FFH

j end

;
; SG DONE
Tbl2_sayl82:
;speech speed
55
DB
.•system pitch setting
Voice-10
DB
DB
43
;end
DB
FFH
Tbl2_sayl83:
DB
75
Voice-8
DB
90
DB
; end
DB
FFH

;SG DONE
;speech speed
.■system pitch setting

Tbl2_sayl84:
DB
75
Voice-4
DB
DB
29
; end
DB
FFH

;SG DONE
;speech speed
;system pitch setting

Tbl2_sayl8S:
DB
DB
DB
DB

;SG DONE
.•speech speed
;system pitch setting

55
Voice»5
34
FFH

Tbl2_sayl86:
DB
DB
DB
DB

65
Voice*2

; end
;SG DONE
;speech speec
.•system pitch setting

45
FFH

; end

Tbl2_sayl87 s
65
DB
Voice-7
DB
39
DB
DB
FFH
; end

DB
DB
FFH
Tbl2_sayl58:
Tbll say88:
DB
DB
DB
DB

etting

;SG DONE

Tbl2_sayl88:
DB
DB

;SG DONE
;speech speed
;system pitch

35
Voice
130

.■speech speed
.•system pitch setting

; end

75
Voi-'°
23
FFH

; SG DONE
;speech speed
;system pitch setting
.-end

A-222

Tbl2_sayl89:
;S0 DONE
DB
55
;speech speed
DB
Voice ;system pitch setting
DB
1
DB
FFH
;end
Tbl2_sayl90:
DB
DB
DB
DP

;speech sp-sed
.•system pitch setting

100
Voice
97
FFH
;end

;
Tbl2_sayl91:
DB
100
DB
Voice-10
DB
97
DB
FFH
; end

;speech speed
.■system pitch setting

Tbl2_sayl92:
DB
100
DB
Voice-20
DB
97
DB
FFH
; end
;END GEORGE 07/07/98
;END INVERT
;start at 202
Tbl2_sayl93:
DB
DB
DB
DB

;speech speed
.system pitch setting

;SG DONE
;BACKSG
70
;speech speed

Voice ;system pitch setting
153
FFH
;end

Tbl2_sayl94:
;SG DONE
DB
75
;speech speed
DB
Voice ;system pitch setting
DB
DB

2
FFH

;end

~bl2_sayl95:
;SG DONE
DB
55
;speech speed
DF
Voice ;system pitch setting
DB
DB

39
FFH

Tbl2_sayl96:
DB
DB

;SG DONE
65
;speech speed
Voice*4
;system pitch setting

DB
DB

;end

67
FFH

Tbl2_sayl97:
DB
DB

Tbl2_sayl98:
DB
DB

PET

;SG DONE
75
;speech speed
Voice*b
;system pitch setting

DB
DB

j
; end

1
FFH

; end
;SG DONE
55
;speech speed
Voice-10
;system pitch setting

A-223

DB
DB

146
FFH

{end

•
Tbl2_sayl99
;SG DoNE
DB
55
{speech speed
DB
Voice»5
{system pitch setting
DB
35
DB
FFH
{end
{
Tbl2..say200
DB
DB
DB
DB

,-SG DONE
80
{speech speed
Voice-5
{system pitch setting
55
FFH
{end

Tbl2_say201
DB
DB
DB
DB

{SG DONE
70
,-speech speed
Voice-5
.-system pitch setting
62
end
FFH

Tbl2_say202
DB
DB
DB
DB

,-SG DONE
80
speech speed
Voice-5
isystem pitch setting
84
FFH
{end

•Tbl2_sayl48
;Tbl2_say212:
,•
DB
{
DB
;
DB
;
DB

,-SG DONE
70
,-speech speed
Voice-5
system pitch setting
29
FFH

;end

Tbl2_say203
,-SG DONE
DB
70
,• speech speed
DB
Voice
system pitch setting
DB
37
DB
FFH
f end
Tbl2_say204:
,-SG DONE
DB
55
;speech speed
DB
Voice ,-syste:. pitch setting
DB
152
DB
FFH
;end
Tbl2_say205:

;SG DONE

DB
DB

65
;speech speed
Voice-5
;system pitch setting

DB
DB

52
FFH

j end

;
Tbl2_say206:
DB
DB
DB
DB
FFH

;SG DONE
65
{speech speed
Voice*2
;system pitch setting
47
{end

Tbl2_say207:

;SG DONE

A-224

DB
DB
DB
DB

65
Voice-3
81
FFH
;end

;speech speed
;system pitch setting

;
Tbl2_say208:
DB
DB
DB
DB

;SG DONE
70
Voice-*6
48
FFH
,• end

Tbl2_say209:
DB
DB
DB
DB
FFH

;speech speed
; system pitch setting

;SG DONE
70
;speech speed
Voice*-3
; system pitch setting
161
,-end

Tbl2_say210:
;SG DONE
DB
55
;speech speed
DB
Voice ;system pitch setting
DB
DB

15
FFH

;end

Tbl2_say211:
DB
DB
DB
DB
FFH

;SG DONE
45
;speech -peed
Voice-10
;Sj -em pitch setting
8
; end

Tbl2_say212:
DB
DB

;-G DONE
55
;speech speed
Voice-10
;system pitch setting

DB
DB

42
FFH

,-end
,-SG DONE
65
.-speech speed
Voice-15
,-system pitch setting
57
FFH
;end

Tbl2_say213:
DB
DB
DB
DB

Tbl2_say214:
;SG DONE
DB
50
;speech speed
DB
Voice
system pitch setting
DB
75
DB
FFH
iend
1
Tbl2_say215:
;SG DONE
DB
55
;speech spe.d
DB
Voice .-system pitch sett ng
DB
DB

FFH

Tbl2_say216:
DB
DB

;SG DONE
70
;speech speed
Voice-3
.-system pitch setting

DB
DB
Tbl2_say217:

101
;end

49
FFH

;end
,-SG DONE

A-225

DB
DB
DB
DB

75
Voice+5
86
FFH

;speech speed
;system pitch setting

jend

Tbl2_say218:
;SG DONE
DB
55
;speech speed
DB
Voice ;system pitch setting
DB
72
DB
FFH
;end
Tbl2_say219:
DB
DB
DB
DB

;SG DONE
55
/speech speed
Voice*5
150
FFH
/end

Tbl2_say220:
DB
DB
DB
DB
FFH

/system pitch setting

/SG DONE
55
/speech speed
Vcice*5
/system pitch setting
151
/end

Tbl2_say221:
/SG DONE
DB
55
/speech speed
DB
Voice /system pitch setting
DB
97
DB
FFH
zend
Tbl2_say222:
DB
DB
DB
DB

/SG DONE
70
/speech speed
Voice /system pitch setting
165.149
FFH
;end

Tbl2_say223:
DB
DB

/SG DONE
55
/speech speed
Voice
/system pitch setting

DB
DB

FFH

Tbl2_say224/
DB
DB

/SG DONE
75
/speech spued
Voice-4
/system pitch setting

DB
DB

129
z er. ’

50
FFH

TL12_say225:
DB
DB

/SG DONE
55
/speech speed
Voice*5
/system pitch setting

DB
DB

zend

32
FFH

/end

/SG DONE
Tbl2_say226:
55
zspeech speed
DB
Voice*5
/system pitch setting
DB
165,140
DB
/end
DB
FFH
J
Tbl2_say227:

/SG DONE

DB
DB
DB
DB

65
;speech speed
Voice ;system pitch setting
144
FFH
;end

Tbl2_say228:
;SG DONE
DB
85
;speech speed
DB
Voice ;system pitch setting
DB
18
DB
FFH
send
Tbl2_say229
;SG DONE
DB
50
;speech speed
DB
Voice»8
;system pitch setting
118
DB
FFH
; end
DB
Tbl2_say230:
,-SG DONE
DB
65
;speech speed
DB
Voice ;system pitch setting
DB
66
DB
FFH
; end
Tbl2_say231
DB
DB
DB
DB

;SG DONE
70
;speech speed
Voice+8
;system pitch setting
87
; end
FFH

Tbl2_say232
DB
DB
DB
DB

;SG DONE
60
;speech speed
Voice»8
;system pitch setting
71
FFH
;end

Tbl2_say233
;SG DONE
DB
55
;speech speed
DB
Voice ;system pitch setting
DB
93
r’FH
j end
DB
;
Tbl2_say234
DB
DB
DB
DB

; SG DONE
46
;speech speed
Voice-20
;syster pitch setting
FFH

Tbl2_say235
DB
Db
DB

161
; end

70
Voice
81
FFH

DB

;speech speed
;system pitch setting

j end

;
Tbl2_say236
70
Voice

DB
DB
DB
DB

(speech speed
(system pitch setting

93
FFH

(end

A-227

SICK
GEORGE 07/08/98
start at 39
Tbl2_say237:
DB
55
DB
Voice+5
165,141
DB
; end
DB
FFH
;Tbl2_sayl35
.•Tbll_say40 i
;
DB
;
DB
;
DB
;
DB
;Tbll_sayll7
;Tbll_say41:
;
DB
;
DB
;
DB
;
DB

46
Voice
35
FFH

J SG DONE
; SICK1
speech speed
.•system pitch setting

;SG DONE
;speech speed
;system pitch setting
; end

46
Voice

;SG DONE
;speech speed
;system pitch setting

10
FFH

; end

;SG DONE
Tbl2_say238:
46
;speech speed
DB
Voice .system pitch setting
DB
DB
40
FFH
; end
DB
Tbl2_say239:
46
DB
Voice-5
DB
60
DB
; end
FFH
DB

; SG DONE
;speech speed
;system pitch setting

; SG DONE
Tbl2_say240
;speech speed
50
DB
Voice ;system pitch setting
DB
30
DB
end
DB
FFH
;Tbll_say53
;SG DONE
;Tbll_say45
;speech speed
46
;
DB
;system pitch setting
Voice
;
DB
;
;

DB
DB

Tbl2_say241
DB
DB
DB
DB
Tbl2_say242
DB
DB
DB
DB
Tbl2_say243
DB
DB

52
FFH

; end
; SG DONE

70
Voice-8

;speech speed
.■system pitch setting

17
, er. .1

FFH

;SG DONE
;speech speed
80
Vo c«-10
;system pitch setting
46
FFH

; end

55
Voice-8

; SG DONE
;speech speed
;system pitch setting

DB
DB

8
FFH

/end

Tbl2_say244:
DB
40
DB
Voice-8
DB
73
DB
FFH
/ end

;SG DONE
;speech speed
;system pitch setting

Tbl2_say24S:
;SG DONE
DB
75
;speech speed
DB
Voice-5
;system pitch setting
DB
80
DB
FFH
/end
;Tbl2_sayl82
;Tbll_say51:
zSG DONE
;
DB
55
;speech speed
•
DB
Voice-10
;system pitch setting
j
;

DB
DB

43
FFH

Tbl2_say246:
DB
DB
DB
DB

;end
;SG DONE
;speech speed

70

Voice ;system pitch setting
9
FFH
/ end
; SG DONE
60
/speech speed
Voice-12
/system pitch setting
90,165
FFH
/end

Tbl2_say247
DB
DB
DB
DB
Tbl2_say248:
DB
DB
DB
DB

100

Voice /system pitch setting
140
FFH
;end

Tbl2_say249:
DB
DB
DB
DB

;SG DONE
:speech speed

;SG DONE
40
/speech speed
Voice-20
/system pitch setting
162,129
FFH

z end

Tbl2_say250:
/SG DONE
DB
100
/speech speed
DB
Voice /system pitch setting
DB
142
DB
FFH
z end
/END GEORGE 07/08/98
/END SICK

/LIGHT
/GEORGE 07/08/98
/starts at 2
Tbl2_say251:
DB
40

/speech speed

DONE RB

BEGIN LIGHT

D.(BRIGHTER)

A-229

-1

DB
DB
DB

Voice ;pitch control
119,18
FFH
; end

; Tbll_say252:
DB
DB
DB

40
FFH

Tbl2_say252:
75
DB
Voice*5
DB
142
DB
DB
FFH
;end
Tbl2_say253
DB
DB
DB
DB

DO NOT USE
SEE SAY 15

; speech speed
;pitch control
; end

Done RB
;speech speed
;system pitch setting

done RB
46
;speech speed
Voice ;system pitch setting
158.165,165,14.6
FFH

;end

Tbl2_say2S4
done RB
46
;speech speed
DB
DB
Voice ;system pitch setting
DB
102.149
DB

FFH

Tbl2_say2S5:
DB
DB
DB
DB

;end

46
;speecn speed DONE RB
Vcice-8
;system pitch setting
119.35.164,5,81
FFH

Tbl3_say256:
DB
DB
DB
DB

; end

46
;speech speed
DONE RB
Voice-4
;system pitch setting
148,163,145
FFK

;end

Tbl3_say257:
DB
46
;speech speed
DB
Voice .-system pitch setting
DB
131,164,95,149,123
DB

FFH

Tbl3_say258:
DB

DB

iend

55

DB
DB

;speech speed

SEO 4,

AGE 2 DONE RB

Voice-4
;system pitch setting
158,163,8,6
FFH

Tbl3_say259:
DB
DB

;end

45
.speech s;
d
SEQ 6, AGE 2
Voice*8
;system p.tch setting

DB
DB

DONE RB

DONE RB

119,35,70,81
FFH

; end

;
Tbl3_say260:
DB

46

;speech speed

RB

DONE

A-230

DB
DB
DB

Voice*8

;system pitch setting

SEQ 1,

AGE 3

119,66
FFH
;end

;
Tbl3_say261:
DB
DB

46
Voice-3

DB
DB

FFH

Tbl3_say262:
DB
DB

RB DONE

158,14,42
iend

46
;speech speed
SEQ 6 AGE 3
Voice-3
;system pitch setting

DB
DB

;speech spi d
SEQ 4, AGE 3
;system p tch setting

RB DONE

119,35,5,93
FFH

Tbl3_say263:
DB
DB

60
Voice*8

DB
DB

,-end

;speech speed
SEQ 2, AGE 1
;system pitch setting

RB DONE

131,95,149
FFH

Tbl3_say264:
DB
DB

46
Vcice-4

DB
DB

;end

;speech speed
RB DONE
.-system pitch setting

158,8.42
FFH

Tbl3_say265:
DB
DB
DB

,- end
;
46
;speech speed
Voice-4
;system pitch setting
119,35,70.93

K5 DO*®

DB
FFH
;end
;END GEORGE 07/08/98
,-END LIGHT
; DARK
,-GEORGE 07/08/98
Tbl3_say266:
DB
DB

52
;speech speed
BEGIN LIGHT D. (DARKERI
Voice *8
;system pitch setting
SEQ 1 AGE 1 RB DONE

DB
DB

119,10,162,6
FFH

Tbl3_say267:
DB

46

DB

!
Tbl3_say268:
DB
DB
DB

DB

; end

55
;speech speed
Voice*8
;system pitch setting SEQ 3 AGE 1 DONE RB
119,6,163,82,163,23
FFH

Tbl3_say269:
DB
DB

SEQ 2 AGE 1 DONE RB

;system pitch setting

119,6,21
FFH

DB

.-speech speed

Voice*8

"B
D<-

;end

;end

40
Voice*8

;speech speed
system pitch setting

SEQ 4 AGE 1 DONE RB

158,101,163,104

A-231

DB

FFH

Tbl3_say270:
DB
DB
DB
DB

;

end

70
;speech speed
Voice*8
;system pitch setting
148.10,6,148
FFH

Tbl3_say271:
DB
DB
DB

; end

59
;speech speed
Voice*4
;system pitch setting
149,163,21,21
.-SEQ6 AGE4/SEQ14 AGE4 LIGHT js

DB

FFH

; end

Tbl3_say272:
DB
DB
DB
DB

52
; speech speed
Voice*8
;system pitch setting
119,35,162,10,5.81
FFH
;end
DONE RB

Tbl3_say273:
DB
DB
DB

60
;speech speed
Voice*8
;pitch control
ONE RB
63,163.149,163,163,51.35,152

DB

FFH

Tbl3_say274:
DB
DB

52
;speech speed
Voice*2
;system pitch setting

DB
DB

; end

FFH

119,60.6
; end

Tbl3_say275:
DB
DB
DB
DB

52
;speech speed
Voice*2
,-pitch control
119,60.45,85
FFH
; end DONE RB

Tbl3_say276:
DB
DB

60
Voice*!

DB
DB

DONE RB

119,42,82,23
FFH
;end

Tbl3_say277:
DB
DB
DB

70
;speech speed
Voice*!
;system pitch setting
148,60,6,148

DB

FFH

Tbl3_Fay278:
DB
DB
DB
DB

;speech speed
;system pitch setting

;end

DONE RB

52
;speech speed
Voice*!
;system pitch setting
119,52,60,70.81
FFH

DONE RB

;end

Tbl3_say279:
DB
52
;speech speed
DB
Voice ;system pitch setting
DB

119,10,42

A-232

DB

FFH

; end

DONE RB

Tbl3_say280:
DB
52
;speech speed
DB
Voice
;system pitch setting DONE RB
DB
119,10,34,85
DB
FFH
j end
I
Tbl3_say281:
DB
60
;speech speed
DB
Voice ;system pitch setting
DB
119,42,83,23
DB
FFH
;end
DONE RB
Tbl3_say282:
DB
52
;speech speed
DB
Voice ; system pitch setting
DB
119,52,60,5,93
DB
FFH
;end
DONE RB
Tbl3_say283:
DB
60
;speech speed
WRONG WORD NUMBER FOR "KISS"
DB
Voice ;system pitch setting
DB
63.149,162,38,35,152
DB
FFH
;end
DONE RB

!'NOTE!!

PRINTED 7,

~ HAD

Tbl3_say284:
DB
52
;speech speed
DB
Voice ;system pitch setting
DB
119,60,42
DB
FFH
; end
DONE RB
Tbl3_say285:
DB
DB
DB
DB

52
;speech speed
Voice-3
;system pitch setting
119,60,34,85
FFH

; end

Tbl3_say286:
DB
60
j speech speed
DB
Voice ;system pitch setting
DB
119,42,8'.68
DB

FFH

;end

I

Tbl3_say287:
DB
70
(speech speed
DB
Voice (system pitch setting
DB
148,60,42,148
DB

FFH

,- end

Tbl3_say288:
DB
46
(speech speed
DB
Voice .-system pitch setting
DB
119,163.52,60,70,93
;SEQ7 AGE4/SEQ15 AGE 4 LIGHT js
DB

FFH

,• end

Tbl3_say289:
DB
50
(speech speed
DB
Voice (system pitch setting

A-233

DB
DB

FFH

; SEQS AGE4/SEQ16 AGE 4 LIGHT -is

63.165,149,38.52.152
; end

.END GEORGE 07/08/98
.-END DARK
;SOUND
••start 43
.bl3_say290:
DB
50
;speech speed
DB
Voice ;system pitch setting
DB
163,148,165,17
;S1-A1,.
'1/SI-A2 SOUND js
DB
FFH
; end
; S9-A2/S1-A3/S9-A3 SOUND js
Tbl3_say291:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
85,165,165,165
;S2-A1/S10-A1/S2-A1 SOUND js
DB
165,165,140
;S10-A2/S2-A3/S10-A3 SOUND js
DB

FFH

.end

;S2-A4/S10-A4 SOUND js

Tbl3_say292:
DB
50
;speech speed
DB
Voice ;system pitch setting
DB
121,165.164.14.163,41.21
DB

"FH

;S3-Al/Sll-Al'SOUND js

;end

Tbl3_say293:
DB
46
;speech speed
jB
Voice ,-system pitch setting
DB
163.125,164.5.162.41
IB
FFH
;end

;S4-Al/S12-n.

Tbl3_say294:
D3
46
;speech speeu
DB
Voice ;system pitch setting
DB
35,163,89
;S5-A' Sli A1 SOUND
DB

FFH

Tbl3_say29S:
DB
DB
DB
DB

.

JND js

(with say/m2i

; end

53

;speech speed

Voice ;system pitch setting
163.148,163,36
;S6-A1/S14-A1/S6-A2 SOUND js
FFH
;end
;S14-A2/S6-A3/S14-A3 SOUND js

Tbl3_say2'ti

DB
DB
DB

53
;speech speed
Voice ;system pitch setting
17
;S7-A1/S15-A1 SOUND
FFH

(with say/m2)

js

; end

Tbl3_say29>:
DB
60
;speech speed
DB
Voice ;system pitch setting
DB
122,164,21,164,21
;S8-A1/S16-A1 SOUND js
DB
FFH
;end
;S8-A3/S16-A3 SOUND js
Tbl3_say298:
DB
DB

46

'.-spee-h speed

Voice ;system pitch setting

js

DB
DB

FFH

121,165,164,8,16'.41.21
;end

Tbl3_say299:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
163,129,164,5,165,73
DB
FFH
;end

JC3-A2/S11-A2 SOUND js

;S4-A2/S12-A2 SOUND js

;
Tbl3_say300:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
35,165,31
{S5-A2/S13-A2/SS-A3 SOUND

(with say/m2)

j»
DB

FFH

jend

,-S13-A3/S5-A4/S13-A4 SOUND

Tbl3_say301:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
8,162,41,163,85
say/m2) js
DB

FFH

;S7-A2/S15-A2 SOUND

(with say/m2)

(with

; end

;
Tbl3_say302:
DB
60
;speech speed
DB
Voice ;system pitch setting
DB
122,164,21
;S8-A2/S16-A2 SOUND js
DB

FFH

;end

Tbl3_Bay303:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
121.165,164.14,163,73,21
DB

FFH

;S3-.',3/Sll-A3 SOUND js

:end

f
Tbl3_say304:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
163,129,164,35,165,44
DB
FFH
;end
J
Tbl3_say305:
DB
46
ispeech
DB
Voice ;sys cm pitch
DB
8,73,164,85
DB
FFH
;end

;S4-A3/S12-A3 SOUND js
;F4-A4/S12-A4 SOUND js

speed
setting
;S7-A3/S15-A3 SOUND
;S7-A4/S15-A4 SOUND

(with say/m2tjs
(with say/m2ljs

I

Tbl3_say306:
DB
55
ispeech speed
DB
Voice ;system pitch setting
DB
164,148,164,163,46
DB

FFH

I
Tbl3_say307:
DB
46
jspeech speed
DB
Voice ,-system pitch setting
DB
121,165,164,8,163.73,21
DB

FFH

;S1-A4/S9-A4 SOUND js

;end

;S3-A4/S11-A4 SOUND js

;end

I

A-23S

Tbl3_say308:
DB
55
;speech speed
DB
Voice ;system pitch setting
DB
164,148,164,163,54
DB

FFH

;S6-A4/S14-A4 SOUND js

j end

;
Tbl3_say309:
DB
60
;speech speed
DB
Voice ;system pitch setting
DB
122,164,163,88,164.21
DB

FFH

;S8-A4/S16-A4 SOUND js

;end

;END SOUND
; TILT
;GEORGE 07/09/98
Tbl3_say310:
DB
56
DB
Voice*8
DB
160
DB

FFH

Tbl3_say311:
DB
DB
DB
DB

,-end

46
Voice
157 36
FFH

;speech speed
,-pitch control
;S1 A1 TILT/S4 A1 TILT/S14 A1 TILT js

;speech speed
,-pitch control
;S2 A1 TILT js

; end

Tbl3_say312 :
DB
46
;speech speed
DB
Voice ,-system pitch setting
DB
158,9
;S3 A1 TILT js
DB

FFH

Tbl3_say313:
DB
DB
DB
DB

;end

46
Voice*8
154
FFH

;speech speed
;system pitch setting
;S5 A1/S4 A2/S2 A3/S2 A4 TILT js

,-end

Tbl3_say314:
DB
46
!speech speed
DB
Voice ;system pitch setting
DB
159,82,39
,-S6 A1 TILT js
DB

FFH

;end

Tbl3_6fty315:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
155,39,39
;S7 A1 TILT/S6 A2 TILT js
DB

FFH

;end

Tbl3_say316:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
37,152
;S8 A1 TILT
DB

FFH

(with say/m5)

js

; end

Tbl3_say317:

A-236

46

DB
DB
DB
DB

;speech speed

Voice ;system pitch setting
154,120
;S9 A1 TILT/S9 A2 TILT js
FFH

; end

Tbl3_say318:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
155,120,120
;S10 A1 TILT/S10 A2 TILT js
DB

FFH

;end

I
Tbl3_say319:
DB
46
ispeech speed
DB
Voice ;system pitch setting
DB
35,57
;S11 A1 TILT
DB

FFH

(with say/m2l

js

,-end

Tbl3_say320:
DB
48
;speech speed
DB
Voice ;system pitch setting
DB
158,10,80
;S12 A1 TILT js
DB

FFH

Tbl3_say321:
DB
DB
DB

46

;speech speed

Voice .system pitch setting
119,160
;S13 A1

DB

FFH

Tbl3_say322:
DB
DB
DB

/ S15 A3 TILT js

; end

46

;speech speed

Voice ;system pitch setting
160,9
;S15 A1 TILT js

DB
Tbl3_s

;end

FFH

.-323:
DB
DB
DB
DB

;end

46

;speech speed

Voice ;system pitch setting
154,149
;S16 A1 / S15 A2
FFH

/ S13 A3 TILT js

;end

Tbl3_say324:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
160
;S1 A2/S3 A2/S1 A3/S1 A4 TILT js
DB

FFH

Tbl3_say325:
DB
DB
DB
DB

;end

46

;speech speed

Voice ;system pitch setting
52,9
;S2 A1 TILT
FFH

(with say/ml6)

js

;end

Tbl3_say326:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
' 159,83,39
;S5 A2 TILT js
DB

FFH

;end

Tbl3_say327:

A-237

DB
DB
DB

46
;speech speed
Voice ;system pitch setting
52,43,81,152
,-S7 A2 TILT

DB

FFH

(with say/m5)

js

; end

Tbl3_say328:
DB
DB
DB

46
;speech speed
Voice ;system pitch setting
155
;S8 A2 TILT

DB

FFH

Tbl3_say329:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
52,57
;Sll A2 TILT
DB

FFH

(with say/m5)

js

; end

(with say/m2)

js

; end

Tbl3_say330:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
158,60.80
;S12 A2 TILT js
DB
FFH
;end
Tbl3_say331:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
163,156
;S13 A2
DB

FFH

Tbl3_say332:
DB
DB
DB

46

FFH

Tbl3_say333:
DB
DB
DB
TILT js
DB

;end

46

DB
DB
DB

;speech speed

Voice ;pitch control
154,118,163.145,165,162.118

Tbl3_say334 :
DB

46

;speech speed

Voice ;system pitch setting
159

Tbl3_say335:
DB

46

;speech speed
;S4 A3/S4 A4 TILT

FFH

(with say/m26)

js

; end

Tbl3_say336:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
155,52,62,85
DB

;S3 A3 TILT js

;end

Voice ;pitch control
83,1
FFH

;S16 A2/S14 A3/S14 A4

; end

FFH

DB

js

;speech speed

FFH

DB

(with say/m5)

Voice ;system pitch setting
8,22,85
;S14 A2 TILT js

DB

DB

TILT

; end

;S5 A3 TILT js

;end

A-238

Tbl3_say337:
DB
DB
DB
DB

50
;speech speed
Voice ;system pitch setting
52,48,93,152
;S6 A3 TILT
FFH
;end

(with say/m5)

Tbl3_say338:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
155
;S7 A3/S7 A4 TILT
DB
FFH
;end

js

(with say/m5)

js

Tbl3_say339:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
155,120,163,149
;S8 A3/S8 A4 TILT js
DB
FFH
;end
Tbl3_say340:
DB
46
;speech speed
DB
Voice ,-system pitch setting
DB
165,129
;S9 A3/S9 A4 TILT
DB
FFH
;end

(with sa;, 'm9l

js

Tbl3_say341:
DB
DB
DB
DB

46
;speech speed
Voice ;system pitch setting
160,163,120,120
,-£10 A3/S10 A4 TILT
FFH
;end

Tbl3_say342:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
163,23
;S11 A3/S15 A4 TILT
DB
FFH
;end
Tbl3_say343:
DB
55
;speech speed
DB
Voice ;system pitch setting
DB
164,156
;S12 A3 TILT
DB

FFH

DB
DB
DB

(with say,m2&21)

(with say/m5)

js

(with say/mSI

js

(with say/m26!

js

js

;end

Tbl3_say344:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
163,1,163,1,117
;S16 A3 TILT
DB
FFH
;end
Tbl3_say345:
DB

(with say/ml6ljs

46
;speech speed
Voice ;system pitch setting
27,162,149
;S3 A4 TILT
FFH
; end

;
Tbl3_say346:
DB
DB
DB
jB

46
jspeech speed
Voice ;system pitch setting
155,52,29,163,85
;S5 A4 TILT js
FFH
; end

;

A-239

Tbl3_say347:
DB
DB
DB
DB

46
;speech speed
Voice ;system pitch setting
52,47,93,164.152
;S6 A4 TILT
FFH
; end

Tb2 J_say348:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
52,24,68
;S11 A4 TILT
DB

FFH

Tbl3_say349:
DB
DB
DB
DB

46

FFH

js

;speech speed
(with say/m5)

js

;end

Tbl3_say350:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
163,1,163,39.163,117
DB

(with say/m2)

js

;end

Voice ;system pitch setting
22,149
;S13 A4 TILT
FFH

(with soy/m5)

;S16 A4 TILT

(with say/m5)

js

;end

;END GEORGE 07/09/98
;GEORGE
;IR 07/09/98
Tbl3_say351:
DB
DB
DB
DB

46
Voice’S
40
FFH

Tbl3_say352:
DB
DB
DB
DB

;speech speed
,-pitch control
;SEQ1,seq2.seq3,seq4

ir age 1

;end

46
;speech speed
Voice
;pitch control
66,162,85
;seq5, ir age!
FFH

;end

Tbl3_say353:
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
19,85
,-seq6, ir agel
DB

FFH

Tbl3_say354:
DB
DB
DB
DB

46
;speech speed
Voice*8
;system pitch setting
162,164.134,134
;seq6, ir agel DO DO DO
FFH

Tbl3_say355:
DB
DB
DB
DB
Tbl3_say356:
DB

DANCE WAH

;end

;end

46
;speech speed
Voice*2
;system pitch setting
134,134,25,19
;seq7 ir agel
FFH

;end

50

;speech speed

A-240

DB
DB
DB

Voice*8
162
FFH

Tbl3_say357:
DB
DB
DB
DB

;system pitch setting
;end

EMPTY SPACE

42
;speech speed
Voice
;system pitch setting
102.97,118,34
;seq8 ir agel
FFH

;end

Tbl3_say358:
DB
50
!speech speed
DB
Voice ;system pitch setting
DB
117,34,22
;seq9 ir agel
DB
FFH
;end
Tbl3_say359:
DB
50
;speech speed
DB
Voice .-system pitch setting
DB
34,78,145,145
;seql0,ll
DB

FFH

ir agel

;end

Tbl3_say360:
DB
50
;speech speed
DB
Voice ;system pitch setting
DB
150,151,93.71
;seql2 ir agel TWINKLE
DB

FFH

Tbl3_say361:
DB
DB
DB

;end

46

;speech speed

Voice ;system pitch setting
91,31,165,165,165.165.165.165,128,31

;seql3,14 ir

agel
DB

FFH

;end

Tbl3_say362:
DB
46
;speech speed
DB
Voice ,-system pitch setting
DB
161,72,161
;seql5 ir agel
DB

FFH

;end

Tbl3_say363 :
DB
60
;speech speed
DB
Voice ,-system pitch setting
DB
144.144.144,144
DB

FPH

Tbl3_say364:
DB
DB
DB
DB

FFH

Tbl3_say365:
DB
DB
DB
DB

46
Voice*5

;speech speed
;system pitch setting

81,40

;seql,2,3 ir age2

;end

46
Voice*8
81,40
FFH

;seql6 ir agel

;end

;speech speed
;system pitch setting
;seq4,5 ir age2

; end

Tbl3_say366:

A-241

DB
DB
DB
DB

46
Voice*8
66,159
FFH
;end

;speech speed
;system pitch setting
;seq6 ir age2

;
Tbl3_say367:
DB
DB
DB

46
;speech speed
Voice*7
;system pitch setting
19,165,165,165,164.85,134,165,135

,-seq7,8 ir

age2
DB

FFH

;end

Tbl3_say368:
46
;speech speed
DB
Voice*3
;system pitch setting
DB
DB
118,25,34
DB
FFH
; end

;seq9 ir age2

Tbl3_say369:
DB
51
;speech speed
DB
Voice*8
;system pitch setting
;seql0 ir age2
DB
102,97,118
DB
FFH
; end
Tbl3_say370:
46
;speech speed
DB
Voice*5
;system pitch setting
DB
;SEQ11 ir age2
DB
117,34,22
DB
FFH
;end
Tbl3_say371:
DB
DB
DB

48
;speech speed
Voice ;system pitch setting
91,31,165,165.165,165,165.165,124.31

;seqi3,14 ir

age2
DB

;end

FFH

Tbl3_say372:
55

DB
DB
DB
DB

,• speech cpeed

Voice ;system pitch setting
161,72,161
FFH

,• seql5 ir age2

; end

Tbl3_say373:
50
;speech speed
DB
DB
Voice ;system pitch setting
DB
143,144,143
; end
DB
FFH
Tbl3_say374:
50
;speech speed
DB
DB
Voice ;pitch control
14,40
;seql,2,3,4,5
DB
DB

FFH

;seql6 ir age2

ir age3

.-end

Tbl3_say375:
46
{speech speed
DB
Voice*5
.-system pitch setting
DB
35,48,66
jseq6 ir age3
DB
; end
DB
FFH

A-242

Tbl3_say376:
DB
DB
DB
DB

50
; speech speed
Voice*8
;pitch control
:seq7,8 ir age3
19,12,134 ,134
; end
FFH

Tbl3_say377:
46
; speech speed
DB
Voice*3
;system pitch setting
DB
;SEQ9 ir age3
34,85,99
DB
; end
DB
FFH
Tbl3_say378
DB
DB
DB
DB

46
speech speed
;system pitch setting
Voice*2
;seqll ir age3
156,25,34
FFH
; end

Tbl3_say379
50
speech speed
DB
;system pitch setting
Voice*3
DB
63.165,165,165.165.165,124,31
DB
DB
FFH
;end
Tbl3_say380:
DB
DB
DB
DB

70
;speech speed
Voice*4
;system pitch setting
35,72,162,162,162,162.162,162.162,i62,162,162,161
FFH

Tbl3_say381:
DB
DB
DB
DB

58
Voice*5
40,85
FFH

Tbl3_say382:
DB
DB
DB
DB

;end

;speech speed
; system pitch setting
;SEQ1,2,3,4,5 IR AGE4

;end

46
;speech speed
Voice*6
.-system pitch setting
81,66,21
;seq6 ir age4
FFH

;end

;
Tbl3_say383:
DB
DB

46
Voice*7

DB
DB

134,134,25,19
FFH

I
Tb’4_say384:
DB
DB
DB
DB

{speech speed
;system pitch setting
;seq7,8 ir age4

;end

50
jspeech speed
Voice*8
,-system pitch setting
34,78,145,145
;seq9 ir age4
FFH

;end

;
Tbl4_say385:
DB
DB
DB
DB

50
ispeech speed
Voice*8
;system pitch setting
119,44,52,71,150
seqlO ir age4
FFH
;end
SAY NUMBERS MODIFIED TO MATCH CORRECT

A-243

DIALOGUE

Tbl4_say386:
DB
DB
DB
DB

46
;speech speed
Voice+8
;system pitch setting
34,85,99
seqll ir age4
FFH
i end

Tbl4_say387 :
DB
DB
DB
DB

50
;speech speed
Voice*l
;system pitch setting
119,124,31
;seql2 ir ago4
FFH
;end

Tbl4_say388:
DB
DB
DB
DB

56
Voice*3
162,63
FFH
; end

.-speech speed
;system pitch setting
;seql4 ir age4

Tbl4_say389:
DB
60
;speech speed
DB
Voice-8
;system pitch setting
DB
161,164,161
;SEQ10 HANGING (YAWN)
;
DB
46
;speech speed
;
DB
Voice*3
;system pitch setting
;
DB
161.144,144
;seqlS ir age4
DB
FFH
; end
;Tbll_say41
;
DB
;
DB
;
DB
;
DB

46
;speech speed
Voice*4
;system pitch setting
143,144,143
;seql6 ir age4
FFH
;end

;Tbll_say42:
DB
DB
DB
DB

46
Voice
4
FFH

;speech speed
;system pitch setting
; end

Tbl4_say390:
DB
55
;speech speed
DB
Voice*3
;system pitch setting
DB
165,165,144,165,144,165,144,165,144
DB
FFH
jend
; END IR
;END GEORGE
; ADDED BY DMH
Tbl4_say391:
DB
DB
DB
DB
;

ADDED BY DMH

(FOR FURBY SAYS)
46
Voice
42
FFH

;speech speed
;system pitch setting
; LIGHT (FURBY SAYS)
;end

(FOR FURBY SAYS)

A-244

Tbl4_say392:
DB
52
;speech speed
DB
Voice ;system pitch setting
DB
60,42
;no light
DB
FFH
; end
Tbl4_say393
55
DB
;speech speed
Voice ;system pitch setting
DB
164,163 46 ; LOUD SOUND
DB
DB
FFH
;end

Tblfl_say394
DB
DB
DB
DB

FFH

; DMH
;speech speed
•system pitch setting
44
; LISTEN (FURBY
;end

46
Voice
52,163
FFH

• speech speed
;system pitch setting
;(MEI with names (dmh)
; end

46
Voice
164,163

1
Tbl4_say395
DB
DB
DB
DB

Tbl4_say396
DB
56
Voice
DB
DB
162,55
DB
FFH
; end

;speech speed
;system pitch setting
;name IMEE MEE) (dmh)

Tbl4_say397
DB
DB
DB
DB

;speech speed
;system pitch setting
;(DO MOH)

58
Voice
163,23
FFH
;end

Tbl4_say398
60
DB
Voice
DB
80
DB
DB
FFH
;end

;speech speed
.•system pitch setting
; TOH-LOC

1

Tbl4_say399
DB
DB
DB
DB

60
Voice
FFH

165
;end

;speech speed
.•system pitch setting
; DELAY 1 SECOND DMH

l
!
start of diagnostic tables dmh
Tbl4_aay400
;speech speed
DB
0
;system pitch setting
Voice.16
DB
; used at start of diagnostics
168.168.168
DB
FFH
;end
DB

Tbl4_say401:
DB
DB
DB

20
Voice-. 13
169.165

.■speech speed
,- system pitch setting
;key beep

A-245

DB
DB

1
FFH

;end

Tbl4_say402:
DB
20
DB
Voice+5
169,163,169,163,169
DB
2
;
DB
DB
FFH
;end
Tbl4_say403:
DB
96
Voice-40
DS
DB
169,163
DB
FFH
;end
Tbl4_say404
DB
46
DB
Voice
DB
169
DB

FFH

;speech speed
;system pitch setting
,-pass test

;speech speed
.■system pitch setting
;fail test tone

;speech speed
.•system pitch setting
.■speaker tone test
; end

Tbl4_say405
DB
46
;speech speed
DB
Voice ;system pitch setting
DB
163
; no sound for start of motor cal
DB
FFH
;end
Tbl4_say406:
DB
DB
DB
DB

20
Voice*5
169,163,169,163,169
FFH

;speech speed
;system pitch setting
;feedl

;end

Tbl4_say407:
DB
20
;speech speed
DB
Voice-»5
; system pitch setting
DB
169.163.169,163,169
.pass feed sw
DB

FFH

;end

Tbl4_say408:
DB
20
;speech speed
DB
Voice-»5
;system pitch setting
DB
169,163,169,163,169
,-pass light test
DB
FFH
;end
Tbl4_say409:
DB
20
;speech speed
DB
Voice«5
;system pitch setting
DD
169,163,169,163,169
.-pass sound test
DB
Tbl4_say410:
DB
DB
DB
DB
DB

FFH

;end

20
;speech speed
Voice»5
;system pitch setting
;pass all test complete
169,163,169,163,169
159
FFH

;end

Tbl4_say411:

A-246

DB
DB
DB
DB

60
Voice*-3
31,52
FFH
;end

;speech speed
; HIDE ME
.-system pitch setting
; HIDE ME

(HIDE AND SEEK)

DHM

Tbl4_say412:
DB
DB

100
;speech speed
Voice .-system pitch setting

DB
DB

FFH

167,167,167
;end

;SEQ1 FEED AGE1

(AAAA''I

Tbl4_say413:
Tbl4_say414:
Tbl4_say415:
Tbl4_say416:
Tbl4_say417:
Tbl4_say418:
Tbl4_say419:
Tbl4_say420:
Tbl4_say421:
Tbl4_say422:
Tbl4_say423:
Tbl4_say424:
Tbl4_say425:
Tbl4_say426:
Tbl4_say427:
Tbl4_say428:
Tbl4_say429:
Tt»4. iay430:
Tbl4_say431:

;
Tbl4_say432:

;
Tbl4_say433:
I

Tbl4_say434:
Tbl4_say435:
Tbl4_say436:
Tbl4_say437i

A-247

Tbl4_say438
1
Tbl4_say439

;
Tbl4_say440
Tbl4_say441
Tbl4_say442
Tbl4_say443
Tbl4_say444
Tbl4_say445
Tbl4_say446
Tbl4_say447
Tbl4_say448
Tbl4_say449
Tbl4_say450
Tbl4_say451
Tbl4_say452
Tbi4_soy453
Tbl4_say454
Tbl4_say455
Tbl4_say456
Tbl4_say457
Tbl4_aay458
Tbl4_say459
Tbl4_say460
Tbl4_say461
Tbl4_say462
Tbl4_Bay463
Tbl4_say464
Tbl4_say465
J
Tbl4_say466
Tbl4_say467

A-248

Tbl4_say468:

;
Tbl4_say469:

;
Tbl4_aay470:
i
Tbl4_say471:
Tbl4_*ay472s
Tbl4_»ay473
Tbl4_»ay474
I
Tbl4_»ay475
I

Tbl4_»ay476
Tbl4_say477
:
Tbl4_say478
Tbl4_aay479
Tbl4_say480
Tbl4_say481
Tbl4_say482
Tbl4_say483
Tbl4_say484
Tbl4_say485
Tbl4_say486

;
Tbl4_say487
I
TbX4_»ay488

;
Tbl4_»ay489
i
Tbl4_»ay490

;
Tbl4_«ay491
I
Tbl4_«ay492

;
Tbl4_»ay493
I
Tbl4_say494
Tbl4_aay495:
1

Tbl4_Bay496:

;
Tbl4_say497:

Tbl4_aay498:
Tbl4_aay499:

;
Tbl4_aay500:
Tbl4_aay501:
I
Tbl4_aay502:
Tbl4_aay503:
Tbl4_say504:
Tbl4_say505:
Tbl4_aay506:
Tbl4_say507:
Tbl4_say508:
Tbl4_say509:
Tfcl4_say510:
Tbl4_say511:
; ON POWER UP.
DB
DB
DB
DB

UNTIL WAKE-UP TABLE INSTALLED (Dave)
46
;speech speed
Voice
165
FFH

;

Motor tables

;

Offsett pointer

;end

Motor_grpl:
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

Tbll_M001.Tbll M002,Tbl1_M003,Tbl1_M004,Tbl1_M005
Tbll_M006,Tbll MOOT.Tbll_M008,Tbll_M009.Tbll_M010
Tbll_M011,Tbll_M012,Tbll_M013.Tbl1_M014,Tbll_M015
Tbll_M016.Tbll_M017,Tbll_M018.Tbll_M019,Tbll_M020
Tbl1_M021.Tbl1_M022.Tbl1_M023,Tbll_M024,Tbll_M025
Tbll M026,Tbll M027,Tbl1_M028.Tbl1_M029.Tbll_M030
Tbl1_M0 31.Tbl1_M0 3 2,Tbl1_M0 3 3,Tbl1_M0 34.Tbl1_M0 3 5
Tbll_M036,Tbll_M037,Tbll_M03B.Tbl1_M039.Tbll_M040
Tbll_M041.Tbll_M042.Tbll_M043,Tbll_M044.Tbli_M045
Tbll_M046,Tbll_M047.Tbll_M048.Tb1 1_M049,Tbll_M050
Tbll M051.Tbll_M052,Tbll_M053,Tbll_M054.Tbl1_M05L
TblllM056.Tbll_M057.Tbl1_M058,Tbll_M059,Tbll_K060

A-250

DW
EM
EM
EM
EM
EM
EM
EM
EM
EM
EM
EM
EM
DW

Tbll_M061,TbU_M062.TbU_K063.Tbll_H064,Toll_M065
Tbl1_K066,Tbl1_M067,Tbli_M068,Tbll_M069,Tbll_M070
Tbll_K071 Tbll_M072,Tbll_M073,Tbll_M074,Tbll_M075
Tbl 1_M076, TbU_J4077 , Tbll_H078, Tbll_M079. Tbll„M080
Tbll_M081,Tbll_M082,Tbll_M083.Tbll_M084.Tbll_M085
Tbll_M086,Tbll M087,Tb: _M088,Tbll_MOE>,Tbll_M090
Tbll M091,Tbll_M092,Tbll_M093,Tbll_M094,Tbll_M095
TblllM096,TbllJ1097,Tbll_M098.Tbll_J4099
Tbll_M100,Tbll_M101.Tbll_M102,TbU_M103,Tbll_M104
Tbl 1_M105, Tbl 1_M106. Tbll_M107, Tbll_*108, Tbl 1_M109
Tbll_miO,Tbll_mU.Tbll_M112.Tbll_X113.Tbll_M114
Tbll_M115,Tbll_M116,Tbll_M117,Tbll_M118.Tbll_M119
Tbll_M120,Tbl1_M121,Tbll_M122,Tbll_M123,Tbll_M124
Tbll_M125,'oll_M126,Tbll_M127

;
Motor_grp2:
EM
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

Tbl2_M128
Tbl2_M129, Tbl2_M130, Tbl2_K131. Tbl2_M132, "bl2_K133
Tbl2_M138
Tbl2_M134, Tbl2_M135, Tbl2_K136, Tbl2_M137,
Tbl2_M139. Tbl2_M140, Tbl2_M141, Tbl2_H142, Tbl2_M143
Tbl2_M148
Tbl2_M144, Tbl2_M145, Tbl2_H146, Tbl2_M147,
Tbl2_M153
Tbl2_M149, Tbl2_M150. Tbl2_M151, Tbl2_M152,
Tbl2_M158
Tbl2_M154. Tbl2_K155, Tbl2_M156, Tb’2_M157,
Tbl2_Ml63
Tbl2_M159, Tbl2_M160, Tbl2_M161, Tbl2_M162.
Tbl2_H168
Tbl2_M164. Tbl2_M165, Tbl2_M166.,T1-12_M167
, Tbl2_K173
Tfc
M169, Tbl2_M170, Tbl2_M171,, Tbl2_M172
,Tbl2_M178
Tbl-_H174, Tbl2_M175, Tbl2_K176.. Tbl2_M177
,Tbl2_M183
Tbl2_M179, Tbl2_H180. Tbl2_M181,, Tbl2_M182
, Tbl2_M188
Tbl2_M184,,Tbl2_H185. Tbl2_H186,, Tbl2_H187
,Tbl2_l.*93
TbI2_.M189,, Tbl2_M190, Tbl2_M191 , Tbl2_M192
,Tbl2_H198
Tbl2_M194., Tbl2_H195, Tbl2_H196 , Tbl2_M197
,Tbl2_K203
Tbl2_M199,, Tbl2_M200, Tbl2_M201 , Tbl2_M202
, Tbl2_M20’8
Tbl2_M204,, Tbl2_M205, Tbl2_M206 , Tbl2_H207
,Tbl2_M213
Tbl2_H209.,Tbl2_K210, Tbl2_H211 , Tbl2_M212
.Tbl2_M21B
Tbl2_K214 ,Tbl2_M215, Tbl2_H216 ,Tbl2_K217
,Tbl2_*223
Tbl2_M219 , Tbl2_M220 Tbl2_M221 , Tbl2_M222
,Tbl2_M227 ,Tbl-_M228
Tbl2_M224 ,Tbl2_M225 ,Tbl2_M226
.Tbl2_M2‘»3
Tbl2_M229 , Tbl2_M230 , Tbl2_M2 31 ,Tbl2_M232
,Tbl2_M237 ,Tbl2_M2Tbl2_M234 , Tbl2_M2 3 5 ,Tbl2_M236
,Tbl2_M243
Tbl2_M239 ,Tbl2_M240 ,Tbl2_H241 ,Tbl2_M242
,Tbl2_M248
Tbl2_M244 , Tbl2_M245 ,Tbl2_M246 ,Tbl2_M247
,Tbl2_M253
Tbl2_M249 ,Tbl2_M250 ,Tbl2_M251 ,Tbl2_M252
Tbl2_H254 ,Tbl2_M255

;
Motor_grp3:
EM
DW
DW
DW
DW
DW
EM
DW
DW
DW
DW
DW

Tblj_M256
Tbl3_M257, Tbl3„K2S8., Tbl3_M259
Tbl3_M262, Tbl3_M263 , Tbl3_M264
Tbl3_M267, Tbl3_M268 ,Tbl3_M269
Tbl3_M272. Tbl3_M273 , Tbl3_K274
Tbl3_M277, Tbl3_H278 , Tbl3_M279
Tbl3_H282, Tbl3_M233 , Tbl3_M284
Tbl3_M287, Tbl3_M288 , Tbl3_M289
Tbl3_M292, Tbl3_M293 .Tbl3_H294

Tbl3_M260
Tbl3_M265
Tbl3_H270
Tbl3_M275

, Tbl3_M261
, Tbl3_M266
, Tbl3_M271
, Tbl3_M276

Tbl3_M280 , Tbl3_M281
7-)13_M285 ,Tbl3_M286
,Tbl3_M290 ,Tbl3_M291
,Tbl3_M295 ,Tbl3_M296
, Tbl3_H301
Tbl3_M297, Tbl3_M298 , Tbl3_M299 , Tbl3_M300
, Tbl3_M306
,
Tbl3_M305
,Tbl3_M304
Tbl3_M303
Tb.l3_K302,
,Tbl3_M311
Tbl3_M307, Tbl3_M308 , Tbl3_M309 , Tbl3_M310

A-251

DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW
DW

Motor_grp4:
DW
DW
DW
DW
DW
DW

Tbl3_M312,Tbl3_M313,Tbl3_M314,Tbl3_M315.Tbl3_M316
Tbl3_M317,Tbl3_M318,Tbl3_M319. Tbl3_M320,Tbl3_M321
Tbl3_M322,Tbl3_M323.Tbl3_H324,Tbl3_M325,Tbl3_M326
Tbl3_M327,Tbl3_M328.Tbl3_«329. Tbl3_M330,Tbl3_M331
Tbl3_M332,Tbl3_M333.Tbl3_M334,Tbl3_M335,Tbl3_M336
Tbl3_M337,Tbl3_M338,Tbl3_M339,Tbl3_M340,Tbl3_M341
Tbl3_M342.Tbl3_K343,Tbl3_M344,Tbl3_M345.Tbl3_M346
Tbl3_M347,Tbl3_M348,Tbl3_M349.Tbl3_M350.Tbl3_M351
Tbl3_M352 ,Tbl3_J4353,Tbl3_M354,Tbl3_M355,Tbl3_M356
Tbl3_M3 57,Tbl3_M3 5 8,Tbl3_M 3 S 9.Tbl3_K3 6 0,Tbl3 J<3 61
Tbl3_M362.Tbl3_M363.Tbl3_M364,Tbl3_M365,Tbl3_M366
Tbl3_M367,Tbl3_M368.Tbl3_M369.Tbl3_M370,Tbl3_M371
Tbl3_M372,Tbl3_M373,Tbl3_M374,Tbl3_M375,Tbl3_M376
Tbl3_M377,Tbl3_M378,Tbl3_H379,Tbl3_M380,Tbl3_M381
Tbl3_M382,Tbl3_H383

Tbl4_M384
Tbl4_>1385, Tbl4_M386, Tbl4_M387 , Tbl4_M388, Tbl4_M389
Tbl4_M390.Tbl4_M391.Tbl4_M392,Tbl4_M393,Tbl4_M394
Tbl4_M395,Tbl4_M396.Tbl4_H397.Tbl4_M398.Tbl4_M399
Tbl4_M400,Tbl4_M401.Tbl4_M402,Tbl4_H403,Tbl4_M404
Tbl4_M405,Tbl4_M406.Tbl4_M407,Tbl4_M408,Tbl4_M409

DW
DW

Tbl4_M410,Tbl4_M411,Tbl4_M412.Tbl4_M413,Tbl4_M414
Tbl4_K415,Tbl4_M416.Tbl4_M417.Tbl4_M418,Tbl4_M419

DW
DW
DW

Tbl4_K420,Tbl4_M421.Tbl4_M422,Tbl4_M423.Tbi4_M424
Tbl4_K425,Tbl4_H426.Tbl4_H427,Tbl4_M428 Tbl4_M429
Tbl4_M430,Tbl4_M431.Tbl4_M432,Tbl4_M433,Tbl4_M434

DW
DW
DW
DW
DW
D/1

Tbl4_M435,Tbl4_M436,Tbl4_M437,Tbl4_M438,Tbl4_M439
Tbl4_M440,Tbl4_K441,Tbl4_M442,Tbl4_M443,Tbl4_M444
Tbl4_M445,Tbl4_M446.Tbl4_M447,Tbl4_M448.Tbl4_M449
Tbl4_M450, Tbl4_K151, Tbl4_M452, Tbl4_M453, Tbl4_M45.4
Tbl4_H455,Tbl4_M456,Tbl4_M457,Tbl4_M458,Tbl4_M459
Tbl4_M460.Tbl4_H461,Tbl4_M462.Tbl4_M463,Tbl4_M464

DW

Tbl4_M465.Tbl4 M466,Tbl4_M467,Tbl4_M468.Tbl4_H469

DW
DW
DW
DW

Tbl4_H470,Tbl4_M471,Tbl4_M472.Tbl4_H473,Tbl4_K474
Tbl4_M475,Tbl4_M476,Tbl4_M477.Tbl4_M478.Tbl4_M479
Tbl4_M480.Tbl4_M481.Tbl4_M482.Tbl4_M483.Tbl4_M484
Tbl4_H435,Tbl4_M486,Tbl4_M487,Tbl4_M488,Tbl4_H489

DW
DW
DW
DW

Tbl4_M490,Tbl4_M491.Tbl4_M492.Tbl4_M493.Tbl4_M494
Tbl4_H495, Tbl4_M496, Tbl4_H497 , Tbl4__M498, Tbl4_M499
Tbl4_M500,Tbl4_M501.Tbl4_M502.Tbl4_M503,Tbl4_M504
Tbl4_M505.Tbl4 J4506.Tbl4_M507,Tbl4_M508.Tbl4_M509

DW

Tbl4_M510,Tbl4_M511

!
. «

; ’

; Each motor table has the following format:
; The first line is the delay between motor steps.
; The next group of lines are the motor steps.
; The last line is the terminator consnand.
;
1

Delay table - a number from 0 - 255. THe entry is multiplied by
a 2.9 mSec timer. Therefore l=2.9mSec 2=5.8msec 255=739mSec.

;
;

The motor step is entered as a decimal number of 10-190.
'00' is a PAUSE command base on the motor delay setting.

;

'FF'

or

'255'

is the end of table coamand.

•TABLES WITH ENDING STEP NOT WITHIN REQUIRED RANGE(10-20),(132.136)
jM94,M127,M131,M139,M140,M143,M146
•WITH DUPLICATE STEPS PUT CONSECUTIVELY
!m187,M193,M219.M220,M229,M237,M241,M242
;M250,M310,M321,M369
Tbll_M000:
DB
DB
DB

50

jmotor delay between steps

10,135
FFH
; end

jGEORGE 07/03/96
Tbll_H001:
1
DB
190,133
DB
DB

jdON START
SEQ1 AGE1
jmotor delay between steps

FFH
;dON START

SEQ2 AGE1

Tbll_M002:
DB
DB
DB

1
jmotor delay between steps
150,145,138,120,145.133,147,133

Tbl1_M003:
DB
DB

10
jmotor delay between steps
90,100,0,0,0,100,0,0,0,0,133
jCONNECTED M23 ;dON START

SEQ3 AGE1
j
DB
DB

FFH

Tbll_M004:
DB
DB
SEQ3 AGE1
DB
Tbll_M00S:
DB
DB
DB
Tbll_M006:
DB
DB
DB
Tbll_M007:
DB
DB
DB
Tbll_M008:
DB
DB

FFH

;end

145,160,0,0,0,160
jend

1
jmotor delay between steps
200,190,160,100,133
jCONNECTED M22 jaON START
FFH

; end

5
jmotor delay between steps
170,130,90,100,133
j DONE conected m22 seq4 agel
FFH

j end

10
jmotor delay between steps
150.200,0,0,150,133
jseq5 frontl agel
FFH

;end

1
120,150,133
FFH

jmotor delay between steps
jSEQ6 FRONT1 AGE1 HORSE LAUGH

jend

10
jmotor delay between steps
150,200.150,170,133
,-SEQ7 FRONT AGE1

DB

FFH

; end

;
Tbll_M009:
DB
DB
DB
Tbll_M010:
DB
DB
DB
Tbll_M011:
DB
DB
DB
Tbll_M012:
DB
DB
DB

10
.-motor delay between steps
150,200.150,190,170,120,133
;SEQ8,FRONT AOE1
FFH

;end

1
180,100,133
FFH

.-motor delay between steps
;SEQ9,FRONT AGE1

;end

1
,-motor delay between steps
80,0,1^0,0,125,0,0,133
;SEQ10,FRONT AGE1
FFH

; end

10
.-motor delay between steps
125,0,0,0,0.0,0,0,0,133.80,133
;SEQ11,FRONT AGE1
FFH

; end

Tbll_M013:
DB
DB
DB

20
,-motor delay between steps
145.133.145,133,145,133,145
125,0.0,0,0,0,130,0.0,90,133
;seql2 FRONT AGE1 ADD

SAY20 TO FRONT
DB

FFH

Tbll_M014:
DB

10

,-motor delay between

DB

90,130,120,0.0.133

;seq!3 FRONT AGE1 ADD

DB

FFH

,- end

steps
SAY 22

Tbll_M015:
DB

;end

10

;motor delay between

DB

125.110.133

;seql4 FRONT AGE1 ADD

DB

FFH

steps
SAY22

Tbll_M016:
DB
DB
DB

;end

1
,-motor delay between steps
160,0,0,133,125,150,133
;seql5 FRONT AGE1
FFH

;end

Tbll_M017:
DB
DB

10
,-motor delay between steps
120,133,125,150,120,0,0,0.0,0,0.0,0,133

AGE1 ADD 37
DB

FFH

Tbl1_M018:
DB
DB

1
,-motor delay between steps
124.0,115,0,133,120,133

AGE1 ADD 37
DB

FFH

,-seql6 FRONT

;end

;seql6 FRONT

; end

A-254

Tbll_M019:
DB
,
DB
DB
DB

;motor delay between steps
10
90,100,0,0,0,100,0,0,0,0,133
;SEQ1 FRONT AGE2
175,160,0,0,u,160,0,0,0,0,133
FFH

;end

Tbll_M020:
DB
DB
DB

,-motor delay between steps
10
143,150,133,155,133
jSEQ2 fRONT AGE2
FFH

;end

1

Tbll_M021:
DB
DB
:
DB
DB
Tbll_M022:
DB
DB
DB
Tbll_M023:
DB
DB
DB
Tbll_M024:
DB
;
DB
DB
Tbll_M025:
DB
DB
DB
DB
Tbll_M026:
DB
DB
DB

,-motor delay between steps
1
180,133,180,133
;SEQ3AGE2 FRONT ADD SEQ9AGE1
100,70,10,133
FFH

;end

10
140,150,133
FFH
;end

,-motor delay between steps
;SEQ4 AGE2 FRONT

;motor delay between steps
1
;SEQ4 AGE2
120,133,0,0,0,0 ,0,0,0,140,150.133
FFH

;end

,-motor delay between steps
;SEQ5 AGE2 FRONT
150,140,138,120.145.133,0.147,133
5

FFH

; end

,-motor delay between steps
1
150,200,0,0,150 ,133.143,133,143
;SEQ6 AGE2 FRONT
133,110,133
FFH

,-end

;motor delay between steps
;SEQ 7 AGE2 FRONT PARTI

10
142,150,133
FFH

;end

i

Tbll_J!027:
DB

jSEQ 7 AGE2 FRONT PART2
150,145,160,133.145,133,145,133

DB
DB
; danger always
Tbll_M028:
DB
DB
DB
Tbll_M029:
DB
DB
DB

,-motor delay between steps

1

FFH

;end

followed by 0031: dmh

30,70 ,-<- OK

;motor delay between steps
;SEQ8 MIDDLE OF 22,AND 4SOMETHING

FFH

1

1
;end

,-motor delay between steps

1
190,133
FFH

;SEQ 9 TITTER
;end

A-255

I
Tbll_M030:
DB
DB
DB

;motor delay between steps
1
120,133,140,150.,133
; SEQ10 FRONT AGE2
FFH
;end

Tbll_M031:
DB
DB
AGE 2
ADD 41
DB

FFH

Tbll_M032:
DB
DB
DB

;motor delay between steps
10
145,133,145,133,145,133,0,120,115,133
;SEQ12 FRONT AGE 2 ADD 20
FFH

Tbll_M033i
DB
DB
FRONT
DB
Tbll_M034:
DB
DB
DB
Tbll_M035:
DB
DB
DB
ADD 20
DB
Tbll_M036:
DB
DB
DB

5
;motor delay between steps
180,160,133,115 ,105,133
;SEQ11 FRONT
;end

;motor delay between steps
1
150,170,190,133 ,120,133,135,133.150,0,0,133
FFH

;SEQ14

;end

.•motor delay between steps
10
125,0,0,0,0,0,133,145,133
;SEQ15 FRONT AGE2 ADD 20
FFH

;end

.-motor delay between steps
1
120,0,0,0,0,0,0 .0,133,145
133,0,150,133,110,133,120.0,0,133
[SEQ16 FRONT AGE2
FFH

;end

1
155,0,0,0.133
FFH
;end

.•motor delay between steps
[SEQ1 FRONT AGE3

Tbl1_M037:
DB
DB
DB
Tbll_M038:
DB
DB
DB
Tbll_M039:
DB
DB
DB
; ERROR
;Tbll_M040:

[motor delay between steps
1
140.150,133,120,133,110.133
[SEQ2 FRONT AGE3
FFH

;end

.•motor delay between steps
1
155,0,0,0,133,155,0,0,0,133
;SEQ3 FRONT AGE3
FFH

send

1
190,0,0,133
FFH
iend

DB
;
DB
SEQ14AGE1

10
140,150,133

;

FFH

1

DB

,-motor delay between steps
[SEQ4 FRONT AGE3

[motor delay between steps
ISEQ5 FRONT AGE3 ADD

;end

A-2S6

;
Tbll_M040:
DB
DB
DB
DB
Tbll_M041:
DB
DB
DB
DB
Tbll_M042:
DB
DB
;
DB
DB

10

,-motor delay between steps

150,200,0,0,150,133,143,133
143,133.110.0,0,133
FFH

;SEQ6 FRONT AGE3

;end

1
;motor delay between steps
160,140,0,150,133,160,140,133
150,160,133
;SEQ7 FRONT AGE3
FFH

;end

1

,-motor delay between steps

30,70,120
;SEQ?
160,140,0,150,133,160,140.133
FFH

;end

J
TblX_M043:
DB
DB
DB

10
;motor delay between steps
80,0,150,0.125,0,0.133
;SEQ10 FRONT AGE3
FFH

;end

Tbll_M044:
DB
DB
DB

FFH

Tbl1_M045:
DB
DB

10
,-motor delay between steps
150,0,0,133,120.100,133
;SEQ12 FRONT AGE3

1

(HEEY,TICKLE HE) ADD20
DB
FFH
Tbll_M046:
DB
DB
(NANNY,NANNY1
DB
Tbll_M047:
DB
DB
HE HE )

ADD20
DB

Tbll_M043:
DB
DB
DB
Tbll_M049:
DB
DB
DB
Tbll_M050:
DB
DB

,-motor delay between steps

100,133,120,133

,-SEQll

; end

DB

4

.-end

10
,-motor delay between steps
145,133,145,133,145,133
.-SEQ13 £RONT AGE3
ADD20
FFH

,- end

1
,-motor delay between steps
125,0,130,0.0,90.133
.-SEQ13 fRONT AGE3
FFH

;end

1

,-motor delay between steps

200,0.0,133
FFH

;SEQ16 FRONT AGE3

;end

1

,-motor delay between steps

120.110,133,115,133
FFH

(RASBERKY,

;SEQ16

;end

10
140,150,133

,-motor delay between steps
,-

SEQ2

(TICKLE)

FRONT AGE4

HE

DB

FFH

Tbll_M051:
DB
DB
DB

FFH

Tbll_M052:
DB
DB
DB

1
120,133
FFH

)
Tbll_M053:
DB
DB
DB

10
160,133
FFH

Tbll_M054:
DB
DB
DB
Tbl1_M055:
DB
DB
ADD26
DB
Tbll_M056:
DB
DB
AGE4 ADD26
DB

; end

10
125.100,133
;end

,-motor delay between steps
;SEQ3 (YOU) FRONT AGE4
,- end

,-motor delay between steps
;SEQ3 (ME) FRONT AGE4
,- end

,-motor delay between steps
;SEQ4 (LOVE) FRONT AGE4 ADD45 74 71 20

20
150,133
FFH

,-motor delay between steps
; SEQ2 (AGAIN) FRONT AGE4

,- end

.-motor delay between steps
10
;SEQ5 (HE HE HE)
135,133,150 n, 0.133
FFH

FRONT AGE4

;end

.-motor delay between steps
10
;SEQ5 (BIG FUN!
154,133, 115.0. 0.0,0.0,0.133
FFH

Tbl1_H057:
DB
DB
DB

10
120,133
FFH

Tbll_M058:
DB
DB
DB

1
100,133
FFH

; end

,-motor delay between steps
;SEQ8 (NO) FRONT AGE4
; end

,-motor delay between steps
,-SEQ8 (FLEASE) FRONT AGE4
; end

Tbl1_M059:
DB
DB
DB

FFH

Tbll_M060:
DB
DB
DB

1
120.100,133
FFH
;end

Tbll_M061i
DB
DB

10
143,150,170.133

,-motor delay between steps
.-SEQ9 (HEEY) FRONT AGE4 ADD71

10
150,0,0,0,133

DB
FFH
,-END GEORGE 07/03/98

FRONT

;end

,-motor delay between steps
;SEQ14 (PARTY) AGE4 ADD45

.-motor delay between steps
;SEQ15 (WA WA WA) FRONT AGE4 ADD22

; end

-4-258

; (BOTTOM)
;GEORGE 07/04/98
Tbll_M062:
DB
20
DB
150,0,0,0,133
,-end
DB
FFH
Tbll_M063:
DB
DB
DB

DB
FFH

Tbll_M065:
DB
DB
DB
Tbl1_M066:
DB
DB
DB

DB

FFH

followed by 68:

.

-

between steps
(VERY. BIG)

,-motor delay between steps
.-FORTUNE TELL

(SEE!

dmh

10
30,10,30,10.30,10.70
; end
FFH

Tbll_M069:
DB
DB
DB

1
150,133
FFH
; end

1
100,133,150,133,150.133
1

.•motor delay between steps
;<- OK
; FORTUNE WHINE STAI

.•motor delay between steps
.-FORTUNE WHINE START

end

.-motor delay between steps
.-FORTUNE TELL (NO)

;motor delay between steps
.-FORTUNE TELL (WORRY)

FFH

1
125,100,133
rend

;motor delay between steps
.-FORTUNE (SOUND)

FFH

10
110,120,133
; end

1
150,133

;motor delay between steps

Tbll_M072:
DB
DB
DB

.•motor .
; FORTUI

(BIG)

;end

FFH

Tbll_M071:
DB
DB
DB

.•FORTUNE TELL

1
120.0,0.0.0,0.0,0,0,133

Tbll_M068:
DB
DB
DB

Tbl1 M070:
DB
DB
DB

.•motor delay between steps

1
150,0,0,0,133
; end

10
190,150,0,0,133
FFH
;end

; danger always
Tbl1_M067:
DB
DB

,-motor delay between steps
.•FORTUNE ASK

1
150,0,0,133
FFH
;end

Tbl1_M064:
DB
DB

.•motor delay between steps
.•FORTUNE ASK

FFH

,- end

.-FORTUNE

(GOOD)

Tbll_M073:
DB
DB
DB

1

Tbll_M074:
DB
DB

1
145,133,150,0,0,

DB

FFH

Tbll_M075:
DB
DB
DB

.•motor delay between steps
,0,0,133
;FORTUNE (WHOOPEE)

; end

;c.otor delay between steps
.-FORTUNE (GOOD)

1
115,133
FFH

Tbll_M076:
DB
DB
DB

;motor delay between steps
.•FORTUNE TELL (VERY)

150,0,133
FFH
; end

;end

1
120,0,0,0,0,133
FFH
;end

.•motor delay between steps
.•FORTUNE (RASPBERRY)

1
150,115,133
FFH
;end

.-motor delay between steps
.-FORTUNE (OH OH)

1
150,115,133
FFH

.-motor delay between steps
.-FORTUNE (HAY BEE)

Tbl1_M077:
DB
DB
DB
Tbl1_M07 8:
DB
DB
DB

end

END GEORGE 07/04/98
START HANGOUT
GEORGE 07/04.98
Tbll_M079:
DB
150,133,135,150,133
DB
DUM DUM) AGE1
DB
FFH
;end
Tbll_M080:
DB
DB

;motcr delay between steps
;SEQ1 HANGING(DE DE DE ,DUM

DUM

.•motor delay between steps
;SEQ1 HANGING(DUM
DUM DUM DUM)

190,133

AGE1
FFH

DB

; end

Tbl1_M081:
;motor delay between steps

DB
DB
DB
DB
Tbll_M082:
DB
DB
;
DB
DB
Tbll_M083:
DB

FFH

120,100,133
120,100,133
;end

,-SEOl HANGING

(bEEDO)

,-motor delay between steps
143,150,170,0,0,0,0
120,100,160.133
FFH
;end

190

;-13 3
,-SEQl HANGING

;mot

(YA DA DA

1

-’lay between steps

A-260

DB
DB

190,120,133
150,133,150,133

DB

FFH

; SEQ3 HANGING

(

OMPAH

bRUMH

BABABUM)

Tbll_M084:
DB
DB
DB

10
125,120,125,115,133
FFH

Tbll_M085:
DB
DB
DB
Tbll_M086:
DB
DB
DB

smotor delay between steps
jSE03 HANGING (bRUMM BABABUM)

;end

1
115,125,110,
FFH

DB

,-end

25,100,133

,-motor delay between steps
;SE04 HANGING (LA LA)

,• end

1
jmotor delay between steps
120,130,115
;SEQ4 HANGING (LA LA)
100,125,115.125,115,125,115,125,115,133
FFH

;end

Tbll_M087:
1
120,0,0,0,0.0,0,0,133

DB
DB

,-motor delay between steps
;SEQ5 HANGING ,HUMM BO DAH WAY-

LOH)
DB

FFH

; end

;Tbll_M088:
;
;

DB
DB

10
115,133,139,155,160,133

LOH)
;

DB

FFH

Tbll_M088:
DB
;DB

,-motor delay between steps
;SEQ5 HANGING (HUM!-) BC DAH KAY-

.-end

10
,-motor delay between steps
115.133,139.155,160,133 ; SEQ5 HANGING (HUMM BO DAH WAY

LOH)
DB

115,133,160,133

DB

FFH

Tbll_M089:
DB
DB
DB

.-SEQ5 HANGING

60
190,170,150,133,0,0,
FFH

(HUMM BO DAH WAY-LOH)

;end

;motor delay between steps
,0,0,0
;SEQ6 HANGING (SNORE)

,- end

Tbll_M090:
DB
DB
DB

10
150,133
FFH

.-motor delay between steps
;SEQ6 HANGING (SHOUT)

,- end

Tbll_M091:
DB
DB
DB

1
143,150,140,0.150,0,
FFH

Tbll_M092 s
DB
DB
DB

;end

5
110,133
FFH

,-motor delay between steps
,133
; SEQ6 HANGING (OK KAHI

,-motor delay between steps
,- SEQ6 HANGING (U-TYE)

;end

A-261

Tbll_M093:
DB
DB
DB

60
FFH

;motor delay between steps
;SEQ7 HANGING (SOFTER)

190,180,170,150,133
; end

,- danger sleep
Tbll_M094s
DB
DB
DB
Tbll_M095:
DB
DB
DB
Tbll_M096:
DB
DB
DB

50
FFH

.-motor delay between steps
;SEQ7 HANGING (SOFTER)

190,170,150,10
,-end

20
145,133,115,0.133
FFH
; end

1
FFH

,-motor delay between steps
.-SEQ8 HANGING ADD 76

,-motor delay between steps
;SEQ9 HANGING (DO BE DOBE DO

150,115,150,133
;end

Tbll_H097:
DB
DB

46

,-motor delay between steps
170,0.0,0,200,150,0.0, 150.0,133
,-SEQ10 HANGING

(YAWN)
DB

FFH

; end

Tbll_M098:
DB
DB
DB

25?
150,133
FFH
;end

Tbl1_M099:
DB
DB
DB

FFH

1
144,133
; end

Tbl1_M100:
DB
DB
DB

10
104,0,0,0,133
FFH
; end

Tbll_K101:
DB
DB
DB

,-motor delay between steps
.-SEQ13 SEQ14 HANGING (HA)

,-motor delay between steps

20
FFH

100,133,0,0,0.100,133
;end

•anger. USED IN ONE CASE,
Tbll_M102:
DB
10
DB
0
DB
FFH
,-end
Tbll_M103:
DB
DB
DB

,-motor delay between steps
;SEQ11 AND SEQ12 HANGING (SH

FFH

1
114,133
; end

HANGING OUT,

.-motor delay between steps
;SEQ16

FOLLOWED BY 101
,-motor delay between steps
;SEQ16 HANGING (PAUSE) ADD20

,-motor delay between steps
;SEQ6 HANGING (UP)

Tbll_M104:
DB

1

,-motor delay between ste^s

A-262

DB
DB

FFH

120,133
;end

SEQ6 HANGING

(ME)

Tbll_MJ05:
DB
DB

1

;motor da.ay between steps
;UP

120,133
FFH
;end

DB
t
Tbll_M106:

10

DB
DB
DB

FFH

.■motor delay between steps
;SEQ5 BORING

125,104,133
;end

END HANGOUT

; danger, OK PAUSE FOR FORTUNE TELLING
Tbll_M107:
DB
DB

1
"

;motor delay between steps

DB
r'H
;END GEORGE 07/04/98
; FEED
;GEORGE 07/05/98
Tbll_M108:
DB

;end

; Fortune pause

10

DB
DB
DB
DB

/motor delay between steps
115,0,0,0,0,0.0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,C,0,0,0,0,0.0
133 ,-SEQl FEED AGE1 (UUMMMMM)
FFH
; end

Tbll_M109:
DB
DB

S

1

;motor delay between steps
140

DB
165,0.0,0,0.0.0,150.0,0,165,0,0.0,0,0.0.133
FEED AGE1 (AAAAH)
DB
FFH
,• end

;
TbllJUlO:
DB
DB
DB

1
/motor delay between steps
120,130,110,133
;SEQ2 FEED AGE1 (KOHKOH)
FFH
j end

Tbl1_M111:
DB
DB
DB

FFH

1
;motor delay between steps
120,130,120,133 /ME ME
;end

;
Tbll_M112:
DB
DB
DB

1
;motor delay between steps
145,133,150,133
;E-DAY
FFH
end

;
Tbll_M113i
DB
DB
DB
Tbll_M114i

1

;motor delay between steps
115,130,110,133
;DO MOH
FFH
;end

;SE5

DB
DB
DB

1
;motor delay between steps
115,130,120,133
;TOH DYE
FFH
;end

Tbll_M115:
10

DB
DB
DB
Tbll_M116:
DB
DB
DB

110,133
FFH
;end

.•motor delay between steps
; BURP

;mo or delay between steps
.-SIGH

1
145,133
FFH
;end

?bll_M117:
DB
DB
DB

10
150
FFH

;:..otor delay between steps
133
;end

Tbll_M118:
DB
DB
DB

10
;motor delay between steps
120.0,0,0,133
FFH
; end

Tbll_M119:
DB
DB
DB

.•motor delay between steps
1
120,130,110,133 ;TOH LOO
FFH
;end

Tbll_M120:
DB
DB
DB

FFH

Tbll_M121:
DB
DB
DB
Tbl1_M122 s
DB
DB
DB
Tbl1_M123:
DB
DB
DB

.•motor delay between steps
1
120,133,120,133
; end

.motor delay between steps
1
145.130,120.133
;HUNGRY
FFH
; end

FFH

1
150,133
; end

.•motor delay between steps
.•LIKE

1
150,0,0,133
FFH

,-motor delay between steps
;seq4 feed done
; end

;END FEED
;END GEORGE 07/05 98
•
»
•

;WAKE
;GEORGE 07/06/98
Tbll_M124:
DB
255
DB
95,133
DB
;

jSG DONE
;motor delay between steps

FFh

danger

A-264

Tbll_M125i

;SG DONE

DB
DB
DB
Tbll_H126:
DB
DB
DB
Tbll_M127:
DB
DB
DB
,- danger
Tbl2_M128:

1
75,90
Fph

135,120,135
FFh

80.133
FFh
; SG DONE

Tbl2_M133:
DB
DB
DB
,- danger
Tbl2_M134i
DB
DB
DB

1
75,90
FFh

.-motor del^y between steps
; <-OK

1
90,110,133
90,110,70

,-motor delay between steps

,-SG DONE

; DB

Tbl2_M131:
DB
DB
DB
Tbl2_H132:
DB
DB
DB

; SG DONE
.•motor delay between steps

1

Tbl2_M129:
DB
DB

Tbl2_M130:
DB
DB
DB
; danger

FFh
,-SG DONE
1
115.133

,-motor delay between steps

FFh

1
90,70

; SG DONE
.-motor delay between steps

FFh
,-SG DONE
; motor delay between steps

1
95,133
FFh

1
115,133

;SG DONE
;motor delay between steps

FFh

,-SG DONE
1
185

,-motor delay between steps

FFh

; danger
Tbl2_M135 s

,-SG DONE

DB
DB
DB
; danger
Tbl2_H136 s
DB
DB
DB
; danger

;<- OK
jSG DONE
.-motor delay between steps

DB
DB
DB

DB

;motor delay between steps

1
133

,-motor delay between steps

FFh

1
133

;SG DONE
,-motor delay between steps

FFh

A-26S

Tbl2_M137:
DB
DB
,-

DB
danger

; SO DONE
,-motor delay between steps

1
145
FFh

;SG DONE
,-motor delay between steps
1
120,133,120,133,120,133,120,133,120,133,120,133,77,81-

Tbl2_M138:
DB
DB
DB
DB
; danger
Tbl2_M139:
DB
DB
DB
; danger

0,0,70,0,0,0,0, 0.0
FFh

FFh
; SG DONE
,-motor delay between steps
1
120,115,130,1201,70
FFH
;end

Tbl2_M140:
DB
DB
DB
;
danger
Tbl2_M141:
DB
DB
DB
; danger
Tbl2_M142:
DB
DB
DB

I
j danger
Tbl2_M145:
DB
DB
DB
Tbl2_M146:
DB

;danger
Tbl2_M147:
DB

;S
DONE
,-motor delay between steps

1
75
FFH

;end
,-SG DONE
;motor delay between steps

1
90,80,100,75
90,80,100,133
FFH

;end

jSG DONE
,-motor delay between steps

1
120
FFH
;end

;SG DONE
,-motor delay between steps

1
110,75
FFH

;end
,-SG DONE
,-motor delay between steps

1
90,75

; DB
DB
DB

,-SG DONE
,-motcr delay between steps

1
133
FFH
,-end

Tbl2_M143:
DB
; DB
DB
DB
; danger
Tbl2_M144:
DB
DB
DB

;SG DONE
,-motor delay between steps

1
82,70

90,133
FFH

1

;end

;SG DONE
.•motor delay between steps

A-266

DB
DB

70,90,75
FFH

Tbl2_M148s
DB
DB
DB

;end

;SG DONE
.•motor delay between steps
1
120,130, 115,126,115,140,110,0,0,0,0,0,0.0,0.0,133
FFH
;end

; danger
Tbl2_M149:
DB
DB
DB
Tbl2_M150:
DB
DB
DB

FFH

; end

1
146,135
FFH
i end

Tbl2_M151:
DB
DB
DB
; danger
Tbl2_M152:
DB
DB
DB

;SG DONE
;motor delay between steps

1
75

;SG DONE
;motor delay between steps

;SG DONE
;motor delay between steps
1
120,133, 70,0,135
FFH
; end

;SG DONE
;motor delay between steps

1
75
FFH

; end

; danger
Tbl2_M153 :
,-SG DONE
,-motor delay between steps
DB
1
DB
115,75
DB
FFH
; end
; danger sleep
;SG DONE
Tbl2_M154:
.•motor delay between steps
DB
100
DB
0,0,0,85,30 ,0,20,0,85,30 ,0,20,0,85,30,0,20,0,75,0,0,0,0,85
30,0,20, 0,10
DB
FFH
;end
DB
,- danger
Tbl2JM155:
;SG DONE
DB
;motor delay between steps
1
DB
90,70
DB
FFH
jend
; danger
Tbl2_M156:
;SG DONE
DB
;mntor delay between steps
1
DB
115,75
DB
FFH
; end
,- END WAKE
;END GEORGE 07/06/98

;HUNGER
;GEORGE 07/06/98
Tbl2_JH157:

;SG DONE

; HUNGER

A-267

DB

50

;DB
DB

120,120,133
120,0,133

DB

FFH

Tbl2_M158:
DB
FFH

Tbl2_M159:
DB
DB
DB

;SG DONE
.-motor delay between steps

180,133
,- end

1
115,110,133
FFH
;end

Tbl2_M160:
DB
FFH

75,133
;end

Tbl2JM161:
DB
DB
DB

1
115,130,115,1
FFH
;end

Tbl2_M162:
DB
DB
DB

1
115,110,133
FFH . ; end

Tbl2_H163:
DB
DB
DB

50
190,133
FFH
;end

Tbl2_M164:
DB
;DB

50
148.148,133

DB
DB

50
150,150,150,

DB
DB

1
120,133
FFH
;end

DB
DB

Tbl2_M168:

; SG DONE
,-motor delay between steps

;SG DONE
,-motor delay between steps

,-SG DONE
,-motor delay between steps

,-SG DONE
,-motor delay between steps

150,0,0,133
FFH
;end

Tbl2_M167:

DB

,-SG DONE
,-motor delay between steps

148,0,133
FFH
;end

Tbl2_M165:
DB
;DB

Tbl2_Ml66:
DB
DB
DB

;SG DONE
,-motor delay between steps

;SG DONE
,-motor delay between steps

1

DB
DB

,- end

1

DB
DB

.•motor delay between steps

1
115,133
FFH

,-SG DONE
,-motor delay between steps

,-SG DONE
,-motor delay between steps

;end
;SG DONE

DB
DB
DB

1
115,133

.-motor delay between steps

FFh

;END GEORGE 07/06/98
,-END HUNGER
;INVERT
1 GEORGE 07/07/98
Tbl2_M169!
DB
1
DB
110, 122,
DB
FFH
; end
Tbl2_M170:
DB

10

; DB
DB
DB

;SG DONE
;INVERT
.-motor delay between steps
75,130,117,133

;SG DONE
,-motor delay between steps
165,165,133
165,0,133
FFH
;end

TbI2_M171:
DB
DB
DB

FFH

Tbl2_M172i
DB
DB
DB

1
150,133
FFH
; end

Tbl2_M173:
DB
DB
DB

1
155,190,133
FFH
; end

Tbl2_M174:
DB
DB
DB

FFH

1
145,133
;end

Tbl2_M175:
DB
DB
DB

;SG DONE
1
.-motor delay between steps
150,135,145,133
;end
FFH

Tbl2_M176:
DB
DB
DP
Tbl2_M177:
DB
DB
DB

10
105,133
; end

; SG DONE

1
75,133
FFH
;end

DB

.-motor delay between steps

,-SG DONE
,-motor delay between steps

,-SG DONE
,-motor delay between steps

,-SG DONE
.-motor delay between steps

,-SG DONE
1
,-motor delay between steps
110,133,115,133
FFH
I end
,-SG DONE

Tbl2_M178:
DB
DB

; SG DONE
;motoi delay between steps

1
115,133
;end
FFH

,-motor delay between steps

A-269

Tbl2_M179:

;SG DONE
.-motor delay between steps

DB
DB
DB

FFH

Tbl2_M180:
DB
DB
DB
Tbl2_M181:
DB
DB
DB
Tbl2_M182:
DB
DB
Db

115,133
;end

; SG DONE
1
.-motor delay between steps
110.125,115,133
FFH
;end
;SG DONE
,-motor dt.ay between steps
FFH

150,133
;end
;SG DONE
;motor delay between steps

FFH

115,133
end

Tbl2_M183:
DB
DB
DB

FFH

;SG DONE
1
,-motor delay between steps
115,130,110,133
;end

Tbl2_M184:
DB
DB
DB

1
75.133
FFH
.- end

Tbl2_M185:
DB
; DB
;DB

;SG DONE
1

,-motor delay between steps
150,150,133

DB
DB

150,0,133
FFH
; end

Tbl2_M186:
DB
DB
DB

;SG DONE
1
,-motor delay between steps
115,130,115,133
FFH
;end

Tbl2_M187:
DB
DB
DB

,-SG DONE
;motor delay between steps

;SG DONE
1
,-motor delay between steps
115,130,115,133
FFH
,- end

)

Tbl2_M188:
DB
DB
DB

;SG DONE
1
,-motor delay between steps
145,135,145,133
FFH
;end

Tbl2_M189:
DB

1

DB
DB

FFH

,-SG DONE
,-motor delay between steps

120,105,133
;end

Tbl2_M190:

A-270

DB

1
155,190,133
,- end

,-motor delay between steps

1
155,190,133
FFH
,- end

,-motor delay between steps

DB
DB
Tbl2_M191s
DB
DB
DB

FFH

/_M192:
DB
1
DB
155,190,133
DB
FFH
;end
1 END OEORGE 07/07/98
;END INVERT
;start at 202
Tbl2_M193:
DB
;DB
DB
DB
Tbl2_M194:
DB
DB
DB
Tbl2_M195:
DB
DB
DB
Tbl2_M196:
DB
DB
DB

;SG DONE
,-motor delay between steps

10
FFH

148,133
;end

FFH

,-SG DONE
1
.-motor delay between steps
115,125,115,133
;end
,-SG DONE
100

,-motor delay between steps

145,0,0,133
FFH
jend

Tbl2_M199:
DB

;SG DONE
,-motor delay between steps

10
110,133

DB
DB

;SG DONE
.-motor delay between steps

;SG DONE
1
motor delay between steps
115,125,115,133
FFH
;end

DB
DB

Tbl2_M198:
DB
DB
DB

;BACKSG
;SO DONE
100
,-motor delay between steps
200,200,200,200,133
200,0,0,0,133
FFH
;end

1
75,133
FFH
; end

Tbl2_M197:

DB

,-motor delay between steps

FFH

send

Tbl2_M200i
DB
DB
DB

1
75,133
FFH
,- end

Tbl2_M201:
DB

10

,-SG DONE
,-motor delay between steps

,-SG DONE
;mot

delay between steps

A-271

DB
DB

FFH

Tbl2_M202:
DB
DB
DB
;

115.125,115,133
;end
;SG DONE
.-motor delay between steps

1
75,133
FFH
; end

danger

Tbl2_M203:
DB
DB
DB
Tbl2_M204:
DB
DB
DB
Tbl2_M205:
DB
DB
DB
; danger
Tbl2_M206:
DB
DB
DB
; danger
Tbl2_M207:

FFH

. -J DONE
1
,-motor delay between steps
120,128,79,133, 146,0,0,0,133,145
; end

; SG DONE
;motor delay between step190,0,133
FFH
;end
10

; SG DONE
,-motor delay between steps

1
75
FFH

; end
;S3 DONE
;motor delay between steps

10

DB
DB
DB

FFH

Tbl2_M208:
DB
DB
DB
Tbl2_M209 :
DB
DB
DB
Tbl2_M210:
DB
DB
DB
; danger
Tbl2_M211:
DB
DB
DB
; danger
Tbl2_M212:
DB

150
,-end
;SG DONE
,-motor delay between steps

10
FFH

75,133
,- end

100
150,0,0,0,133
FFH
; end

;SG DONE
,-motor delay between steps

;SG DONE
;motor delay between steps
123,110.75,133,,115.133
FFH
; end
10

,-SG DONE
,-motor delay between steps
S

1
75
FFH

end

1
133

D3
DB

,-SG DONE
;moto: de oy between step

1
115,133
FFH
;end

FFH

,-SG DONE
;motor delay between steps

,- end

1

A-272

Tbl2_M213 :
DB
DB
DB

;SG DONE
.•motor delay between steps

10
115,150.133
FFH
;end

Tbl2_M214:
DB
DB
DB

FFH

; danger
Tbl2_M215:
DB
DB
DB

100
138
FFH
;end

;SG DONE
.-motor delay between steps

1
80,133
;end

;SG DONE
.•motor delay between steps

Tbl2_M216:
DB
DB
DB

;SG DONE
;motor delay between steps

FFH

Tbl2_M217:
DB
DB
DB

;SG DONE
1
.-motor delay between steps
115.130,115,133
FFH
;end

10

Tbl2_M218:
DB
DB
DB

75,133
;end

50
114,133
FFH

;SG DONE
;motor delay between steps
;end

,-SG DONE
Tbl2_M219:
10
;motor delay between steps
DB
;
DB
120,130,120, 130,120.130,120,130.120.130,120.130,115.115.133
DB
120,130,120, 130.120,130.120,130,120.130,120,130,115.0,133
DB
FFH
;end
Tbl2_M220:

;SG DONE
,-motor delay between steps

10

DB

; DB
120.130.120, 130,120,130,120,130,120,130,120.130,115,115.133
DB
120.130.120. 130.120,130.120,130,120,130,120,130,115,0,133
DB
FFH
;end
; SG DONE

Tbl2_M221:
DB
DB
DB
Tbl2_M222:
DB
DB
DB
Tbl2_M223:
DB
DB

10

,-motor delay between steps

145,133
FFH
,-end

50
0,0,0,0,115.133
FFH
;end

1

;SG DONE
,-motor delay between steps

;SG DONE
,-motor delay between steps

115,125,115,133

A-2 73

DB

FFH

Tbl2_M224:
DB
DB
DB

;end
;SG DONE
,-motor delay between steps

FFH

75,133
;end

Tbl2_M225:
DB
DB
DB

FFH

Tbl2_M226:
DB
DB
DB

100
120,133
FFH
; end

Tbl2_M227:
DB
DB
DB

;SG DONE
30
,-motor delay between steps
190,120.125,120,125,120,125,133
FFH
; end

Tbl2_M228:
DB
DB
DB

; SG DONE
1
;mctor delay between steps
115,130.110,130,115,133
FFH
;end

:SG DONE
.•motor delay between steps
110,133
; end
;SG DONE
;motor delay between steps

Tbl2_M229:
DB
; DB
DB
DB

; SG DONE
30
.-motor delay between steps
115,120,110,110,110,133
115,120,110,0,0,133
FFH
;end

Tbl2_H230:
DB
DB
DB

,-SG DONE
1
,-motor delay between steps
110,125.115,133
,-end

FFH

Tbl2_M231:

DB

FFH

Tbl2_M232:
DB
DB
DB
; danger

FFH

FFH

,- danger sleep
Tbl2_M234:
DB
DB

Tbl2_M2 3 5:

110,133
; end
;SG DONE
;motor delay between steps

1

DB

DB

75,133
,- end
;SG DONE
,-motor delay between steps

Tbl2_M233:
DB
DB

,-SG DONE
,-motor delay between steps

1

DB
DB

FFH

145
,- end

,-SG DONE
,-motor delay between steps

10
10
; end

; SG DONE

A-274

10
115,125,110,133
FFH
; end
Tbl2_M236:
DB
DB
DB

10

;SG DONE
;SICK2
100
,-motor delay between steps
133,140,140,150,150,180.133
133,140,0.150,0,180,133
FFH
;end

DB
;DB
DB
T3

Tbl2_M239:
DB
DB
DB

;SG DONE
,-motor delay between steps
FFH

120,110,133
;end
;SG DONE
,-motor delay between steps

FFH

Tbl2_M240:
DB
DB
DB

115,133
;end
,-SG DONE
ii.etor delay between steps
115,0,0,0,0,133

FFH

Tb]2_M241:
DB
,-DB
DB

,- end
; G DONE
-.-..tor delay between steps
124.133,120,133,115,115,0,0.133
124,133,120,133,115,0,0,0,133
1

DB

FFH

Tbl2_M242:
DB
j DB
DB

; end

;SG DONE
50
.-motor delay between steps
115,70,120,120,133
115,70,120,0,133

DB
; danger
Tbl2_M243:
DB
DB
DB

.-motor delay between steps

115,133
FFH
;end

Tbl2_M237:

Tbl2_M238:
DB
DB
DB

;motor delay between steps

FFH

;end

;SG DONE
,-motor delay between steps

50
70
FFH

;end

;
Tbl2_M244:
DB
DB
DB
Tbl2_M245:
DB
DB
DB
Tbl2_M246:
DB

,-SG DONE
,-motor delay between steps

50
120,133
FFH
;end

50
75,133
FFH

,- SG DONE
,-motor

/ between steps

;end
;SG DONE
,-motor delay between steps

A-275

DB
DB
Tbl2_M247:
DB
DB
DB

FFH

70,133
;end

;SG DONE
.-motor delay between steps
110,133,0,0
FFH
;end
l1'

Tbl2_M248:
DB
DB
DB

10
145,0,0,0,133
FFH
;end

Tbl2_M249:
DB
DB
DB

1
115,0,0,0.133
FFH
;end

Tbl2_M250:
DB
; DB

;SG DONE
.-motor delay between steps

;SG DONE
,-motor delay between steps

;SG DONE
10
;motor delay between steps
150,150,150,190,0,133

DB
150,0,0,190,0,133
DB
FFK
;end
;GEORGE 07/08/98
;LIGHT
Tbl2_M251:
DB
DB
DB
Tbl2_M252:
DB
DB
DB
Tbl2_M253:
DB
DB
DB
Tbl2_M254 :
DB
;
DB
DB
DB
Tbl2_M255:
DB
DB
DB
Tbl3_M256:
DB
DB
DB
Tbl3_M257i
DB
DB
DB
Tbl3_M258:
DB
DB

5
,-motor delay between steps SGTEST
115,132,125,110,132
FFh

1
190,133
FFh
1

,-motor delay between steps

,-motor delay between steps
10,152,133,160,0,133

FFh
1

,-motor delay between steps
143,13' .,3,137,150,133,155,133
143,137,143,137,150,0,0,0,133,155,133

FFh
1
,-motor delay between steps
60,90,60,85,90,60,90,133
FFh
10
,-motor delay between st
180,165,165,133

DONE RB

FFh
10

,-motor delay between steps
190,133,105,133,105,160,133 ,-WOW

DONE

FFh
4
;motjr delay between steps
60.133,0,0,0,0,0,155,133,145,133

DONE

A-276

DB
Tbl3_M259:
DB
DB
DB
Tbl3_M260:
DB
DB
DB
Tbl3_M261:
DB
DB
Dh
Tbl3_M262:
DB
DB
DB
Tbl3_M263:
DB
DB
DB
Tbl3_M264:
DB
DB
DB
Tbl3_M265:
DB
DB
DB
;END LIGHT
,-END GEORGE

FFh
1
;motor delay between steps
160,133,180.133,147,160,133

DONE

FFh

1
160,133,90,133

.-motor delay between steps

FFh

7
;motor delay between steps
190,133,100,133
FFh
7
,-motor delay between steps
60,133,140,153,0,0,133,150.133
FFh
1
; MOTOR DELAY BETWEEN STEPS
155,133,160,133,120.110,133
FFh
10
,-motor delay between steps
190,133,0.0,0,0,110,0,0,0.133
FFh
1
,-motor delay between steps
60,133,180,133
FFh
0~/Ot/98

l

; DARK
,-GEORGE 07/08/98
Tbl3_M266:
DB
1
,-motor delay between steps
DB
150,133,160,133,120,112,0,0,0,0,0,0,0,0,133
Dfc
FFh
Tbl3_M26'DB
1
,-motor delay between steps DONE RB
DB
150,133,120,112,0,0,0,0,0,133,149,0,0,133
DB
FFh
;
Tbl3_M268i
DB
10
,-motor delay between steps
DB
150,133,112,133,120,133,148,133,118,0,0,0,133,146,133
DB
147,0,0,0,0,0,0,133
DB
FFH
;end DONE RB
1

Tbl3_J1269i
DB
DB
DB

1
,-motor delay between Bteps DONE RB
10.20.123,115,123,115,123,115,133
FFH
,-end

;
Tbl3_M270i
DB
DB
DB

1
;motor delay between steps
DONE
190,133,120,133,112,0,0,0,0,0,0,130,112,133
FFH
,- end

A-277

;
Tbl3_M271:
DB
DB
DB
DB

1
;motor delay between steps
147,155,139,149
133,149,0,0,0,133
;SEQ6 AGE4/SEQ14 AGE 4 LIGHT js
FFH
; end

;
Tb'1_M272:
DB
DB
DB
DB

1
.-motor delay between steps
150,133,0,0,0,159,133,150.0,0,133
145,137,114,133,117,125,117,133
FFH
,- end DONE

Tbl3_M27 3:
DB
DB
DB
DB
DB

1
,-motor delay between steps
145.155,133,120,115,133.190,133
0,0,0,150,0,0,0,0,0,0,0,0,133
0,0,0,0,0,0,0,0,0.0.115,133
FFH
:end

Tbl3_M274:
DB
DB
DB

1
;motor delay between steps
150,133,150,0,0,0.133.0.0,0.0,120,115,0,0.0.0,0,0.133
FFH
;end

Tbl3„M275:
DB
10
,-motor delay between steps
DB
150,133,0,0,0,150,0,0.0.133,0,120,133,120,133,155,0,0,0.0,133
DB
FFH
;end
Tbl3_M276:
DB
DB
DB
DB

1
;motor delay between steps
190,0,0,0,0,133,0,0,0,0,0,148,133,118,133,0,0,0
146,133,147,0,0,0,0,0,0,133
FFH
; end

Tbl3_M277:
DB
DB
DB

1
,-motor delay between steps
190,133,120,133,112,0,0,0,0,0,0,130.112,133
FFH
;end

Tbl3_M278:
DB
DB
DB

1
,-motor delay between steps
60,133,60,133,146,154,133
FFH
,- end

Tbl3_M279i
DB
DB
DB

1
,-motor delay between steps
190,133,0,0,0,110,0,0,0,0,133
FFH
,- end

Tbl3_M280:
DB
DB
DB

10
,-motor delay between steps
153,133,0,0,0,116,0,0,0,133,190.155,0.0,0,133
FFH
; end

Tbl3_M281i
DB
DB

1
,-motor delay between steps
190,155,0,0,0,133,119,0,0,0,0,0,0,133

A-278

DB
DB

FFH

146,133,147,0,0,0,0,0,0,133
;end

1

Tbl3_M282:
DB
DB
Db

1
,-motor delay between steps
60,133,75,83,78,83,78,133
FFH
;end

Tbl3_M283:
DB
DB
DB

1
,-motor delay between steps
145,155,133,120,115,133,72,0,0,0,0,0,92.133,190.133
FFH
; end

I

Tbl3_M284:
DB
DB
DB

1
,-motor delay between steps
190,133,0,0,0,110,0,0,0,0,133
FFH
,- end

Tbl3_M285:
DB
DB
DB

,-motor delay between steps
150,133,0,0,0,116,0,0,0,133,190,155,0,0,0,133
FFH
,- end

Tbl3_M286:
DB
DB
DB
DB

1
,-motor delay between steps
190,155,0,0,0,133,119,0,0,0,0,0,0,133
147,0,0,0,0,0,0,0,0,0.133
FFH
;end

Tbl3_M287:
DB
DB
DB

1
,-motor delay between steps
190,133,110,0,0,0,0,0,133,112,0,0,0,133
FFH
;end

10

Tbl3_M288i
DB
1
,-motor delay between steps
DB
110,0,0,0,133,115.133.147
DB
133,190,133
,-SEQ7 AGE4/SEQ15 AGE 4 LIGHT js
DB
FFH
; end
;
Tbl3JM289:
DB
1
,-motor delay between steps
DB
145,155,133.0,0,0,0.120,115,133,150,133
DB
160,0,0,0,0,190.0,0.0,0,0,0,0,0,0,133
DB
0,0,0,0,0,0,0,0,0,0,133
;SEQ8 AGE4/SEQ 16 AGE 4
INVERT js
DB
FFH
;end
,-END GEORGE 07/08/98
; END DARK
1

;SOUND
Tbl3_M290:
DB
DB
DB
DB

1
,-motor delay between steps
155,133,0,0,0,0,125
115,145,155,133
;S1-A1/S9-A1/S1-A2 SOUND js
FFH
;end
;S9-A2/S1-A3/S9-A3 SOUND js

Tbl3_M291:
DB
DB

1
100,0,0,0,10

,-motor delay between steps

A-279

DB
DB
DB
DB

0,0,0,0,0,0,0
0,0.0,70,0,0,0,0
0,0,100,0.0,0,133
FFH
; end

;S2-A1/S10-A1/S2-A2 SOUND jo
;S10-A2/S2-A3/S10-A3 SOUND jo
;S2-A4 SOUND js

Tbl3_M292:
DB
DB
DB
DB
DB
DB

1
;motor delay between steps
110,0,0,133,0,0,0,0
0,0,155,0,0,0,0
133,120,0,112.0
148,0,0,0,0,0,133
;S3-A1/S11-A1 SOUND js
FFH
.- end

Tbl3_M293:
DB
DB
DB
DB
DB

15
.-motor delay between steps
110,0,120,0,0,0,0,0
145,0,0,0,155,115
118,0,0,0,0,133
;S4-A1/S12-A1 SOUND js
FFH
;end

Tbl3_M294:
DB
DB
DB
DB

1
115,0,0,0,148
115,0,0,133
FFH
; end

Tbl3_M295:
DB
DB
DB
DB

1
,-motor delay between steps
155,133,122,0
;S6-A1/S14-?1/S6-A2 SOUND js
115,145,120,0,0,133
;S14-A2/S6-A3/S14-A3 SOUND js
FFH
; end

Tbl3_M296:
DB
DB
DB
DB
DB

1
14
150
125,115
0,0,0,0,133
FFH
;end

;motor delay between steps
;S5-A1/S13-A1 LIGHT (with say/m2)

js

.-motor delay between steps

;S7-A1/S15-A1 SOUND (with say/m2) js

Tbl3_M297:
DB
DB
DB
DB
DB
;
Tbl3_M298:
DB
DB
DB
DB
DB
DB

1
,-motor delay between steps
110,0,0,133,0,0,0,0
0,0,155,0,0,0,0
133,120,0,112,0
148,0,0,0,0,0,133
.-S3-A2/S11-A2 SOUND js
FFH
;end

Tbl3_M299:
DB
DB
DB
DB
DB

1
,-motor delay between steps
110,0,120,0,0,0,0,0
145,0,0,0,155,190
0,0,0,0,0,0,160,0,133
;S4-A2/S12-A2 SOUND js
FFH
,-end

1
,-motor delay between steps
115,0,0,148,0,0,0,0
138,0,0,0,148,0,0,0
0,0,0,0,133
;S8-A1/S16-A1/S8-A3/S16-A3 SOUND js
FFH
; end

A-280

;
Tbl3_M300:
DB
DB
say/ra2) j s
DB
say/m2) js
DB

1

,-motor delay between steps

165,0,0,0,190,0,0

.-S5-A2/S13-A2 SOUND

(with

0,0,165,0,0,0,0,133

;S5-A3/S13-A3 SOUND

(with

FFH

;S5-A4 SOUND (with say/m2> js

.-end

Tbl3_M301:
DB
DB
say/m2) js
DB
DB

FFH

Tbl3_M302i
DB
DB
DB
DB

1
,-motor delay between steps
115,0,0,148,0,0,0
0,0,0,0,133
.-S8-A2/S16-A2 SOUND js
FFH
;end

Tbl3_M303:
DB
DB
DB
DB
DB
DB

1
,-motor delay between steps
110,0,0,133,0,0,0,0
0,0,155,0,0
133,0,112,0
148,0,0,0,0,0,133
;S3-A3/SI1-A3 SOUND js
FFH
,- end

Tbl3_M304:
DB
DB
DB
DB
DB

1
;motor delay between steps
110,0,120,0,0,0,0,0
160,0,0,0,190
160,0,0,0,0,133
;S4-A3/S12-A3 SOUND js
FFH
;end
,-S4-A4 SOUND js

Tbl3_M305:
DB
DB
DB
DB
DB

1
;motor delay between steps
115,0,0,0.0,160
0,0,190,0,0,0,0
0,165,133
;S7-A3/S15/A3 SOUND (with say/m2| js
FFH
;enc
;S7-A4 SOUND (with say/m2) js

1
.-motor delay between steps
115,0,0,0.0,145,0,0,165
;S7-A2/S15-A2 SOUND (with
0,0,190,165,0,0,0,133
;end

I

Tbl3_M306:
DB
DB
DB
DB
DB
;
Tbl3_M307:
DB
DB
DB
DB
DB
DB

1
,-motor delay between steps
157,0,0,0,133
0,0,120,0,0,0
133,150,0,0,0,0,133
.-S1-A4 SOUND js
FFH
;end

1
,-motor delay between steps
110,0,0,133,0,0,0,0
0,0,155,0,0
133,0,112,0,0,0
148,0,0,0,0,0,0,0,0,133
;S3-A4 SOUND js
FFH
;end

;
Tbl3_H308:

A-281

DB
DB
DB
DB
DB

1
;motor delay between steps
157,0,0.0,133
0,0,120,0,0,0
133,150,0,0,0.0,0,0,133
;S6-A4 SOUND js
FFH
;end

Tbl3_M309:
DB
1
,motor delay between steps
DB
115,0,0,148,0,0,0,0,0,0,0,0
DB
138,0,0,0,0,0,148,0,0,0
DB
0,0,0,0,133
;S8-A4 SOUND js
DB
FFH
;end
,-END GEORGE
;END SOUND
;GEORGE 07/09/98
,-TILT
Tbl3_M310:
DB
1
.-motor delay between steps
; DB
170,170,0,0,0
DB
170,0,0,0,0
DB
0,0,0,0,133
;S1 A1/S4 A1/S2 A4 TILT js
DB
FFh
Tbl3_M311:
DB
1
,-motor delay between steps
DB
125,0,0,0,133,120,145,110,133
;S2 A1 TILT js
DB
FFH
Tbl3_M312:
DB
DB
DB
Tbl3_M313:
DB
DB
DB
DB
Tbl3_M314:
DB
DB
DB
DB
Tbl3_M315:
DB
DB
DB
DB
Tbl3..M31 6:
DB
DB
DB
DB
js
DB
Tbl3_M317:
DB
DB
js
DB
Tbl3_M318:
DB

1
,-motor delay between steps
150,133,145,133,120,133
;S3 A1 TILT js
FFh
1

,-motor delay between steps
100,0,0,0,0
0,0,0,0,133
;S5 A1/S4 A2/S2 A3/S2 A4 TILT js
FFh
1
,-motor delay between steps
120,100,0,0,0,0,0,0,70,80,90
70,85,100,0,0,133
;S6 A1 TILT js

t Fh

1
.-motor delay between steps
125,133,100,133,145,0,0,160
190,0,0,175,160,133
,-S7 A1 TILT/S6 A2 TILT js
FFh
1
,-motor delay between steps
145,133,145,160,145,160
0,0,0,0,0,0,190,0,0,0,0,0
0,0,0,0,0,0,0,150,133
;S8 A1 TILT (with say/m5)
FFh
10

;motor delay between steps
160,0,0,0,0,0,0,0,190,133
,-S9 A1 TILT/S9 A2 TILT

FFh
10

,-motor delay between steps

A-282

DB
DB
DB
Tbl3_M319:
DB
DB
DB
DB
Tbl3_M320 s
DB
DB
DB
DB

145,165,0,0,0,0,0,0,0.0,0,0
190,0,0,180,190,133
;S10 A1 TILT/S10 A2 TILT js
FFh
1

1
;motor delay between steps
150,133,123,0,0,133.142
0,0,150,0,0,0,0,0,133
;S12 A1 TILT js
FFh

Tbl3_M321:
DB
sDB

1

DB
DB
Tbl3_M322:
DB
DB
DB
Tbl3_M323:
DB
DB
DB
DB
Tbl3_M324:
DB
DB
DB
Tbl3_M325:
DB
DB
DB
Tbl3_M326:
DB
DB
DB
DB
Tbl3_M327:
DB
DB
DB
DB
DB
J
Tbl3_M328:
DB
DB
DB
DB

;motor delay between steps
0,120,0,0,133,141
133,120,0,0,0,133
;S11 A1 TILT (with say/m2) js
FFh

,-motor delay between steps
200,170,170,0,0,0,0,133
;S13 A1 / S15 A3 TILT js

200,170,0,0.0,0,0,133
FFh

;S13 A1 / S15 A3 TILT js

1
;motor delay between steps
170,0,0,0,0,133,126,130,118,133
;S15 A1 TILT js
FFh
1
;motor delay betweer steps
155,0,0,0,0,185
160,0,0,133
;S16 A1 / S15 A2 / S13 A3 TILT js
FFh
1
;motor delay between steps
170,160,0,0,0,0,0,133
;S1 A2/S3 A2/S1 A3/S1 A4 TILT
FFh
10

,-motor delay between steps
120,145,110,133
;S2 A2 TILT (with say/ml6) js

FFh
10

;motor delay between steps
120,100,0,0,0,0,0,0,133
148.133,142,115,0,0,133
;S5 A2 TILT js
FFh
1
,-motor delay between steps
145,133,145,160,145,160,0,0,0,0,0,0
190,0,0,0,0,0,0,0,0
150,133
;S7 A2 TILT (with say/m5) js

FFh

1
,-motor delay between steps
145,0,0,160,0.0,0,0
0,0,0,0,0,0,133
,-S8 A2 TILT (with say/m5)
FFH
;end

js

I

Tbl3_M329:
DB

1

,-motor delay between steps

A-283

DB
DB
DB

0,120,133,143
118,0,0,0,133
FFH
;end

;SI1 A2 TILT (with say/m2)

Tbl3_M330i
DB
DB
DB
DB

1
.-motor delay between steps
150,133,123,0,0,133.142
0,0,150,0,0,0,0,0,133
,-S12 A2 TILT js
FFH
{end

Tbl3_M331i
DB
DB
DB

1
120,150,133
FFH
{end

Tbl3_M332i
DB
DB
DB
DB

1
,-motor delay between steps
120,0,0,0,0,150.0,0,0
160,0,0,0,133,110.0,0,133
,-S14 A2 TILT js
FFH
,- end

Tbl3_M333:
DB
DB
DB
DB
DB
DB
DB

js

,-motor delay between steps
;S13 A2 TILT (with say/m5) js

10

.-motor delay between steps
155,0,0,0,0.190,0,0,183,0,0,0
175,0,0,0,162,0,0,0,0,0,0.0,133
0,0,120,115,110.115.105.133
145,155,165,0,0,0,0
0,0,0,0,0,133
,-S16 A2/S14 A3/S14 A4 TILT js
FFH
,- end

Tbl3_M334:
DB
DB
DB

,-motor delay between steps
120,100,0,0,0,0.0,0,133
,-S3 A3 TILT js
FFH
,• end

Tbl3_M335:
DB
DB
DB
DB

1
,-motor delay between steps
145,133,120,117
110,0,0,133
,-S4 A3/S4 A4 TILT (with say/m26) js
FFH
{end

Tbl3_M336:
DB
DB
DB
DB

10

1
,-motor delay between steps
145,165,0,0,0,0,0,0,0,0,0,0,133
120,133,145,155,0,0,0,133,115,0,0,0,133 ,-S4 A3 TILT js
FFH
.- end

Tbl3_M337:
DB
DB
DB
DB
DB

,-motor delay between steps
145,133,122,147,139,160
190,0,0,0,0
0,0,0,0,155,133
,-S6 A3 TILT (with say/m5)
FFH
;end

Tbl3_M338:
DB
DB
DB
DB

1
,-motor delay between steps
145,165,0,0,0,0,0,0,0
0,0,0,0,0,0,133
{S7 A3/S7 A4 TILT (with say/m5l js
FFH
{end

1

js

A-284

Tbl3_M339:
DB
DB
DB
DB

1
;motor delay between steps
145, 165,0,0,0,0,0,0,0
0,0,0,0,0.0,190,133,155,133
;S8 A3/S8 A4 TILT js
FFH
;end

;
Tbl3_M340:
DB
DB
DB

1
;motor delay between steps
0,0,0,110,0,0
115,0,0,0,0,0,0,133
;S9 A3/S9 A4 TILT (with say/m9)

js
DB

FFH

Tbl3_M341:
DB
DB
DB
say/ml 6)js
DB

10
,-motor delay between steps
165,0,0,0,0,0,0,0,0
0,0,190,180,190,133
;S10 A3/S10 A4 TILT (with
FFH

Tbl3_M342:
DB
DB
say/m2634)js
DB
Tbl3_M3 4 3:
DB
DB
j«=
DB
Tbl3_H344:
DB
DB
DB
say/m5)js
DB
Tbl3_M345:
DB
DB
j»
DB

; end

; end

1
/motor delay between steps
143,118,0,0,0,0,0,133
;S11' A3/S15 A4 TILT (with
FFH

; end

1
,-motor delay between steps
145,150,145,160,133
;S12 A3 TILT (with say/m5)
FFK

j end

10
/motor delay between steps
148,155,0,0,0,0,138,148,155
0,0,0,0,133,125,120,115,133
;S16 A3 TILT (with
FFH

;end

1
/motor delay between steps
155,0,0,120,0.0,0,0,133
,-S3 A4 TILT (with say/m26)
FFH

/end

;
Tbl3_M346:
DB
DB
DB
DB
DB

1
/motor delay between steps
145,165,0,0,0,0,0,0,0,0,0,0,133
120,133,145,125,0,0,0
133,115,0,0,0,133
,-S5 A4 TILT js
FFH
/end

I

Tbl3_M347i
DB
DB
DB
DB
DB

10

/motor delay between steps
115,133,120,160
0,0,0,0,0,190,0,0,0,0
0,0,0,0,0,0,0,0,155,133
/S6 A4 TILT (with say/m5) js
FFH
/end

Tbl3_M348/

A-285

DB
DB
E3

1
;motor delay between steps
120,133.115,133.155
0,0,0.0,0,0,133
;Sll A4 TILT (with say/m2) js
FFH
; end

DB
Tbl3_M349:
DB
DB
DB

1
.-motor delay between steps
145,155,115,133
;S13 A4 TILT (with say/m5) js
; end
FFH

Tbl3_M350:
DB
DB
DB
DB
DB

5
.-motor delay between steps
145,158,0,0.0,0,138,147,155
0,0,0,0,0,0,133
125,120,115,133
;S16 A4 TILT (with say/m5l js
FFH
; end

;END TILT
;END GEORGE
;GEORGE
;IR 07/09/98
Tbl3_M3Sl:
DB
DB
DB
Tbl3_M352:
DB
DB
DB
; DANGER
Tbl3_M353:
DB
DB
DB
Tbl3_M354:
DB
DB
AGE1
DB
Tbl3_M355i
DB
DB
DB
DB
Tbl3_M3S6:
DB
DB
DB
Tbl3_M357:
DB
DB
ir agel
DB
Tbl3_M358:
DB
DB
DB
Tbl3_M359:

20
120.100.133
FFh

,-motor delay between steps SGTEST
;seql,seq2,seq3,seq4 IR age 1

46
115.100.75.133
FFh

,-motor delay between steps SGTEST
;seq5
ir age 1

30
115,130,100,70

.-motor delay between steps
.-SEQ6 (DANCE,WAH) ir AGE1

FFh

;motor delay between steps
133.145.155.190.133.155.175.145.133
;SEQ6 (DO DO DO) ir
1

FFh
8
,-motor delay between steps
145,115,145,133,145,115,145,133,0,0,0,0,0
125,110,133,0,160,0,0,0,133
FFH
;end
1
0
FFh

,-motor delay between steps
;empty space

1
,-motor delay between steps
120.115.110.105.100.80.100.120.115.100.45.133

;seq8

FFh
10

,-motor delay between steps
120,115,100,80,133,145,160,133

,-seq9 ir agel

FFh

A-286

agel

DB
DB
DB

DB
Tbl3_M360:
DB
DB
DB
DB
agel
DB

1
;motor delay between steps
115,133.140,145,133,160,180
173,167,160,180,173,167,160,140,145,133

;seql0.11 ir

FFh
1

;motor delay between steps
120,107,122,113,100,75,90,80.88,100,0,0,133
120,107,122,113,100,75.90,80,88,100,0,133
146,140,155,133
;seql2 ir
FFh

Tbl3_M361:
DB
5
;motor delay between steps
DB
115,125,100,10,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,r 0,0,0
DB
0.0,0,0,0,0,0,0,0.0,75,80,85,90,95,100.115
DB
110,118.100,0,133
;seql3,14 ir
agel
DB
FFh
Tbl3_M362:
DB
DB
agel
DB

10

160,0,0.190,160,0,0,133,100,0,0,0,133
FFh

; DANGER SLEEP
Tbl3_M363:
DB
DB
agel
DB
FFh
Tbl3_M364:
DB
DB
DB
FFh
Tbl3_M365:
DB
10
DB
DB

Tbl3_M366:
DB
10
DB
ir age2
DB
FFh
Tbl3_M367:
DB
DB
;DB
DB
DB
DB
DB
Tbl3_M368:
DB

;seql5 ir

10

90
;10
;motor delay between steps
85,40,30,85,40.30,0,85,40,30,0.85,40,30,10
;seql6 ir

1
;motor delay between steps
125,113,125.118,105,133
;seql,2,3 ir age2

.-motor delay between steps
125,113.125,118,105,133
;SEQ4,5 IR AGE2
FFh

,-motor delay between steps
145,155,140,145,142 150,0,0,0,0,0.0,0,133

:seq6

5
,-motor delay between steps
10,40,10,40.133,143.140,145,143,145
133
100,133
125,113,133
,-seq7,8 ir age 2
125,113,133
;seq7,8 ir age 2
FFh

,-motor delay between steps

A-287

ir age2
DB

DB

125,115,105.0,0,133,145,143.155,133.100,133

,seq9

FFh

Tbl3_M369:
DB
DB
;DB
;seqlO ir age2

1
.-motor delay between steps
125,120,115,113,110,105,123,108
123,115,110,100,100,100,100,0,0,0,0,0,0,0,0,133

DB

123,115,110,100,0,0,0,0,0.0,0,0,0,0,0,133

DB

FFH

.-seqlO ir

age2
; end

Tbl3_M370:
DB
DB
ir age2
DB

FFH

Tbl3_M371:
DB
DB
DB
DB
DB

1
.-motor delay between steps
150,0,0,0,100,0,0,10,0,0.0.0,0,0.0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0.0,0,0.0,0,0,0,0,0,0,0
115,90,110,100.133
;seql3,14 ir age2
FFH
; end

1
,-motor delay between steps
125,119,113,120,113,140,150,133

Tbl3_M372:
DB
DB
DB
; DANGER SLEEP
Tbl3_M373:
DB
DB
DB
FFH

jseqll

; end

43
,-motor delay between steps
100,0,0.150,0,0,100,0,0,0,0,133
;seql5 ir age2
FFH
;end

90
;motor delay between steps
85.40,30,85,40,30,85,40,30,10
;seql6 ir age2
;end

Tbl3_M374:
DB
DB
DB

1
,-motor delay between steps
115,145,140,160,133
;seql,2,3.4.5 ir age3
FFH
,- end

Tbl3_M375:
DB
DB
DB

1
,-motor delay between steps
120,0,0,145,138.150.120,105,133
;seq6 ir age3
FFH
;end

!

Tbl3_M376:
DB
DB
DB
DB

1
,-motor delay between steps
115.0,145.155,0.0,136.150,145,190.151,133,150
145,190,151,0,133
,-seq7.8 ir age3
FFH
; end

Tbl3_M377:
DB
DB
DB

1
,-motor delay between steps
120.123,112,133,143,151,160.133
;seq9 ir age3
FFH
;end

Tbl3_M378:
DB

1

;motor delay between steps

A-288

OB
DB
Tbl3_M379:
DB
DB
DB
DB
DB

FFH

120,122,115.125.112,150,0,0.0,133
; end

;seqll ir age3

1
/motor delay between ateps
115,10,0,0,10,0.0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0
145,110,0,0,0,0.0,0.133
;aeql3,14 ir age3
FFH
;end

;
Tbl3_M3flO:
DB
DB
DB
DB
Tbl3_M381:
DB
DB
age4
DB
Tbl3_M382:
DB
DB
DB

12
;motor delay between steps
117,0,0,0,0,0.0,133.0.0,0,0,0,0.0,100.0,0,0,0.30
100,0,0,0,0.0,0.0,0.0,0.0,0,0.133
;seql5 ir age3
FFH
;end

/motor delay between steps
120,150,110.0,0,0,133
;seql.2,3.4.5 ir
Fr H

; end

10

;motor delay between steps
120.110,145,155,100,133
FFH
/end

jseqo ir age4

;
Tbl3_M383:
DB
DB
DB
DB
Tbl4_M384:
DB
DB
DB
age4
DB
Tbl4_M385:
DB
DB
DB
DB
DIALOGUE
Tbl4_M386:
DB
DB
DB

8
/motor delay between steps
145,115,145,133,145,115.145,133,0,0.0,0,0
125.110,133.0,160,0,0.0,133
FFH
;end

1
;motor delay between steps
115,133,143,148.136,160,180
173.167,160.180.173,167,160,140.145,133
FFH

;seq9 ir

;end

1
;motor delay between steps
118,0,0,155.0,0,133,0,0,118.0,133.0.0,0.0,110
0,0,0.133,120,107,122,113,100,75,90.80.88,100,133
FFH
;end
SAY NUMBERS MODIFIED TO MATCH CORRECT

1
/motor delay between steps
120,123,112,133,143,151,160,133
FFH
; end

!

Tbl4_M387i
DB
DB
DB

1
/motor delay between steps
120,0,0.145,110,145,110,0,0,0,0,0,133
FFH
/end

;
Tbl4_M388:
DB
DB

1
/motor delay between steps
120,110,133 /OK
/seql4 ir age4

A-289

DB
FFH
; end
/
Tbl4_M389:
DB
90
,-motor delay between steps
DB
150,0,130,0,100.0,133
; YAWN
DB
FFH
;end
; DANGER SLEEP
Tbl4_M390:
DB
90
;motor delay between steps
DB
0,0,0,85,30,0,20,0,85,30,0,20,0,85,30,0,20,0,85,10
DB
FFH
;end
;END GEORGE 07/09/98
;END IR
; FURBY SAYS: (LIGHT) DMH
Tbl4_M391:
DB
10
DB
110,133
;
DB
110,120,133
DB
FFH
; end

.•motor delay between steps
.-LIGHT (furby says)
.•LIGHT (furby says)

Tbl4_M392:
DB
DB
DB

/ dmh no light
1
;motor delay between steps
150,0,0,0,115,0,0,0,0,133
FFH
;end

Tbl4_M393:
DB
DB
DB

; dmh loud sound
30
/motor delay between steps
150,0,0,0,115,0,0.0,0,133
FFH
/ end

Tbl4_M394:

; LISTEN DMH

DB
DB
DB

10

Tbl4_M3 9 5:
DB
DB
DB
Tbl4_M396:
DB
DB
DB

/motor delay between steps

140,150,0,0,133
FFH

10
160,133
FFH
;end

/motor delay between steps
/(ME)

1
/motor delay between steps
120,130,120,133 /ME ME
FFH
/ end

Tbl4_M397:
DB
DB
DB

/motor delay between steps
115,130,110,133
/DO MOH
FFH
; end

Tbl4_M398:
DB
DB
DB

1
/motor delay between steps
120,130,110,133 ,-TOH LOO
FFH
/end

1

;

A-290

Tbl4_M399:
DB
DB
1

1

;motor ueic-y between steps

FFH

jend

jMOOs
DB
DB

1
FFH

; and

;motor delay between steps
; ste t diagnostic

Tbl4_M401:
DB
DB

1
FFH

jend

.•motor delay between steps
; key press bee-

Tbl4_M402:
DB
DB

1
FFF

; end

;motor delay between steps
; pass beep

Tbl4_M403:
DB
DB

1
FFH

; end

.•motor delay between steps
; fail beep

Tbl4_M4C4i
DB
DB

1
FFH

; end

Tbl4_M405:
DB
DB
DB

1
;motcr delay bet een steps
10,200,10,134
; motor cal
FFH
; end

Tbl4_M406:
DB
DB
DB

1
120
FFH

Tbl4_M407:
DB
DB
DB

255
0,134
FFH
; end

Tbl4_M408:
DB
DB
DB
Tbl4_M409:
Db
B
DB
Tbl4_M410 s
DB
DB
DB
#
Tbl4_M411:
DB
DB
DB
I

.•motor delay between steps

.-motor delay between st os
; feed 1
;end

;mctor delay between steps
; light pass

1
30
FFH

; end

1
160
; end
FFH

.-motor delay between steps
; sound pass

,-motoi delay between steps
; sleep

1
10
FFH

.•motor delay between steps
; feed 2

i end
; PEEK-BOO (HIDE AND SEEK)
20
;MOTOR DELAY BETWEEN STEPS
155.133,0,0,147,133
FFh

A-291

Tbl4_M412:
DB
DB
DB
DB

; feed djnh
.-motor delay between (taps
165,0,0,0,0,0.0.150,0,0,165,0,0,0,0,0.0,150 ; (AAAAh)
0,0,165,0,0,0,0,0,0,133 ;(AAAAH)
FFH
;end
1

I

;
DB
J
Tbl4_M413:
DB
DB
;
Tbl4_M414:
DB
DB

FFH

;end

1
FFH

;end

1
FFH

; end

Tbl4_M415:
DB
DB

1
FFH

,- end

Tbl4_M416:
DB
DB

1
FFH

;end

Tbl4_M417:
DB
DB

-FH

;end

Tbl4_M418:
DB
DB

1
FFH

;end

1
FFH

;end

1
FFH

;end

1
F 'H

; end

Tbl4_M419:
DB
DB
;
Tbl4_M420:
DB
DB
Tbl4_M421:
DB
DB

,-motor delay between steps

,-motor delay between steps

;mctor delay between steps

imotor delay between steps

1

,-motor delay aetween steps

;motor delay between steps

,-motor delay between steps

;m" -r delay between steps

;motor delay between steps

)

Tbl4_M422:
DB
DB

,-motor delay between steps

1

FFH

;end

Tbl4_M423s
DB
DB

1
FFH

;end

Tbl4_M424:
DB
DB

1
FFH

;end

;motor delay between steps

,-motor delay between steps

I

Tbl4_M425:
DB

1

,-motor delay between steps

A-292

DB

FFH

;end

1
FFH

;end

1
FFH

; end

1
FFH

j end

1
FFH

; end

1
FFH

;end

;
Tbl4_M426:
DB
DB
;
"ol4_M427:
DB
DB
Tbl4_M428:
DB
DB

;motor delay between steps

.-motor delay between steps

;motor delay between steps

l

Tbl4_M429:
DB
DB

.-motor delay between steps

I

Tbl4_M430:
DB
DB

;motor delay between steps

Tbl4_M43-:
Tbl4_M43i -.
Tbl4_H433:
Tbl4_K434:
DB
DB
DB

1
0
FFH

Tbl4_M435:
DB
DB
DB

1
0
FFH

Tbl4_M436:
DB
DB
DB

1
0
FFH

Tbl4_M437:
DB
DB
DB

1
0
FFH

Tbl4_M438i
DB
DB
DB

1
0
FFH

Tbl4_M439:
DB
DB
DB

1
0
FFH

Tbl4_M44 0:
DB

1

.-motor delay between steps
; end

;motor delay between steps
;end

.-motor delay between steps
,- end

.-motor delay between steps
jend

,-motor delay between steps
,- end

,-motor delay between steps
;end

.-motor delay between steps

A-293

DB
DB

0
FFH

; er.d

Tbl4_M441:
I

Tbl4_M442:
;
Tbl4_M443.
J
Tbl4_M444t
;
Tbl4_M445:
Tbl4_M446:
i

Tbl4_M447:
Tbl4_M448:
Tbl4_M449:
I

Tbl4_M450:

;
Tbl4_M4 51:
Tbl4_M452:
;
Tbl4_M453:
Tbl4_M454:
Tbl4_M455:
Tbl4_M456:
Tb-4_M457:
Tbl4_M458:
1
Tbl4_M459:
Tbl4_M460:
Tbl4_M461:
;
Tbl4_M462!
I

TL14_M463:

;
Tbl4_M464i
I

Tbl4_M465 s

;
Tbl4_M466:
Tbl4 J4467:
I

Tbl4_M468:

;
Tbl4_M469:

A-294

Tbl4_M470:

;
Tbl4_M471:
Tbl4_H472:
I

Tbl4_M473:
I

Tbl4_M474s
Tbl4_M475:
J
Tbl4_M476:
Tbl4_M477:
Tbl4_M478:
Tbl4_M479:
Tbl4_M480:
I

Tbl4_M4 81:
Tbl4_M482:
Tbl4_M483:
Tbl4_K484:
I

Tbl4_H485:
Tbl4_M486:
Tbl4_H487:
Tbl4_M48»:
Tbl4_M489:
Tbl4_M490:
Tbl4_M491:
;
Tbl4_M492:
I
Tbl4_M493:
Tbl4_M494:
I

Tbl4_M495:
I

Tbl4_M496:
Tbl4_M497:
Tbl4_M498:
Tbl4_H499:

Tbl4_M500:
J
Tbl4_M501i
?

Tbl4_M502
I

Tbl4_M503:
I

Tbl4_M504:
I

Tbl4_H505:
I

Tbl4_M506:

;
Tbl4_M507:
I

Tbl4_M508:
;
Tbl4_M509:
)
Tbl4_M510:
DB
DB
DB

10
10.200,134
FFH

motor delay between steps

10
10,200,10
FFH

motor delay between steps

end

I

'fbl 4_M511:
DB
DB
DB

end

A-296

